
Steval_SPI2_UART2_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b18  08005b18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b20  08005b20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  2000000c  08005b34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08005b34  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021501  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e16  00000000  00000000  0004153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  00044358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00045930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030f02  00000000  00000000  00046e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181f8  00000000  00000000  00077d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f3f1  00000000  00000000  0008fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  001bf340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005a7c 	.word	0x08005a7c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005a7c 	.word	0x08005a7c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <IIS3DWB_READ_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_READ_REG(void *handle, uint8_t address, uint8_t *rx_data, uint16_t length){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	461a      	mov	r2, r3
 8000500:	460b      	mov	r3, r1
 8000502:	72fb      	strb	r3, [r7, #11]
 8000504:	4613      	mov	r3, r2
 8000506:	813b      	strh	r3, [r7, #8]
	address = address | 0x80;	//Set Read Bit in Address
 8000508:	7afb      	ldrb	r3, [r7, #11]
 800050a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800050e:	b2db      	uxtb	r3, r3
 8000510:	72fb      	strb	r3, [r7, #11]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8000512:	f000 f863 	bl	80005dc <IIS3DWB_CS_LOW>
	//Read Register
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, HAL_MAX_DELAY)){
 8000516:	f107 010b 	add.w	r1, r7, #11
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2201      	movs	r2, #1
 8000520:	68f8      	ldr	r0, [r7, #12]
 8000522:	f003 fad4 	bl	8003ace <HAL_SPI_Transmit>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <IIS3DWB_READ_REG+0x3e>
		return IIS3DWB_ERROR;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	e012      	b.n	8000558 <IIS3DWB_READ_REG+0x64>
	}
	if(HAL_OK != HAL_SPI_Receive(handle, rx_data, length, HAL_MAX_DELAY)){
 8000532:	893a      	ldrh	r2, [r7, #8]
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f003 fc35 	bl	8003daa <HAL_SPI_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <IIS3DWB_READ_REG+0x58>
		return IIS3DWB_ERROR;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e005      	b.n	8000558 <IIS3DWB_READ_REG+0x64>
	}
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f859 	bl	8001604 <HAL_Delay>
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 8000552:	f000 f833 	bl	80005bc <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <IIS3DWB_WRITE_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_WRITE_REG(void *handle, uint8_t address, uint8_t *tx_data, uint16_t length){
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	461a      	mov	r2, r3
 800056c:	460b      	mov	r3, r1
 800056e:	72fb      	strb	r3, [r7, #11]
 8000570:	4613      	mov	r3, r2
 8000572:	813b      	strh	r3, [r7, #8]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8000574:	f000 f832 	bl	80005dc <IIS3DWB_CS_LOW>
	//Transmitting the register address
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, IIS3DWB_SPI_TIMEOUT)){
 8000578:	f107 010b 	add.w	r1, r7, #11
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	2201      	movs	r2, #1
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f003 faa3 	bl	8003ace <HAL_SPI_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <IIS3DWB_WRITE_REG+0x34>
		return IIS3DWB_ERROR;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e00f      	b.n	80005b4 <IIS3DWB_WRITE_REG+0x54>
	}
	//Transmitting the data
	if(HAL_OK != HAL_SPI_Transmit(handle, tx_data, length, IIS3DWB_SPI_TIMEOUT)){
 8000594:	893a      	ldrh	r2, [r7, #8]
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f003 fa96 	bl	8003ace <HAL_SPI_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <IIS3DWB_WRITE_REG+0x4e>
		return IIS3DWB_ERROR;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	e002      	b.n	80005b4 <IIS3DWB_WRITE_REG+0x54>
	}
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 80005ae:	f000 f805 	bl	80005bc <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <IIS3DWB_CS_HIGH>:

//Function:	Sets the GPIO-PIN responsible for the CS-signal to HIGH (LOW-ACTIVE!)
void IIS3DWB_CS_HIGH(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_SET);
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <IIS3DWB_CS_HIGH+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <IIS3DWB_CS_HIGH+0x1c>)
 80005c6:	8811      	ldrh	r1, [r2, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fc9c 	bl	8001f08 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000420 	.word	0x20000420
 80005d8:	200003ae 	.word	0x200003ae

080005dc <IIS3DWB_CS_LOW>:
//void IIS3DWB_3_4_SEL_HIGH(){
//	HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
//}

//Function:	Sets the GPIO-PIN responsible for the CS-signal to LOW (LOW-ACTIVE!)
void IIS3DWB_CS_LOW(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_RESET);
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <IIS3DWB_CS_LOW+0x18>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <IIS3DWB_CS_LOW+0x1c>)
 80005e6:	8811      	ldrh	r1, [r2, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fc8c 	bl	8001f08 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000420 	.word	0x20000420
 80005f8:	200003ae 	.word	0x200003ae

080005fc <IIS3DWB_SET_CONFIG>:
//dev_ctx.write_reg = IIS3DWB_WRITE_REG;
//dev_ctx.handle = &spi_iis3dwb;

/* Functions ------------------------------------------------------------------------ */
//Function:	Set-Function for the configuration of the IIS3DWB-sensor
void static IIS3DWB_SET_CONFIG(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
//	//init driver interface
//	//neccessary for iis3dwb driver (iis3dwb_reg)
//	stmdev_ctx_t dev_ctx;
//	uint8_t reg0;
//
	dev_ctx.read_reg = IIS3DWB_READ_REG;
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000604:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <IIS3DWB_SET_CONFIG+0xd8>)
 8000606:	605a      	str	r2, [r3, #4]
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800060a:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <IIS3DWB_SET_CONFIG+0xdc>)
 800060c:	601a      	str	r2, [r3, #0]
	dev_ctx.handle = &spi_iis3dwb;
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <IIS3DWB_SET_CONFIG+0xe0>)
 8000612:	609a      	str	r2, [r3, #8]
		HAL_UART_Transmit(&huart1, &iis3dwb_deviceID, sizeof(iis3dwb_deviceID), HAL_MAX_DELAY);
		HAL_Delay(1000);
	}*/

	//Get device ID
	iis3dwb_device_id_get(&dev_ctx, &iis3dwb_deviceID);
 8000614:	4932      	ldr	r1, [pc, #200]	; (80006e0 <IIS3DWB_SET_CONFIG+0xe4>)
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000618:	f000 f9ed 	bl	80009f6 <iis3dwb_device_id_get>
	//reset software in ctrl3_c
	//iis3dwb_reset_set(&dev_ctx, PROPERTY_ENABLE);
	iis3dwb_reset_set(&dev_ctx, 1);
 800061c:	2101      	movs	r1, #1
 800061e:	482c      	ldr	r0, [pc, #176]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000620:	f000 f9fa 	bl	8000a18 <iis3dwb_reset_set>
	//continue after reset is finished
	do{
		iis3dwb_reset_get(&dev_ctx, &rst);
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	4619      	mov	r1, r3
 8000628:	4829      	ldr	r0, [pc, #164]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800062a:	f000 fa1b 	bl	8000a64 <iis3dwb_reset_get>
	}while(rst);
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f7      	bne.n	8000624 <IIS3DWB_SET_CONFIG+0x28>
//    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
//    pin_int1_route.int1_ctrl.int1_drdy_xl = 1;
//    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);

    //Select all 3-axis
    iis3dwb_xl_axis_selection_set(&dev_ctx, IIS3DWB_ENABLE_ALL);
 8000634:	2100      	movs	r1, #0
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000638:	f000 f972 	bl	8000920 <iis3dwb_xl_axis_selection_set>

    // 3. Enables accelerometer:IIS3DWB_CTRL1_XL bit 7:5 XL_EN[2:0]
    /*(000: Power-down (default);
    101: accelerometer enabled;)
    All other configurations are not allowed*/
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 800063c:	2301      	movs	r3, #1
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <IIS3DWB_SET_CONFIG+0xe8>)
 8000640:	2110      	movs	r1, #16
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000644:	f000 f916 	bl	8000874 <iis3dwb_read_reg>
    reg0 |= 0xA0;	//1010 0000
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <IIS3DWB_SET_CONFIG+0xe8>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <IIS3DWB_SET_CONFIG+0xe8>)
 8000654:	701a      	strb	r2, [r3, #0]
    iis3dwb_write_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8000656:	2301      	movs	r3, #1
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <IIS3DWB_SET_CONFIG+0xe8>)
 800065a:	2110      	movs	r1, #16
 800065c:	481c      	ldr	r0, [pc, #112]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800065e:	f000 f921 	bl	80008a4 <iis3dwb_write_reg>

    // 4. IIS3DWB_CTRL4_C bit 2
    /* Disable I2C*/
    iis3dwb_i2c_interface_set(&dev_ctx, IIS3DWB_I2C_DISABLE);
 8000662:	2101      	movs	r1, #1
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000666:	f000 fa6e 	bl	8000b46 <iis3dwb_i2c_interface_set>

    //5. Set fifo in continuous / stream mode 110
    //001: FIFO mode: stops collecting data when FIFO is full;
    //110: Continuous mode: if the FIFO is full, the new sample overwrites the older one;
//    iis3dwb_fifo_mode_set(&dev_ctx, IIS3DWB_STREAM_MODE);
    iis3dwb_fifo_mode_set(&dev_ctx, IIS3DWB_FIFO_MODE);
 800066a:	2101      	movs	r1, #1
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800066e:	f000 fb08 	bl	8000c82 <iis3dwb_fifo_mode_set>

    //6. Set watermark 128
    //IIS3DWB_FIFO_CTRL1 7:0 IIS3DWB_FIFO_CTRL2 bit 0
//    uint8_t IIS3DWB_WTM_LEVEL = 128;
    uint8_t IIS3DWB_WTM_LEVEL = 20;
 8000672:	2314      	movs	r3, #20
 8000674:	71fb      	strb	r3, [r7, #7]
    iis3dwb_fifo_watermark_set(&dev_ctx, IIS3DWB_WTM_LEVEL);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b29b      	uxth	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	4814      	ldr	r0, [pc, #80]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800067e:	f000 faa4 	bl	8000bca <iis3dwb_fifo_watermark_set>

    //7. Data Ready pulse mode
    //COUNTER_BDR_REG1 (0Bh) bit 7 dataready_pulsed
    //0: Data-ready latched mode
    //1: Data-ready pulsed mode (the data ready pulses are 18.75 �s long)
    iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_PULSED);			//Original config
 8000682:	2101      	movs	r1, #1
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000686:	f000 f990 	bl	80009aa <iis3dwb_data_ready_mode_set>
    //iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_LATCHED );			//Changed to be observed

    //8. Set full scale
    /* CTRL1_XL (10h) bit 3:2  00 (default) �2 g  01 �16 g 10 �4 g 11 �8 g*/
    // set scale to +- 2g
    iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_16g);
 800068a:	2101      	movs	r1, #1
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 800068e:	f000 f921 	bl	80008d4 <iis3dwb_xl_full_scale_set>
    	IIS3DWB_LP_ODR_DIV_100            = 0x84,
    	IIS3DWB_LP_ODR_DIV_200            = 0x85,
    	IIS3DWB_LP_ODR_DIV_400            = 0x86,
    	IIS3DWB_LP_ODR_DIV_800            = 0x87,
    **/
    iis3dwb_xl_hp_path_on_out_set(&dev_ctx,IIS3DWB_LP_ODR_DIV_20);
 8000692:	2182      	movs	r1, #130	; 0x82
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 8000696:	f000 f9fe 	bl	8000a96 <iis3dwb_xl_hp_path_on_out_set>
     * INT1_FIFO_TH Enables FIFO threshold interrupt on INT1 pin.
     *
     * MD1_CFG (5Eh) Functions routing on INT1 register (r/w) disabled
     *  */
    iis3dwb_pin_int1_route_t pin_int1_route;
    *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	3301      	adds	r3, #1
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
//    pin_int1_route.int1_ctrl.int1_drdy_xl = 1;
//    pin_int1_route.int1_ctrl.int1_fifo_th = 1;
//    pin_int1_route.int1_ctrl.int1_cnt_bdr = 1;
    pin_int1_route.int1_ctrl.int1_fifo_full = 1;
 80006a8:	793b      	ldrb	r3, [r7, #4]
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	713b      	strb	r3, [r7, #4]
    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 80006b6:	f000 fa6c 	bl	8000b92 <iis3dwb_pin_int1_route_set>
    //11. Enable writing to FIFO
    /* FIFO_CTRL3 (09h) bit 3:0 Selects Batch Data Rate (write frequency in FIFO) for accelerometer data.
     * (0000: Accelerometer not batched in FIFO (default);
     * 1010: 26667 Hz;
     * */
    iis3dwb_fifo_xl_batch_set(&dev_ctx, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 80006ba:	210a      	movs	r1, #10
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <IIS3DWB_SET_CONFIG+0xd4>)
 80006be:	f000 faba 	bl	8000c36 <iis3dwb_fifo_xl_batch_set>
	//use LP filter
	//iis3dwb_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);



    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006c2:	2017      	movs	r0, #23
 80006c4:	f001 f8b9 	bl	800183a <HAL_NVIC_EnableIRQ>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000430 	.word	0x20000430
 80006d4:	080004f5 	.word	0x080004f5
 80006d8:	08000561 	.word	0x08000561
 80006dc:	200003b4 	.word	0x200003b4
 80006e0:	200003ac 	.word	0x200003ac
 80006e4:	2000043d 	.word	0x2000043d

080006e8 <IIS3DWB_Int_Measure>:
//		ftoa(acceleration_mg[2], msg_2, 2);
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, sizeof(msg_2), HAL_MAX_DELAY);
	}
}

void IIS3DWB_Int_Measure(){
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 80006ee:	af00      	add	r7, sp, #0
	stmdev_ctx_t dev_ctx;
	dev_ctx.read_reg = IIS3DWB_READ_REG;
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <IIS3DWB_Int_Measure+0x11c>)
 80006f2:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 80006f6:	4b44      	ldr	r3, [pc, #272]	; (8000808 <IIS3DWB_Int_Measure+0x120>)
 80006f8:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	dev_ctx.handle = &spi_iis3dwb;
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <IIS3DWB_Int_Measure+0x124>)
 80006fe:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 8000702:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8000706:	2301      	movs	r3, #1
 8000708:	4a41      	ldr	r2, [pc, #260]	; (8000810 <IIS3DWB_Int_Measure+0x128>)
 800070a:	213a      	movs	r1, #58	; 0x3a
 800070c:	f000 f8b2 	bl	8000874 <iis3dwb_read_reg>
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS2, &reg1, 1);
 8000710:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8000714:	2301      	movs	r3, #1
 8000716:	4a3f      	ldr	r2, [pc, #252]	; (8000814 <IIS3DWB_Int_Measure+0x12c>)
 8000718:	213b      	movs	r1, #59	; 0x3b
 800071a:	f000 f8ab 	bl	8000874 <iis3dwb_read_reg>
    fifo_level = ((reg1 & 0x03) << 8) + reg0;
 800071e:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <IIS3DWB_Int_Measure+0x12c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	b29b      	uxth	r3, r3
 8000726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <IIS3DWB_Int_Measure+0x128>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	4413      	add	r3, r2
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <IIS3DWB_Int_Measure+0x130>)
 8000738:	801a      	strh	r2, [r3, #0]

    uint16_t i = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	f8a7 33a6 	strh.w	r3, [r7, #934]	; 0x3a6
    uint8_t mem_X[128*7] = {0};
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	3304      	adds	r3, #4
 800074a:	f44f 725f 	mov.w	r2, #892	; 0x37c
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 f98b 	bl	8005a6c <memset>
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8000756:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800075a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <IIS3DWB_Int_Measure+0x134>)
 8000760:	2178      	movs	r1, #120	; 0x78
 8000762:	f000 f887 	bl	8000874 <iis3dwb_read_reg>
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_OUTX_L_A, (uint8_t *)mem_X, IIS3DWB_SAMPLES_PER_IT * 7);
 8000766:	f107 0218 	add.w	r2, r7, #24
 800076a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800076e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000772:	2128      	movs	r1, #40	; 0x28
 8000774:	f000 f87e 	bl	8000874 <iis3dwb_read_reg>
//      tmpX[i] = *p16src++;
//      tmpY[i] = *p16src++;
//      tmpZ[i] = *p16src++;
//    }

    uint8_t reg2 = 0;
 8000778:	f107 0317 	add.w	r3, r7, #23
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
    uint8_t reg3 = 0;
 8000780:	f107 0316 	add.w	r3, r7, #22
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS1, &reg2, 1);
 8000788:	f107 0217 	add.w	r2, r7, #23
 800078c:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8000790:	2301      	movs	r3, #1
 8000792:	213a      	movs	r1, #58	; 0x3a
 8000794:	f000 f86e 	bl	8000874 <iis3dwb_read_reg>
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS2, &reg3, 1);
 8000798:	f107 0216 	add.w	r2, r7, #22
 800079c:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80007a0:	2301      	movs	r3, #1
 80007a2:	213b      	movs	r1, #59	; 0x3b
 80007a4:	f000 f866 	bl	8000874 <iis3dwb_read_reg>
    fifo_level = ((reg1 & 0x03) << 8) + reg0;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <IIS3DWB_Int_Measure+0x12c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <IIS3DWB_Int_Measure+0x128>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4413      	add	r3, r2
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <IIS3DWB_Int_Measure+0x130>)
 80007c2:	801a      	strh	r2, [r3, #0]

//    HAL_UART_Transmit(&huart2, (uint8_t*)mem_X[0], sizeof(mem_X[0]), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t*)mem_X[1], sizeof(mem_X[1]), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t*)tmpY[0], sizeof(tmpY[0]), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t*)tmpZ[0], sizeof(tmpZ[0]), HAL_MAX_DELAY);
    char someTxt[] = {"Now in interrupt"};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <IIS3DWB_Int_Measure+0x138>)
 80007c8:	461c      	mov	r4, r3
 80007ca:	4615      	mov	r5, r2
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)someTxt, sizeof(someTxt), HAL_MAX_DELAY);
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	2211      	movs	r2, #17
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <IIS3DWB_Int_Measure+0x13c>)
 80007de:	f004 fafb 	bl	8004dd8 <HAL_UART_Transmit>
//    uint8_t someNr[] = {10,11,12,13};
//	char msg0[10] ;
//	itoa(someNr[0],msg0,10);
//    HAL_UART_Transmit(&huart2, (uint8_t*) msg0, sizeof(msg0), HAL_MAX_DELAY);
	//enable fifo bypass mode
	iis3dwb_fifo_mode_set(&dev_ctx,IIS3DWB_BYPASS_MODE);
 80007e2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fa4a 	bl	8000c82 <iis3dwb_fifo_mode_set>
	iis3dwb_fifo_mode_set(&dev_ctx, IIS3DWB_FIFO_MODE);
 80007ee:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80007f2:	2101      	movs	r1, #1
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fa44 	bl	8000c82 <iis3dwb_fifo_mode_set>
}
 80007fa:	bf00      	nop
 80007fc:	f507 776a 	add.w	r7, r7, #936	; 0x3a8
 8000800:	46bd      	mov	sp, r7
 8000802:	bdb0      	pop	{r4, r5, r7, pc}
 8000804:	080004f5 	.word	0x080004f5
 8000808:	08000561 	.word	0x08000561
 800080c:	200003b4 	.word	0x200003b4
 8000810:	2000043d 	.word	0x2000043d
 8000814:	2000043c 	.word	0x2000043c
 8000818:	200003a8 	.word	0x200003a8
 800081c:	20000028 	.word	0x20000028
 8000820:	08005a94 	.word	0x08005a94
 8000824:	20000550 	.word	0x20000550

08000828 <IIS3DWB_INIT>:

//Function:	Init-Function for the IIS3DWB-sensor
//para_1:	HAL SPI handler name from STM32 (Pointer)
//para_2:	HAL GPIO-bank-handler name from STM32 for CS-signal (Pointer)
//para_3:	HAL GPIO-PIN name from STM32 for CS-signal
void IIS3DWB_INIT(SPI_HandleTypeDef spi, GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN){
 8000828:	b084      	sub	sp, #16
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
 800082e:	f107 0c08 	add.w	ip, r7, #8
 8000832:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_iis3dwb = spi;	//Setting the SPI handler for the IIS3DWB-sensor
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <IIS3DWB_INIT+0x40>)
 8000838:	4618      	mov	r0, r3
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2264      	movs	r2, #100	; 0x64
 8000840:	4619      	mov	r1, r3
 8000842:	f005 f905 	bl	8005a50 <memcpy>
	cs_gpiox_iis3dwb = GPIOx;	//Setting the GPIO-handler for the IIS3DWB-sensor for the relevant PIN-bank
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <IIS3DWB_INIT+0x44>)
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	6013      	str	r3, [r2, #0]
	cs_gpio_iis3dwb = GPIO_PIN;	//Setting the GPIO-PIN for the low-active chip select for the IIS3DWB-sensor
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <IIS3DWB_INIT+0x48>)
 800084e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000852:	8013      	strh	r3, [r2, #0]

	IIS3DWB_CS_HIGH();			//Setting the cs-signal high (LOW-ACTIVE!) for the default state; only set to low for transmitting or receiving
 8000854:	f7ff feb2 	bl	80005bc <IIS3DWB_CS_HIGH>
//	IIS3DWB_3_4_SEL_HIGH();
	IIS3DWB_SET_CONFIG();
 8000858:	f7ff fed0 	bl	80005fc <IIS3DWB_SET_CONFIG>
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000864:	b004      	add	sp, #16
 8000866:	4770      	bx	lr
 8000868:	200003b4 	.word	0x200003b4
 800086c:	20000420 	.word	0x20000420
 8000870:	200003ae 	.word	0x200003ae

08000874 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	461a      	mov	r2, r3
 8000880:	460b      	mov	r3, r1
 8000882:	72fb      	strb	r3, [r7, #11]
 8000884:	4613      	mov	r3, r2
 8000886:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685c      	ldr	r4, [r3, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6898      	ldr	r0, [r3, #8]
 8000890:	893b      	ldrh	r3, [r7, #8]
 8000892:	7af9      	ldrb	r1, [r7, #11]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	47a0      	blx	r4
 8000898:	6178      	str	r0, [r7, #20]
  return ret;
 800089a:	697b      	ldr	r3, [r7, #20]
}
 800089c:	4618      	mov	r0, r3
 800089e:	371c      	adds	r7, #28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	461a      	mov	r2, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	72fb      	strb	r3, [r7, #11]
 80008b4:	4613      	mov	r3, r2
 80008b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681c      	ldr	r4, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6898      	ldr	r0, [r3, #8]
 80008c0:	893b      	ldrh	r3, [r7, #8]
 80008c2:	7af9      	ldrb	r1, [r7, #11]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	47a0      	blx	r4
 80008c8:	6178      	str	r0, [r7, #20]
  return ret;
 80008ca:	697b      	ldr	r3, [r7, #20]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	371c      	adds	r7, #28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80008e0:	f107 0208 	add.w	r2, r7, #8
 80008e4:	2301      	movs	r3, #1
 80008e6:	2110      	movs	r1, #16
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffc3 	bl	8000874 <iis3dwb_read_reg>
 80008ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10f      	bne.n	8000916 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	f362 0383 	bfi	r3, r2, #2, #2
 8000904:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8000906:	f107 0208 	add.w	r2, r7, #8
 800090a:	2301      	movs	r3, #1
 800090c:	2110      	movs	r1, #16
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffc8 	bl	80008a4 <iis3dwb_write_reg>
 8000914:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <iis3dwb_xl_axis_selection_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_axis_selection_set(stmdev_ctx_t *ctx,
                                     iis3dwb_xl_axis_sel_t val)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	2301      	movs	r3, #1
 8000932:	2113      	movs	r1, #19
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff9d 	bl	8000874 <iis3dwb_read_reg>
 800093a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d110      	bne.n	8000964 <iis3dwb_xl_axis_selection_set+0x44>
    ctrl4_c._1ax_to_3regout = ( (uint8_t)val & 0x10U ) >> 4;
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7c3b      	ldrb	r3, [r7, #16]
 800094e:	f362 0300 	bfi	r3, r2, #0, #1
 8000952:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	2301      	movs	r3, #1
 800095a:	2113      	movs	r1, #19
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffa1 	bl	80008a4 <iis3dwb_write_reg>
 8000962:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d107      	bne.n	800097a <iis3dwb_xl_axis_selection_set+0x5a>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800096a:	f107 020c 	add.w	r2, r7, #12
 800096e:	2301      	movs	r3, #1
 8000970:	2115      	movs	r1, #21
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff7e 	bl	8000874 <iis3dwb_read_reg>
 8000978:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10f      	bne.n	80009a0 <iis3dwb_xl_axis_selection_set+0x80>
    ctrl6_c.xl_axis_sel = (uint8_t)val;
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	f362 0301 	bfi	r3, r2, #0, #2
 800098e:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8000990:	f107 020c 	add.w	r2, r7, #12
 8000994:	2301      	movs	r3, #1
 8000996:	2115      	movs	r1, #21
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff83 	bl	80008a4 <iis3dwb_write_reg>
 800099e:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80009a0:	697b      	ldr	r3, [r7, #20]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80009b6:	f107 0208 	add.w	r2, r7, #8
 80009ba:	2301      	movs	r3, #1
 80009bc:	210b      	movs	r1, #11
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff58 	bl	8000874 <iis3dwb_read_reg>
 80009c4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10f      	bne.n	80009ec <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	f362 13c7 	bfi	r3, r2, #7, #1
 80009da:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80009dc:	f107 0208 	add.w	r2, r7, #8
 80009e0:	2301      	movs	r3, #1
 80009e2:	210b      	movs	r1, #11
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff5d 	bl	80008a4 <iis3dwb_write_reg>
 80009ea:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 80009ec:	68fb      	ldr	r3, [r7, #12]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8000a00:	2301      	movs	r3, #1
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	210f      	movs	r1, #15
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ff34 	bl	8000874 <iis3dwb_read_reg>
 8000a0c:	60f8      	str	r0, [r7, #12]
  return ret;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2112      	movs	r1, #18
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff21 	bl	8000874 <iis3dwb_read_reg>
 8000a32:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10f      	bne.n	8000a5a <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8000a3a:	78fb      	ldrb	r3, [r7, #3]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	7a3b      	ldrb	r3, [r7, #8]
 8000a44:	f362 0300 	bfi	r3, r2, #0, #1
 8000a48:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a4a:	f107 0208 	add.w	r2, r7, #8
 8000a4e:	2301      	movs	r3, #1
 8000a50:	2112      	movs	r1, #18
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff26 	bl	80008a4 <iis3dwb_write_reg>
 8000a58:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <iis3dwb_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a6e:	f107 0208 	add.w	r2, r7, #8
 8000a72:	2301      	movs	r3, #1
 8000a74:	2112      	movs	r1, #18
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fefc 	bl	8000874 <iis3dwb_read_reg>
 8000a7c:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000a7e:	7a3b      	ldrb	r3, [r7, #8]
 8000a80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	701a      	strb	r2, [r3, #0]

  return ret;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000aa2:	f107 0210 	add.w	r2, r7, #16
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fee2 	bl	8000874 <iis3dwb_read_reg>
 8000ab0:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d111      	bne.n	8000adc <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8000ab8:	78fb      	ldrb	r3, [r7, #3]
 8000aba:	09db      	lsrs	r3, r3, #7
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	7c3b      	ldrb	r3, [r7, #16]
 8000ac6:	f362 0341 	bfi	r3, r2, #1, #1
 8000aca:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fee5 	bl	80008a4 <iis3dwb_write_reg>
 8000ada:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d107      	bne.n	8000af2 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8000ae2:	f107 020c 	add.w	r2, r7, #12
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2117      	movs	r1, #23
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fec2 	bl	8000874 <iis3dwb_read_reg>
 8000af0:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d121      	bne.n	8000b3c <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	f362 0382 	bfi	r3, r2, #2, #1
 8000b08:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	095b      	lsrs	r3, r3, #5
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	7b3b      	ldrb	r3, [r7, #12]
 8000b16:	f362 1304 	bfi	r3, r2, #4, #1
 8000b1a:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	f362 1347 	bfi	r3, r2, #5, #3
 8000b2a:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8000b2c:	f107 020c 	add.w	r2, r7, #12
 8000b30:	2301      	movs	r3, #1
 8000b32:	2117      	movs	r1, #23
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff feb5 	bl	80008a4 <iis3dwb_write_reg>
 8000b3a:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8000b3c:	697b      	ldr	r3, [r7, #20]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000b52:	f107 0208 	add.w	r2, r7, #8
 8000b56:	2301      	movs	r3, #1
 8000b58:	2113      	movs	r1, #19
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe8a 	bl	8000874 <iis3dwb_read_reg>
 8000b60:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10f      	bne.n	8000b88 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	7a3b      	ldrb	r3, [r7, #8]
 8000b72:	f362 0382 	bfi	r3, r2, #2, #1
 8000b76:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	2113      	movs	r1, #19
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fe8f 	bl	80008a4 <iis3dwb_write_reg>
 8000b86:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000b88:	68fb      	ldr	r3, [r7, #12]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8000b9c:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fe7e 	bl	80008a4 <iis3dwb_write_reg>
 8000ba8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d107      	bne.n	8000bc0 <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	215e      	movs	r1, #94	; 0x5e
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fe73 	bl	80008a4 <iis3dwb_write_reg>
 8000bbe:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2108      	movs	r1, #8
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe48 	bl	8000874 <iis3dwb_read_reg>
 8000be4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10a      	bne.n	8000c02 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8000bf2:	f107 0210 	add.w	r2, r7, #16
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fe52 	bl	80008a4 <iis3dwb_write_reg>
 8000c00:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d111      	bne.n	8000c2c <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7b3b      	ldrb	r3, [r7, #12]
 8000c16:	f362 0300 	bfi	r3, r2, #0, #1
 8000c1a:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8000c1c:	f107 020c 	add.w	r2, r7, #12
 8000c20:	2301      	movs	r3, #1
 8000c22:	2108      	movs	r1, #8
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fe3d 	bl	80008a4 <iis3dwb_write_reg>
 8000c2a:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 8000c2c:	697b      	ldr	r3, [r7, #20]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8000c42:	f107 0208 	add.w	r2, r7, #8
 8000c46:	2301      	movs	r3, #1
 8000c48:	2109      	movs	r1, #9
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe12 	bl	8000874 <iis3dwb_read_reg>
 8000c50:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	7a3b      	ldrb	r3, [r7, #8]
 8000c62:	f362 0303 	bfi	r3, r2, #0, #4
 8000c66:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8000c68:	f107 0208 	add.w	r2, r7, #8
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2109      	movs	r1, #9
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fe17 	bl	80008a4 <iis3dwb_write_reg>
 8000c76:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8000c8e:	f107 0208 	add.w	r2, r7, #8
 8000c92:	2301      	movs	r3, #1
 8000c94:	210a      	movs	r1, #10
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fdec 	bl	8000874 <iis3dwb_read_reg>
 8000c9c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	7a3b      	ldrb	r3, [r7, #8]
 8000cae:	f362 0302 	bfi	r3, r2, #0, #3
 8000cb2:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	2301      	movs	r3, #1
 8000cba:	210a      	movs	r1, #10
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fdf1 	bl	80008a4 <iis3dwb_write_reg>
 8000cc2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b099      	sub	sp, #100	; 0x64
 8000cd4:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f000 fc20 	bl	800151a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f831 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 f95b 	bl	8000f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce2:	f000 f8e3 	bl	8000eac <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000ce6:	f000 f87d 	bl	8000de4 <MX_SPI2_Init>
  MX_DMA_Init();
 8000cea:	f000 f92b 	bl	8000f44 <MX_DMA_Init>
  MX_TIM17_Init();
 8000cee:	f000 f8b7 	bl	8000e60 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <main+0x60>)
 8000cf4:	f003 fdb0 	bl	8004858 <HAL_TIM_Base_Start_IT>
  IIS3DWB_INIT(hspi2, SPI2_CS_GPIO_Port , SPI2_CS_Pin);
 8000cf8:	4c0e      	ldr	r4, [pc, #56]	; (8000d34 <main+0x64>)
 8000cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfe:	9316      	str	r3, [sp, #88]	; 0x58
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <main+0x68>)
 8000d02:	9315      	str	r3, [sp, #84]	; 0x54
 8000d04:	4668      	mov	r0, sp
 8000d06:	f104 0310 	add.w	r3, r4, #16
 8000d0a:	2254      	movs	r2, #84	; 0x54
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f004 fe9f 	bl	8005a50 <memcpy>
 8000d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d16:	f7ff fd87 	bl	8000828 <IIS3DWB_INIT>
	  //HAL_GPIO_TogglePin(LED1_GPIO_Port , LED1_Pin );
	  //char wakeUp [] = {"MCU "};
	  //HAL_UART_Transmit(&huart2, (uint8_t *) wakeUp, sizeof(wakeUp), HAL_MAX_DELAY);
	  //HAL_Delay(500);
	  //checkStatus();
	  if(int1_flag){
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <main+0x6c>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0fb      	beq.n	8000d1a <main+0x4a>
		  IIS3DWB_Int_Measure();
 8000d22:	f7ff fce1 	bl	80006e8 <IIS3DWB_Int_Measure>
		  int1_flag = 0;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <main+0x6c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	  if(int1_flag){
 8000d2c:	e7f5      	b.n	8000d1a <main+0x4a>
 8000d2e:	bf00      	nop
 8000d30:	20000504 	.word	0x20000504
 8000d34:	20000440 	.word	0x20000440
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	200003aa 	.word	0x200003aa

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2244      	movs	r2, #68	; 0x44
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 fe8c 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d66:	f001 f91f 	bl	8001fa8 <HAL_PWREx_ControlVoltageScaling>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d70:	f000 f9f6 	bl	8001160 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d74:	2310      	movs	r3, #16
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d80:	2360      	movs	r3, #96	; 0x60
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000d90:	231e      	movs	r3, #30
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 f9a3 	bl	80020f0 <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000db0:	f000 f9d6 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	230f      	movs	r3, #15
 8000db6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2303      	movs	r3, #3
 8000dba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fdb5 	bl	800293c <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000dd8:	f000 f9c2 	bl	8001160 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3758      	adds	r7, #88	; 0x58
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_SPI2_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000dfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e44:	f002 fda0 	bl	8003988 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f987 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000440 	.word	0x20000440
 8000e5c:	40003800 	.word	0x40003800

08000e60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <MX_TIM17_Init+0x48>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6-1;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_TIM17_Init+0x44>)
 8000e92:	f003 fc89 	bl	80047a8 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000e9c:	f000 f960 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000504 	.word	0x20000504
 8000ea8:	40014800 	.word	0x40014800

08000eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000eb2:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <MX_USART2_UART_Init+0x94>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000ef6:	f003 ff1f 	bl	8004d38 <HAL_UART_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f00:	f000 f92e 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000f08:	f004 fcb4 	bl	8005874 <HAL_UARTEx_SetTxFifoThreshold>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f12:	f000 f925 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000f1a:	f004 fce9 	bl	80058f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f24:	f000 f91c 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_USART2_UART_Init+0x90>)
 8000f2a:	f004 fc6a 	bl	8005802 <HAL_UARTEx_DisableFifoMode>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f34:	f000 f914 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000550 	.word	0x20000550
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_DMA_Init+0x50>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200b      	movs	r0, #11
 8000f80:	f000 fc3f 	bl	8001802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f000 fc58 	bl	800183a <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <MX_GPIO_Init+0x174>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <MX_GPIO_Init+0x174>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <MX_GPIO_Init+0x174>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <MX_GPIO_Init+0x174>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <MX_GPIO_Init+0x174>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <MX_GPIO_Init+0x174>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <MX_GPIO_Init+0x174>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a4a      	ldr	r2, [pc, #296]	; (800110c <MX_GPIO_Init+0x174>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b48      	ldr	r3, [pc, #288]	; (800110c <MX_GPIO_Init+0x174>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <MX_GPIO_Init+0x174>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a44      	ldr	r2, [pc, #272]	; (800110c <MX_GPIO_Init+0x174>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <MX_GPIO_Init+0x174>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <MX_GPIO_Init+0x174>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a3e      	ldr	r2, [pc, #248]	; (800110c <MX_GPIO_Init+0x174>)
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <MX_GPIO_Init+0x174>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <MX_GPIO_Init+0x174>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <MX_GPIO_Init+0x174>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <MX_GPIO_Init+0x174>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4833      	ldr	r0, [pc, #204]	; (8001110 <MX_GPIO_Init+0x178>)
 8001044:	f000 ff60 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_1_2_GPIO_Port, SEL_1_2_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	4831      	ldr	r0, [pc, #196]	; (8001114 <MX_GPIO_Init+0x17c>)
 800104e:	f000 ff5b 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	482f      	ldr	r0, [pc, #188]	; (8001118 <MX_GPIO_Init+0x180>)
 800105a:	f000 ff55 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <MX_GPIO_Init+0x184>)
 8001066:	f000 ff4f 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4823      	ldr	r0, [pc, #140]	; (8001110 <MX_GPIO_Init+0x178>)
 8001082:	f000 fdaf 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_INT1_Pin */
  GPIO_InitStruct.Pin = SPI_INT1_Pin;
 8001086:	2320      	movs	r3, #32
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI_INT1_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <MX_GPIO_Init+0x188>)
 800109c:	f000 fda2 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_2_Pin */
  GPIO_InitStruct.Pin = SEL_1_2_Pin;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_1_2_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_GPIO_Init+0x17c>)
 80010b8:	f000 fd94 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_3_4_Pin */
  GPIO_InitStruct.Pin = SEL_3_4_Pin;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_3_4_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <MX_GPIO_Init+0x180>)
 80010d6:	f000 fd85 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <MX_GPIO_Init+0x184>)
 80010f4:	f000 fd76 	bl	8001be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2017      	movs	r0, #23
 80010fe:	f000 fb80 	bl	8001802 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48001000 	.word	0x48001000
 8001114:	48001800 	.word	0x48001800
 8001118:	48001400 	.word	0x48001400
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800

08001124 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	//Check which version of the timer triggered this callback
	if(htim==&htim17){

	}
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==SPI_INT1_Pin){
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b20      	cmp	r3, #32
 8001146:	d102      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x16>
		//HAL_GPIO_TogglePin(LED1_GPIO_Port , LED1_Pin );
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg_0, sizeof(msg_0), HAL_MAX_DELAY);
		//IIS3DWB_MEASSURE();
		//IIS3DWB_Int_Measure();
		int1_flag = 1;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_GPIO_EXTI_Callback+0x24>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
	}
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200003aa 	.word	0x200003aa

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x44>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_MspInit+0x44>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6613      	str	r3, [r2, #96]	; 0x60
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x44>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x44>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x44>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a39      	ldr	r2, [pc, #228]	; (80012b8 <HAL_SPI_MspInit+0x104>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d16c      	bne.n	80012b0 <HAL_SPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_SPI_MspInit+0x108>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_SPI_MspInit+0x108>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <HAL_SPI_MspInit+0x108>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_SPI_MspInit+0x108>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 800121e:	230a      	movs	r3, #10
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122e:	2305      	movs	r3, #5
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4821      	ldr	r0, [pc, #132]	; (80012c0 <HAL_SPI_MspInit+0x10c>)
 800123a:	f000 fcd3 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800123e:	2308      	movs	r3, #8
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800124e:	2305      	movs	r3, #5
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <HAL_SPI_MspInit+0x110>)
 800125a:	f000 fcc3 	bl	8001be4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_SPI_MspInit+0x118>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001266:	220c      	movs	r2, #12
 8001268:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 800128a:	2220      	movs	r2, #32
 800128c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 8001296:	f000 faeb 	bl	8001870 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_SPI_MspInit+0xf0>
    {
      Error_Handler();
 80012a0:	f7ff ff5e 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 80012a8:	659a      	str	r2, [r3, #88]	; 0x58
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_SPI_MspInit+0x114>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40003800 	.word	0x40003800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	48000800 	.word	0x48000800
 80012c8:	200004a4 	.word	0x200004a4
 80012cc:	40020008 	.word	0x40020008

080012d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_TIM_Base_MspInit+0x44>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d113      	bne.n	800130a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_TIM_Base_MspInit+0x48>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_TIM_Base_MspInit+0x48>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_TIM_Base_MspInit+0x48>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201a      	movs	r0, #26
 8001300:	f000 fa7f 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001304:	201a      	movs	r0, #26
 8001306:	f000 fa98 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40014800 	.word	0x40014800
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0b0      	sub	sp, #192	; 0xc0
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	229c      	movs	r2, #156	; 0x9c
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fb95 	bl	8005a6c <memset>
  if(huart->Instance==USART2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_UART_MspInit+0xb0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13a      	bne.n	80013c2 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fd9d 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001364:	f7ff fefc 	bl	8001160 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_UART_MspInit+0xb8>)
 80013be:	f000 fc11 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	37c0      	adds	r7, #192	; 0xc0
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000c00 	.word	0x48000c00

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f8ce 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Channel1_IRQHandler+0x10>)
 8001432:	f000 fac5 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200004a4 	.word	0x200004a4

08001440 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_INT1_Pin);
 8001444:	2020      	movs	r0, #32
 8001446:	f000 fd77 	bl	8001f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001456:	f003 fa6f 	bl	8004938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000504 	.word	0x20000504

08001464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <SystemInit+0x5c>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <SystemInit+0x5c>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <SystemInit+0x60>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <SystemInit+0x60>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <SystemInit+0x60>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <SystemInit+0x60>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <SystemInit+0x60>)
 8001490:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001494:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001498:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <SystemInit+0x60>)
 800149c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SystemInit+0x60>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <SystemInit+0x60>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SystemInit+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	40021000 	.word	0x40021000

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffca 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014d2:	e003      	b.n	80014dc <LoopCopyDataInit>

080014d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014da:	3104      	adds	r1, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <LoopForever+0xe>)
	adds	r2, r0, r1
 80014e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014e4:	d3f6      	bcc.n	80014d4 <CopyDataInit>
	ldr	r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014e8:	e002      	b.n	80014f0 <LoopFillZerobss>

080014ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014ec:	f842 3b04 	str.w	r3, [r2], #4

080014f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <LoopForever+0x16>)
	cmp	r2, r3
 80014f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014f4:	d3f9      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f004 fa87 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff fbe9 	bl	8000cd0 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001504:	08005b28 	.word	0x08005b28
	ldr	r0, =_sdata
 8001508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800150c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001510:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001514:	200005e4 	.word	0x200005e4

08001518 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_IRQHandler>

0800151a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f961 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f80e 	bl	800154c <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fe16 	bl	800116c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_InitTick+0x6c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_InitTick+0x70>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f96d 	bl	8001856 <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d809      	bhi.n	800159c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f937 	bl	8001802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0x74>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e007      	b.n	80015ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e004      	b.n	80015ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e001      	b.n	80015ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	200005e0 	.word	0x200005e0

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200005e0 	.word	0x200005e0

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff29 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff3e 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff31 	bl	80016b0 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e08d      	b.n	800199e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_DMA_Init+0x138>)
 800188a:	429a      	cmp	r2, r3
 800188c:	d80f      	bhi.n	80018ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b45      	ldr	r3, [pc, #276]	; (80019ac <HAL_DMA_Init+0x13c>)
 8001896:	4413      	add	r3, r2
 8001898:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <HAL_DMA_Init+0x140>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_DMA_Init+0x144>)
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
 80018ac:	e00e      	b.n	80018cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <HAL_DMA_Init+0x148>)
 80018b6:	4413      	add	r3, r2
 80018b8:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_DMA_Init+0x140>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a3c      	ldr	r2, [pc, #240]	; (80019bc <HAL_DMA_Init+0x14c>)
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8fe 	bl	8001b20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800192c:	d102      	bne.n	8001934 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001948:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <HAL_DMA_Init+0x104>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d80c      	bhi.n	8001974 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f91e 	bl	8001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e008      	b.n	8001986 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40020407 	.word	0x40020407
 80019ac:	bffdfff8 	.word	0xbffdfff8
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	40020000 	.word	0x40020000
 80019b8:	bffdfbf8 	.word	0xbffdfbf8
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f003 031c 	and.w	r3, r3, #28
 80019e0:	2204      	movs	r2, #4
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d026      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x7a>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d021      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f003 021c 	and.w	r2, r3, #28
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2104      	movs	r1, #4
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d071      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a38:	e06c      	b.n	8001b14 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 031c 	and.w	r3, r3, #28
 8001a42:	2202      	movs	r2, #2
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02e      	beq.n	8001aac <HAL_DMA_IRQHandler+0xec>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d029      	beq.n	8001aac <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 020a 	bic.w	r2, r2, #10
 8001a74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 021c 	and.w	r2, r3, #28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d038      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001aaa:	e033      	b.n	8001b14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f003 031c 	and.w	r3, r3, #28
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02a      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x156>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d025      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020e 	bic.w	r2, r2, #14
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f003 021c 	and.w	r2, r3, #28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
}
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d80a      	bhi.n	8001b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6493      	str	r3, [r2, #72]	; 0x48
 8001b48:	e007      	b.n	8001b5a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	009a      	lsls	r2, r3, #2
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b54:	4413      	add	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3b08      	subs	r3, #8
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40020407 	.word	0x40020407
 8001b90:	4002081c 	.word	0x4002081c
 8001b94:	cccccccd 	.word	0xcccccccd
 8001b98:	40020880 	.word	0x40020880

08001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	1000823f 	.word	0x1000823f
 8001be0:	40020940 	.word	0x40020940

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e166      	b.n	8001ec2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8158 	beq.w	8001ebc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_Init+0x40>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0201 	and.w	r2, r3, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d017      	beq.n	8001cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0203 	and.w	r2, r3, #3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80b2 	beq.w	8001ebc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	4b61      	ldr	r3, [pc, #388]	; (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6613      	str	r3, [r2, #96]	; 0x60
 8001d64:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d70:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d9a:	d02b      	beq.n	8001df4 <HAL_GPIO_Init+0x210>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x304>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d025      	beq.n	8001df0 <HAL_GPIO_Init+0x20c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a51      	ldr	r2, [pc, #324]	; (8001eec <HAL_GPIO_Init+0x308>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d01f      	beq.n	8001dec <HAL_GPIO_Init+0x208>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d019      	beq.n	8001de8 <HAL_GPIO_Init+0x204>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_GPIO_Init+0x310>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_GPIO_Init+0x200>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_GPIO_Init+0x314>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1fc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x318>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1f8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x31c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1f4>
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	e00e      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dd8:	2308      	movs	r3, #8
 8001dda:	e00c      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001ddc:	2306      	movs	r3, #6
 8001dde:	e00a      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e008      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x212>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e06:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e38:	4a32      	ldr	r2, [pc, #200]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e62:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f ae91 	bne.w	8001bf4 <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	48001400 	.word	0x48001400
 8001efc:	48001800 	.word	0x48001800
 8001f00:	48001c00 	.word	0x48001c00
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f8ee 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d102      	bne.n	8001f80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7e:	e00b      	b.n	8001f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8e:	d102      	bne.n	8001f96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f94:	e000      	b.n	8001f98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d141      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d131      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fdc:	4a41      	ldr	r2, [pc, #260]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fe4:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2232      	movs	r2, #50	; 0x32
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffa:	e002      	b.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d102      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f2      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d158      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e057      	b.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002038:	e04d      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002040:	d141      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d131      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002056:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2232      	movs	r2, #50	; 0x32
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002086:	e002      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3b01      	subs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d102      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f2      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d112      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e011      	b.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020c4:	e007      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40007000 	.word	0x40007000
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 bc16 	b.w	8002930 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002104:	4ba0      	ldr	r3, [pc, #640]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210e:	4b9e      	ldr	r3, [pc, #632]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80e4 	beq.w	80022ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_RCC_OscConfig+0x4c>
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	f040 808b 	bne.w	800224a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b01      	cmp	r3, #1
 8002138:	f040 8087 	bne.w	800224a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_OscConfig+0x64>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e3ed      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_RCC_OscConfig+0x7e>
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216c:	e005      	b.n	800217a <HAL_RCC_OscConfig+0x8a>
 800216e:	4b86      	ldr	r3, [pc, #536]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217a:	4293      	cmp	r3, r2
 800217c:	d223      	bcs.n	80021c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fdc8 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3ce      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002192:	4b7d      	ldr	r3, [pc, #500]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4977      	ldr	r1, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b0:	4b75      	ldr	r3, [pc, #468]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	4972      	ldr	r1, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
 80021c4:	e025      	b.n	8002212 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6f      	ldr	r2, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	496a      	ldr	r1, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4965      	ldr	r1, [pc, #404]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fd88 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e38e      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002212:	f000 fcbf 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	495a      	ldr	r1, [pc, #360]	; (800238c <HAL_RCC_OscConfig+0x29c>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x2a0>)
 8002230:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002232:	4b58      	ldr	r3, [pc, #352]	; (8002394 <HAL_RCC_OscConfig+0x2a4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f988 	bl	800154c <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d052      	beq.n	80022ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	e372      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d032      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4c      	ldr	r2, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225e:	f7ff f9c5 	bl	80015ec <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002266:	f7ff f9c1 	bl	80015ec <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e35b      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002284:	4b40      	ldr	r3, [pc, #256]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a3f      	ldr	r2, [pc, #252]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	493a      	ldr	r1, [pc, #232]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4935      	ldr	r1, [pc, #212]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
 80022b6:	e01a      	b.n	80022ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c4:	f7ff f992 	bl	80015ec <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022cc:	f7ff f98e 	bl	80015ec <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e328      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1dc>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d073      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x21c>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d10e      	bne.n	8002324 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d10b      	bne.n	8002324 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d063      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d15f      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e305      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x24c>
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0x288>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x270>
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0f      	ldr	r2, [pc, #60]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x288>
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_RCC_OscConfig+0x298>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff f934 	bl	80015ec <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	e010      	b.n	80023aa <HAL_RCC_OscConfig+0x2ba>
 8002388:	40021000 	.word	0x40021000
 800238c:	08005aa8 	.word	0x08005aa8
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f928 	bl	80015ec <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e2c2      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023aa:	4baf      	ldr	r3, [pc, #700]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x2a8>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f918 	bl	80015ec <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff f914 	bl	80015ec <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2ae      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d2:	4ba5      	ldr	r3, [pc, #660]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x2d0>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d060      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x310>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d119      	bne.n	800242e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d116      	bne.n	800242e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	4b99      	ldr	r3, [pc, #612]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_OscConfig+0x328>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e28b      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b93      	ldr	r3, [pc, #588]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	4990      	ldr	r1, [pc, #576]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242c:	e040      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d023      	beq.n	800247e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002436:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a8b      	ldr	r2, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7ff f8d3 	bl	80015ec <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7ff f8cf 	bl	80015ec <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e269      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245c:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	497c      	ldr	r1, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	e018      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b7a      	ldr	r3, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a79      	ldr	r2, [pc, #484]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff f8af 	bl	80015ec <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff f8ab 	bl	80015ec <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e245      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a4:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03c      	beq.n	8002536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ca:	4a67      	ldr	r2, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7ff f88a 	bl	80015ec <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024dc:	f7ff f886 	bl	80015ec <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e220      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80024f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCC_OscConfig+0x3ec>
 80024fc:	e01b      	b.n	8002536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7ff f86d 	bl	80015ec <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002516:	f7ff f869 	bl	80015ec <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e203      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a6 	beq.w	8002690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a43      	ldr	r2, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256c:	2301      	movs	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002570:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_OscConfig+0x57c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d118      	bne.n	80025ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x57c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3a      	ldr	r2, [pc, #232]	; (800266c <HAL_RCC_OscConfig+0x57c>)
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002588:	f7ff f830 	bl	80015ec <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7ff f82c 	bl	80015ec <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1c6      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_RCC_OscConfig+0x57c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d8>
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a2a      	ldr	r2, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c6:	e024      	b.n	8002612 <HAL_RCC_OscConfig+0x522>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d110      	bne.n	80025f2 <HAL_RCC_OscConfig+0x502>
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f0:	e00f      	b.n	8002612 <HAL_RCC_OscConfig+0x522>
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe ffe7 	bl	80015ec <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe ffe3 	bl	80015ec <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e17b      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x578>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ed      	beq.n	8002622 <HAL_RCC_OscConfig+0x532>
 8002646:	e01a      	b.n	800267e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe ffd0 	bl	80015ec <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264e:	e00f      	b.n	8002670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe ffcc 	bl	80015ec <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d906      	bls.n	8002670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e164      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	4ba8      	ldr	r3, [pc, #672]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e8      	bne.n	8002650 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267e:	7ffb      	ldrb	r3, [r7, #31]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4ba3      	ldr	r3, [pc, #652]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4aa2      	ldr	r2, [pc, #648]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03c      	beq.n	8002716 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a4:	4b9b      	ldr	r3, [pc, #620]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80026a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026aa:	4a9a      	ldr	r2, [pc, #616]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe ff9a 	bl	80015ec <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026bc:	f7fe ff96 	bl	80015ec <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e130      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ce:	4b91      	ldr	r3, [pc, #580]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80026d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ef      	beq.n	80026bc <HAL_RCC_OscConfig+0x5cc>
 80026dc:	e01b      	b.n	8002716 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026de:	4b8d      	ldr	r3, [pc, #564]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80026e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e4:	4a8b      	ldr	r2, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe ff7d 	bl	80015ec <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f6:	f7fe ff79 	bl	80015ec <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e113      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002708:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800270a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8107 	beq.w	800292e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	2b02      	cmp	r3, #2
 8002726:	f040 80cb 	bne.w	80028c0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	429a      	cmp	r2, r3
 800273c:	d12c      	bne.n	8002798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	3b01      	subs	r3, #1
 800274a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d123      	bne.n	8002798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d11b      	bne.n	8002798 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d113      	bne.n	8002798 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d109      	bne.n	8002798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	3b01      	subs	r3, #1
 8002792:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d06d      	beq.n	8002874 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d068      	beq.n	8002870 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800279e:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027aa:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0ba      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027ba:	4b56      	ldr	r3, [pc, #344]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a55      	ldr	r2, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027c6:	f7fe ff11 	bl	80015ec <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe ff0d 	bl	80015ec <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0a7      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x828>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027fc:	3a01      	subs	r2, #1
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002806:	0212      	lsls	r2, r2, #8
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800280e:	0852      	lsrs	r2, r2, #1
 8002810:	3a01      	subs	r2, #1
 8002812:	0552      	lsls	r2, r2, #21
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800281a:	0852      	lsrs	r2, r2, #1
 800281c:	3a01      	subs	r2, #1
 800281e:	0652      	lsls	r2, r2, #25
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002826:	06d2      	lsls	r2, r2, #27
 8002828:	430a      	orrs	r2, r1
 800282a:	493a      	ldr	r1, [pc, #232]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800282c:	4313      	orrs	r3, r2
 800282e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a37      	ldr	r2, [pc, #220]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800283c:	4b35      	ldr	r3, [pc, #212]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a34      	ldr	r2, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002848:	f7fe fed0 	bl	80015ec <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fecc 	bl	80015ec <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e066      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286e:	e05e      	b.n	800292e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e05d      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d156      	bne.n	800292e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002898:	f7fe fea8 	bl	80015ec <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fea4 	bl	80015ec <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e03e      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x7b0>
 80028be:	e036      	b.n	800292e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d031      	beq.n	800292a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028e4:	f023 0303 	bic.w	r3, r3, #3
 80028e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x824>)
 80028f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe fe77 	bl	80015ec <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	e00c      	b.n	800291c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fe73 	bl	80015ec <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d905      	bls.n	800291c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e00d      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
 8002914:	40021000 	.word	0x40021000
 8002918:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x848>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ec      	bne.n	8002902 <HAL_RCC_OscConfig+0x812>
 8002928:	e001      	b.n	800292e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e10f      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b89      	ldr	r3, [pc, #548]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b86      	ldr	r3, [pc, #536]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 020f 	bic.w	r2, r3, #15
 800296a:	4984      	ldr	r1, [pc, #528]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0f7      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8089 	beq.w	8002aa4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d133      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	4b79      	ldr	r3, [pc, #484]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0e4      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029aa:	f000 fa0f 	bl	8002dcc <RCC_GetSysClockFreqFromPLLSource>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a74      	ldr	r2, [pc, #464]	; (8002b84 <HAL_RCC_ClockConfig+0x248>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d955      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029b6:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029c2:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ca:	4a6d      	ldr	r2, [pc, #436]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e044      	b.n	8002a62 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03e      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x126>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13a      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029ec:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f4:	4a62      	ldr	r2, [pc, #392]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e02f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0ac      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a22:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a0      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e098      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a42:	f000 f8a7 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_RCC_ClockConfig+0x248>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d909      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4944      	ldr	r1, [pc, #272]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7fe fdba 	bl	80015ec <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fdb6 	bl	80015ec <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e070      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4930      	ldr	r1, [pc, #192]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d210      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 020f 	bic.w	r2, r3, #15
 8002aec:	4923      	ldr	r1, [pc, #140]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e036      	b.n	8002b74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4918      	ldr	r1, [pc, #96]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4910      	ldr	r1, [pc, #64]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b44:	f000 f826 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <HAL_RCC_ClockConfig+0x24c>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x250>)
 8002b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x254>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fcef 	bl	800154c <HAL_InitTick>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	04c4b400 	.word	0x04c4b400
 8002b88:	08005aa8 	.word	0x08005aa8
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11e      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e005      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e004      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d134      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d003      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xac>
 8002c38:	e005      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3c:	617b      	str	r3, [r7, #20]
      break;
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	617b      	str	r3, [r7, #20]
      break;
 8002c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3301      	adds	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	fb02 f203 	mul.w	r2, r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	0e5b      	lsrs	r3, r3, #25
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08005ac0 	.word	0x08005ac0
 8002ca4:	00f42400 	.word	0x00f42400

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08005ab8 	.word	0x08005ab8

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf0:	f7ff ffda 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08005ab8 	.word	0x08005ab8

08002d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d30:	f7ff f91a 	bl	8001f68 <HAL_PWREx_GetVoltageRange>
 8002d34:	6178      	str	r0, [r7, #20]
 8002d36:	e014      	b.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f90a 	bl	8001f68 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d10b      	bne.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d913      	bls.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2ba0      	cmp	r3, #160	; 0xa0
 8002d74:	d902      	bls.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d76:	2302      	movs	r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e00d      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e00a      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b7f      	cmp	r3, #127	; 0x7f
 8002d86:	d902      	bls.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e004      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d101      	bne.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 020f 	bic.w	r2, r3, #15
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40022000 	.word	0x40022000

08002dcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d118      	bne.n	8002e14 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dee:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e005      	b.n	8002e0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d003      	beq.n	8002e2c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d003      	beq.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002e2a:	e005      	b.n	8002e38 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e2e:	613b      	str	r3, [r7, #16]
    break;
 8002e30:	e005      	b.n	8002e3e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e34:	613b      	str	r3, [r7, #16]
    break;
 8002e36:	e002      	b.n	8002e3e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
    break;
 8002e3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	fb02 f203 	mul.w	r2, r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0e5b      	lsrs	r3, r3, #25
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e7e:	683b      	ldr	r3, [r7, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08005ac0 	.word	0x08005ac0
 8002e94:	00f42400 	.word	0x00f42400

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d040      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d02a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d825      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d026      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d821      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d006      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d81d      	bhi.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d010      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ed8:	e018      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eda:	4b89      	ldr	r3, [pc, #548]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a88      	ldr	r2, [pc, #544]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee6:	e015      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fb62 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef8:	e00c      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3320      	adds	r3, #32
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fc4d 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0a:	e003      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1a:	4b79      	ldr	r3, [pc, #484]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f20:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f28:	4975      	ldr	r1, [pc, #468]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f30:	e001      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d047      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d030      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d82a      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f56:	d02a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5c:	d824      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f68:	d81e      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f72:	d010      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f74:	e018      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f82:	e015      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fb14 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3320      	adds	r3, #32
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fbff 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	74fb      	strb	r3, [r7, #19]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb6:	4b52      	ldr	r3, [pc, #328]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	494e      	ldr	r1, [pc, #312]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 809f 	beq.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a40      	ldr	r2, [pc, #256]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003022:	f7fe fae3 	bl	80015ec <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003028:	e009      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fadf 	bl	80015ec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	74fb      	strb	r3, [r7, #19]
        break;
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ef      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d15b      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d019      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fa9e 	bl	80015ec <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fa9a 	bl	80015ec <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
            break;
 80030ca:	e006      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ec      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	74bb      	strb	r3, [r7, #18]
 80030fe:	e005      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310c:	7c7b      	ldrb	r3, [r7, #17]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4ba0      	ldr	r3, [pc, #640]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	4a9f      	ldr	r2, [pc, #636]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800312a:	4b9a      	ldr	r3, [pc, #616]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 0203 	bic.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	4996      	ldr	r1, [pc, #600]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800314c:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 020c 	bic.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	498e      	ldr	r1, [pc, #568]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	4985      	ldr	r1, [pc, #532]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003190:	4b80      	ldr	r3, [pc, #512]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	497d      	ldr	r1, [pc, #500]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b2:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4974      	ldr	r1, [pc, #464]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	496c      	ldr	r1, [pc, #432]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003204:	4963      	ldr	r1, [pc, #396]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003226:	495b      	ldr	r1, [pc, #364]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	4952      	ldr	r1, [pc, #328]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325c:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	494a      	ldr	r1, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327e:	4b45      	ldr	r3, [pc, #276]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	4941      	ldr	r1, [pc, #260]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032a0:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d028      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	4930      	ldr	r1, [pc, #192]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e0:	d106      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e2:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ec:	60d3      	str	r3, [r2, #12]
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f959 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d04d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003328:	d108      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003336:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800333a:	e012      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003348:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336a:	d106      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e020      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	60d3      	str	r3, [r2, #12]
 8003390:	e014      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f905 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d028      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b7a      	ldr	r3, [pc, #488]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d6:	4977      	ldr	r1, [pc, #476]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a71      	ldr	r2, [pc, #452]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	e011      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fe:	d10c      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8d6 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	495f      	ldr	r1, [pc, #380]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f8b1 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003476:	f023 0204 	bic.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003480:	494c      	ldr	r1, [pc, #304]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003494:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349a:	f023 0218 	bic.w	r2, r3, #24
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	4943      	ldr	r1, [pc, #268]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d035      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe f892 	bl	80015ec <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ca:	e009      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034cc:	f7fe f88e 	bl	80015ec <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d902      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	74fb      	strb	r3, [r7, #19]
        break;
 80034de:	e005      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e0:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ef      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80034f2:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003502:	492c      	ldr	r1, [pc, #176]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3320      	adds	r3, #32
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f945 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	491c      	ldr	r1, [pc, #112]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	d10c      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3320      	adds	r3, #32
 8003558:	2101      	movs	r1, #1
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f920 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800357c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358a:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359c:	d105      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000

080035b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d103      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
       ||
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d142      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e03f      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d018      	beq.n	800362a <RCCEx_PLLSAI1_Config+0x72>
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d825      	bhi.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <RCCEx_PLLSAI1_Config+0x4e>
 8003600:	2b02      	cmp	r3, #2
 8003602:	d009      	beq.n	8003618 <RCCEx_PLLSAI1_Config+0x60>
 8003604:	e020      	b.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003616:	e01a      	b.n	800364e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003618:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e013      	b.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362a:	4b59      	ldr	r3, [pc, #356]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003646:	e006      	b.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e004      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003656:	bf00      	nop
    }

    if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800365e:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4949      	ldr	r1, [pc, #292]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8086 	bne.w	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003678:	4b45      	ldr	r3, [pc, #276]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a44      	ldr	r2, [pc, #272]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fd ffb2 	bl	80015ec <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800368a:	e009      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800368c:	f7fd ffae 	bl	80015ec <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	73fb      	strb	r3, [r7, #15]
        break;
 800369e:	e005      	b.n	80036ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ef      	bne.n	800368c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	06d2      	lsls	r2, r2, #27
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6852      	ldr	r2, [r2, #4]
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	430a      	orrs	r2, r1
 80036d8:	492d      	ldr	r1, [pc, #180]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
 80036de:	e02d      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d115      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	0211      	lsls	r1, r2, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6912      	ldr	r2, [r2, #16]
 80036f8:	0852      	lsrs	r2, r2, #1
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0552      	lsls	r2, r2, #21
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	3a01      	subs	r2, #1
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	430a      	orrs	r2, r1
 800370a:	4921      	ldr	r1, [pc, #132]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e014      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	0211      	lsls	r1, r2, #8
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	0852      	lsrs	r2, r2, #1
 8003726:	3a01      	subs	r2, #1
 8003728:	0652      	lsls	r2, r2, #25
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	3a01      	subs	r2, #1
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	430a      	orrs	r2, r1
 8003736:	4916      	ldr	r1, [pc, #88]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd ff50 	bl	80015ec <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003750:	f7fd ff4c 	bl	80015ec <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
          break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	07ff800f 	.word	0x07ff800f
 8003798:	ff9f800f 	.word	0xff9f800f
 800379c:	f9ff800f 	.word	0xf9ff800f

080037a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ae:	4b72      	ldr	r3, [pc, #456]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00e      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ba:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d103      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
       ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d142      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e03f      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d018      	beq.n	8003812 <RCCEx_PLLSAI2_Config+0x72>
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d825      	bhi.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d002      	beq.n	80037ee <RCCEx_PLLSAI2_Config+0x4e>
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d009      	beq.n	8003800 <RCCEx_PLLSAI2_Config+0x60>
 80037ec:	e020      	b.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e01a      	b.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003800:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e013      	b.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003812:	4b59      	ldr	r3, [pc, #356]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800381e:	4b56      	ldr	r3, [pc, #344]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800382e:	e006      	b.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e004      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4949      	ldr	r1, [pc, #292]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8086 	bne.w	800396c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003860:	4b45      	ldr	r3, [pc, #276]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a44      	ldr	r2, [pc, #272]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fd febe 	bl	80015ec <HAL_GetTick>
 8003870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003872:	e009      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003874:	f7fd feba 	bl	80015ec <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	73fb      	strb	r3, [r7, #15]
        break;
 8003886:	e005      	b.n	8003894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ef      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	4b35      	ldr	r3, [pc, #212]	; (800397c <RCCEx_PLLSAI2_Config+0x1dc>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	06d2      	lsls	r2, r2, #27
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	3a01      	subs	r2, #1
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	430a      	orrs	r2, r1
 80038c0:	492d      	ldr	r1, [pc, #180]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	614b      	str	r3, [r1, #20]
 80038c6:	e02d      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	0211      	lsls	r1, r2, #8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6912      	ldr	r2, [r2, #16]
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0552      	lsls	r2, r2, #21
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	614b      	str	r3, [r1, #20]
 80038f8:	e014      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6952      	ldr	r2, [r2, #20]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0652      	lsls	r2, r2, #25
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	3a01      	subs	r2, #1
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	430a      	orrs	r2, r1
 800391e:	4916      	ldr	r1, [pc, #88]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fe5c 	bl	80015ec <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003938:	f7fd fe58 	bl	80015ec <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
          break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	07ff800f 	.word	0x07ff800f
 8003980:	ff9f800f 	.word	0xff9f800f
 8003984:	f9ff800f 	.word	0xf9ff800f

08003988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e095      	b.n	8003ac6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039aa:	d009      	beq.n	80039c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
 80039b2:	e005      	b.n	80039c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fbea 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a00:	d902      	bls.n	8003a08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e002      	b.n	8003a0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0204 	and.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aa4:	ea42 0103 	orr.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_Transmit+0x22>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e158      	b.n	8003da2 <HAL_SPI_Transmit+0x2d4>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af8:	f7fd fd78 	bl	80015ec <HAL_GetTick>
 8003afc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b12:	e13d      	b.n	8003d90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0x52>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b24:	e134      	b.n	8003d90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b70:	d10f      	bne.n	8003b92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d007      	beq.n	8003bb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d94b      	bls.n	8003c52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit+0xfa>
 8003bc2:	8afb      	ldrh	r3, [r7, #22]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d13e      	bne.n	8003c46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bec:	e02b      	b.n	8003c46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d112      	bne.n	8003c22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c20:	e011      	b.n	8003c46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c22:	f7fd fce3 	bl	80015ec <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d803      	bhi.n	8003c3a <HAL_SPI_Transmit+0x16c>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d102      	bne.n	8003c40 <HAL_SPI_Transmit+0x172>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c44:	e0a4      	b.n	8003d90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ce      	bne.n	8003bee <HAL_SPI_Transmit+0x120>
 8003c50:	e07c      	b.n	8003d4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Transmit+0x192>
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d170      	bne.n	8003d42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d912      	bls.n	8003c90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b02      	subs	r3, #2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c8e:	e058      	b.n	8003d42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cb6:	e044      	b.n	8003d42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d12b      	bne.n	8003d1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d912      	bls.n	8003cf6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b02      	subs	r3, #2
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf4:	e025      	b.n	8003d42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d1c:	e011      	b.n	8003d42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1e:	f7fd fc65 	bl	80015ec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d803      	bhi.n	8003d36 <HAL_SPI_Transmit+0x268>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Transmit+0x26e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d40:	e026      	b.n	8003d90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1b5      	bne.n	8003cb8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fce3 	bl	800471c <SPI_EndRxTxTransaction>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e000      	b.n	8003d90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d112      	bne.n	8003dee <HAL_SPI_Receive+0x44>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10e      	bne.n	8003dee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4613      	mov	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f910 	bl	800400a <HAL_SPI_TransmitReceive>
 8003dea:	4603      	mov	r3, r0
 8003dec:	e109      	b.n	8004002 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_SPI_Receive+0x52>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e102      	b.n	8004002 <HAL_SPI_Receive+0x258>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e04:	f7fd fbf2 	bl	80015ec <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e1a:	e0e9      	b.n	8003ff0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Receive+0x7e>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e2c:	e0e0      	b.n	8003ff0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2204      	movs	r2, #4
 8003e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e78:	d908      	bls.n	8003e8c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e007      	b.n	8003e9c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d007      	beq.n	8003ee4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eec:	d867      	bhi.n	8003fbe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003eee:	e030      	b.n	8003f52 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d117      	bne.n	8003f2e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f103 020c 	add.w	r2, r3, #12
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f2c:	e011      	b.n	8003f52 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2e:	f7fd fb5d 	bl	80015ec <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d803      	bhi.n	8003f46 <HAL_SPI_Receive+0x19c>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_Receive+0x1a2>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f50:	e04e      	b.n	8003ff0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1c8      	bne.n	8003ef0 <HAL_SPI_Receive+0x146>
 8003f5e:	e034      	b.n	8003fca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d115      	bne.n	8003f9a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f98:	e011      	b.n	8003fbe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9a:	f7fd fb27 	bl	80015ec <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d803      	bhi.n	8003fb2 <HAL_SPI_Receive+0x208>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_Receive+0x20e>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fbc:	e018      	b.n	8003ff0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ca      	bne.n	8003f60 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb4c 	bl	800466c <SPI_EndRxTransaction>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
 8003fec:	e000      	b.n	8003ff0 <HAL_SPI_Receive+0x246>
  }

error :
 8003fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08a      	sub	sp, #40	; 0x28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004018:	2301      	movs	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26>
 800402c:	2302      	movs	r3, #2
 800402e:	e1fb      	b.n	8004428 <HAL_SPI_TransmitReceive+0x41e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004038:	f7fd fad8 	bl	80015ec <HAL_GetTick>
 800403c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004044:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004054:	7efb      	ldrb	r3, [r7, #27]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d00e      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x6e>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d106      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x66>
 800406a:	7efb      	ldrb	r3, [r7, #27]
 800406c:	2b04      	cmp	r3, #4
 800406e:	d003      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004070:	2302      	movs	r3, #2
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004076:	e1cd      	b.n	8004414 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_SPI_TransmitReceive+0x80>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_TransmitReceive+0x80>
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004090:	e1c0      	b.n	8004414 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2205      	movs	r2, #5
 80040a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	887a      	ldrh	r2, [r7, #2]
 80040b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	887a      	ldrh	r2, [r7, #2]
 80040d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e8:	d802      	bhi.n	80040f0 <HAL_SPI_TransmitReceive+0xe6>
 80040ea:	8a3b      	ldrh	r3, [r7, #16]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d908      	bls.n	8004102 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	e007      	b.n	8004112 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d007      	beq.n	8004130 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800412e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004138:	d97c      	bls.n	8004234 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x13e>
 8004142:	8a7b      	ldrh	r3, [r7, #18]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d169      	bne.n	800421c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416c:	e056      	b.n	800421c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d11b      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1aa>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_SPI_TransmitReceive+0x1aa>
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2b01      	cmp	r3, #1
 800418a:	d113      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d11c      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x1f2>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	b292      	uxth	r2, r2
 80041da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f8:	2301      	movs	r3, #1
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041fc:	f7fd f9f6 	bl	80015ec <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004208:	429a      	cmp	r2, r3
 800420a:	d807      	bhi.n	800421c <HAL_SPI_TransmitReceive+0x212>
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d003      	beq.n	800421c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800421a:	e0fb      	b.n	8004414 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1a3      	bne.n	800416e <HAL_SPI_TransmitReceive+0x164>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d19d      	bne.n	800416e <HAL_SPI_TransmitReceive+0x164>
 8004232:	e0df      	b.n	80043f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x23a>
 800423c:	8a7b      	ldrh	r3, [r7, #18]
 800423e:	2b01      	cmp	r3, #1
 8004240:	f040 80cb 	bne.w	80043da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d912      	bls.n	8004274 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	881a      	ldrh	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b02      	subs	r3, #2
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004272:	e0b2      	b.n	80043da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429a:	e09e      	b.n	80043da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d134      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x30a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02f      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x30a>
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d12c      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d912      	bls.n	80042ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b02      	subs	r3, #2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042e8:	e012      	b.n	8004310 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d148      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x3aa>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d042      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d923      	bls.n	8004382 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	b292      	uxth	r2, r2
 8004346:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b02      	subs	r3, #2
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d81f      	bhi.n	80043b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e016      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f103 020c 	add.w	r2, r3, #12
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b0:	2301      	movs	r3, #1
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043b4:	f7fd f91a 	bl	80015ec <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d803      	bhi.n	80043cc <HAL_SPI_TransmitReceive+0x3c2>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d102      	bne.n	80043d2 <HAL_SPI_TransmitReceive+0x3c8>
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043d8:	e01c      	b.n	8004414 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f af5b 	bne.w	800429c <HAL_SPI_TransmitReceive+0x292>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af54 	bne.w	800429c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f98f 	bl	800471c <SPI_EndRxTxTransaction>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	661a      	str	r2, [r3, #96]	; 0x60
 8004410:	e000      	b.n	8004414 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004440:	f7fd f8d4 	bl	80015ec <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4413      	add	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004450:	f7fd f8cc 	bl	80015ec <HAL_GetTick>
 8004454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	015b      	lsls	r3, r3, #5
 800445c:	0d1b      	lsrs	r3, r3, #20
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004466:	e054      	b.n	8004512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d050      	beq.n	8004512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004470:	f7fd f8bc 	bl	80015ec <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	429a      	cmp	r2, r3
 800447e:	d902      	bls.n	8004486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d13d      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d111      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a8:	d004      	beq.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d107      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044cc:	d10f      	bne.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e017      	b.n	8004532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3b01      	subs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d19b      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000000 	.word	0x20000000

08004540 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004552:	f7fd f84b 	bl	80015ec <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4413      	add	r3, r2
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004562:	f7fd f843 	bl	80015ec <HAL_GetTick>
 8004566:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004570:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00da      	lsls	r2, r3, #3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	0d1b      	lsrs	r3, r3, #20
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004588:	e060      	b.n	800464c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004590:	d107      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d050      	beq.n	800464c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045aa:	f7fd f81f 	bl	80015ec <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d902      	bls.n	80045c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d13d      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d8:	d111      	bne.n	80045fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d004      	beq.n	80045ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ec:	d107      	bne.n	80045fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004606:	d10f      	bne.n	8004628 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e010      	b.n	800465e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3b01      	subs	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d196      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000000 	.word	0x20000000

0800466c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004680:	d111      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d004      	beq.n	8004696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d107      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff febd 	bl	8004430 <SPI_WaitFlagStateUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e023      	b.n	8004714 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d4:	d11d      	bne.n	8004712 <SPI_EndRxTransaction+0xa6>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046de:	d004      	beq.n	80046ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d113      	bne.n	8004712 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ff22 	bl	8004540 <SPI_WaitFifoStateUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e000      	b.n	8004714 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff03 	bl	8004540 <SPI_WaitFifoStateUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e027      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fe68 	bl	8004430 <SPI_WaitFlagStateUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e014      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff fedc 	bl	8004540 <SPI_WaitFifoStateUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e000      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e049      	b.n	800484e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fd7e 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 f9ee 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04f      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a23      	ldr	r2, [pc, #140]	; (800491c <HAL_TIM_Base_Start_IT+0xc4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d018      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_TIM_Base_Start_IT+0xc8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_TIM_Base_Start_IT+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_TIM_Base_Start_IT+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_TIM_Base_Start_IT+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_TIM_Base_Start_IT+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d015      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d011      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e008      	b.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40013400 	.word	0x40013400
 8004930:	40014000 	.word	0x40014000
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f905 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8f7 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f908 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0204 	mvn.w	r2, #4
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8db 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8cd 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8de 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0208 	mvn.w	r2, #8
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8b1 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8a3 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8b4 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0210 	mvn.w	r2, #16
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2208      	movs	r2, #8
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f887 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f879 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f88a 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0201 	mvn.w	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fb34 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f914 	bl	8004d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d10e      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f907 	bl	8004d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f838 	bl	8004bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0220 	mvn.w	r2, #32
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8c7 	bl	8004cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a40      	ldr	r2, [pc, #256]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3a      	ldr	r2, [pc, #232]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01f      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d01b      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00f      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d007      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d103      	bne.n	8004cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e042      	b.n	8004dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fc fadd 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2224      	movs	r2, #36	; 0x24
 8004d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8c4 	bl	8004f08 <UART_SetConfig>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e022      	b.n	8004dd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fb80 	bl	8005498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fc07 	bl	80055dc <UART_CheckIdleState>
 8004dce:	4603      	mov	r3, r0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	f040 8084 	bne.w	8004efc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_UART_Transmit+0x28>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e07c      	b.n	8004efe <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Transmit+0x3a>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e075      	b.n	8004efe <HAL_UART_Transmit+0x126>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fbdf 	bl	80015ec <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e48:	d108      	bne.n	8004e5c <HAL_UART_Transmit+0x84>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e003      	b.n	8004e64 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e6c:	e02d      	b.n	8004eca <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fbfa 	bl	8005672 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e03a      	b.n	8004efe <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	881a      	ldrh	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	e008      	b.n	8004eb8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b292      	uxth	r2, r2
 8004eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1cb      	bne.n	8004e6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fbc6 	bl	8005672 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4bb1      	ldr	r3, [pc, #708]	; (80051f8 <UART_SetConfig+0x2f0>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4aa6      	ldr	r2, [pc, #664]	; (80051fc <UART_SetConfig+0x2f4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f023 010f 	bic.w	r1, r3, #15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a97      	ldr	r2, [pc, #604]	; (8005200 <UART_SetConfig+0x2f8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0xe2>
 8004fa8:	4b96      	ldr	r3, [pc, #600]	; (8005204 <UART_SetConfig+0x2fc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d816      	bhi.n	8004fe4 <UART_SetConfig+0xdc>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0xb4>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fd3 	.word	0x08004fd3
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2301      	movs	r3, #1
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e0e7      	b.n	80051a2 <UART_SetConfig+0x29a>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e0e4      	b.n	80051a2 <UART_SetConfig+0x29a>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e0e1      	b.n	80051a2 <UART_SetConfig+0x29a>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e0de      	b.n	80051a2 <UART_SetConfig+0x29a>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	e0db      	b.n	80051a2 <UART_SetConfig+0x29a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a86      	ldr	r2, [pc, #536]	; (8005208 <UART_SetConfig+0x300>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d132      	bne.n	800505a <UART_SetConfig+0x152>
 8004ff4:	4b83      	ldr	r3, [pc, #524]	; (8005204 <UART_SetConfig+0x2fc>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d828      	bhi.n	8005054 <UART_SetConfig+0x14c>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x100>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005049 	.word	0x08005049
 800501c:	08005055 	.word	0x08005055
 8005020:	08005055 	.word	0x08005055
 8005024:	08005055 	.word	0x08005055
 8005028:	08005043 	.word	0x08005043
 800502c:	08005055 	.word	0x08005055
 8005030:	08005055 	.word	0x08005055
 8005034:	08005055 	.word	0x08005055
 8005038:	0800504f 	.word	0x0800504f
 800503c:	2300      	movs	r3, #0
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e0af      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005042:	2302      	movs	r3, #2
 8005044:	76fb      	strb	r3, [r7, #27]
 8005046:	e0ac      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005048:	2304      	movs	r3, #4
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	e0a9      	b.n	80051a2 <UART_SetConfig+0x29a>
 800504e:	2308      	movs	r3, #8
 8005050:	76fb      	strb	r3, [r7, #27]
 8005052:	e0a6      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005054:	2310      	movs	r3, #16
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e0a3      	b.n	80051a2 <UART_SetConfig+0x29a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6b      	ldr	r2, [pc, #428]	; (800520c <UART_SetConfig+0x304>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d120      	bne.n	80050a6 <UART_SetConfig+0x19e>
 8005064:	4b67      	ldr	r3, [pc, #412]	; (8005204 <UART_SetConfig+0x2fc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800506e:	2b30      	cmp	r3, #48	; 0x30
 8005070:	d013      	beq.n	800509a <UART_SetConfig+0x192>
 8005072:	2b30      	cmp	r3, #48	; 0x30
 8005074:	d814      	bhi.n	80050a0 <UART_SetConfig+0x198>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d009      	beq.n	800508e <UART_SetConfig+0x186>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d810      	bhi.n	80050a0 <UART_SetConfig+0x198>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <UART_SetConfig+0x180>
 8005082:	2b10      	cmp	r3, #16
 8005084:	d006      	beq.n	8005094 <UART_SetConfig+0x18c>
 8005086:	e00b      	b.n	80050a0 <UART_SetConfig+0x198>
 8005088:	2300      	movs	r3, #0
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e089      	b.n	80051a2 <UART_SetConfig+0x29a>
 800508e:	2302      	movs	r3, #2
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e086      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005094:	2304      	movs	r3, #4
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e083      	b.n	80051a2 <UART_SetConfig+0x29a>
 800509a:	2308      	movs	r3, #8
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e080      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050a0:	2310      	movs	r3, #16
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e07d      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a59      	ldr	r2, [pc, #356]	; (8005210 <UART_SetConfig+0x308>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d120      	bne.n	80050f2 <UART_SetConfig+0x1ea>
 80050b0:	4b54      	ldr	r3, [pc, #336]	; (8005204 <UART_SetConfig+0x2fc>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ba:	2bc0      	cmp	r3, #192	; 0xc0
 80050bc:	d013      	beq.n	80050e6 <UART_SetConfig+0x1de>
 80050be:	2bc0      	cmp	r3, #192	; 0xc0
 80050c0:	d814      	bhi.n	80050ec <UART_SetConfig+0x1e4>
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d009      	beq.n	80050da <UART_SetConfig+0x1d2>
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d810      	bhi.n	80050ec <UART_SetConfig+0x1e4>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <UART_SetConfig+0x1cc>
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x1d8>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x1e4>
 80050d4:	2300      	movs	r3, #0
 80050d6:	76fb      	strb	r3, [r7, #27]
 80050d8:	e063      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050da:	2302      	movs	r3, #2
 80050dc:	76fb      	strb	r3, [r7, #27]
 80050de:	e060      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050e0:	2304      	movs	r3, #4
 80050e2:	76fb      	strb	r3, [r7, #27]
 80050e4:	e05d      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050e6:	2308      	movs	r3, #8
 80050e8:	76fb      	strb	r3, [r7, #27]
 80050ea:	e05a      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050ec:	2310      	movs	r3, #16
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e057      	b.n	80051a2 <UART_SetConfig+0x29a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a47      	ldr	r2, [pc, #284]	; (8005214 <UART_SetConfig+0x30c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0x240>
 80050fc:	4b41      	ldr	r3, [pc, #260]	; (8005204 <UART_SetConfig+0x2fc>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x234>
 800510c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x23a>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x228>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x23a>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x222>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x22e>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x23a>
 800512a:	2300      	movs	r3, #0
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e038      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005130:	2302      	movs	r3, #2
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e035      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005136:	2304      	movs	r3, #4
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e032      	b.n	80051a2 <UART_SetConfig+0x29a>
 800513c:	2308      	movs	r3, #8
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e02f      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005142:	2310      	movs	r3, #16
 8005144:	76fb      	strb	r3, [r7, #27]
 8005146:	e02c      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <UART_SetConfig+0x2f4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d125      	bne.n	800519e <UART_SetConfig+0x296>
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <UART_SetConfig+0x2fc>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005160:	d017      	beq.n	8005192 <UART_SetConfig+0x28a>
 8005162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005166:	d817      	bhi.n	8005198 <UART_SetConfig+0x290>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d00b      	beq.n	8005186 <UART_SetConfig+0x27e>
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d811      	bhi.n	8005198 <UART_SetConfig+0x290>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0x278>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x284>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x290>
 8005180:	2300      	movs	r3, #0
 8005182:	76fb      	strb	r3, [r7, #27]
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005186:	2302      	movs	r3, #2
 8005188:	76fb      	strb	r3, [r7, #27]
 800518a:	e00a      	b.n	80051a2 <UART_SetConfig+0x29a>
 800518c:	2304      	movs	r3, #4
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e007      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005192:	2308      	movs	r3, #8
 8005194:	76fb      	strb	r3, [r7, #27]
 8005196:	e004      	b.n	80051a2 <UART_SetConfig+0x29a>
 8005198:	2310      	movs	r3, #16
 800519a:	76fb      	strb	r3, [r7, #27]
 800519c:	e001      	b.n	80051a2 <UART_SetConfig+0x29a>
 800519e:	2310      	movs	r3, #16
 80051a0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <UART_SetConfig+0x2f4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	f040 809f 	bne.w	80052ec <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ae:	7efb      	ldrb	r3, [r7, #27]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d837      	bhi.n	8005224 <UART_SetConfig+0x31c>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x2b4>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	08005225 	.word	0x08005225
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005225 	.word	0x08005225
 80051cc:	080051ef 	.word	0x080051ef
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005225 	.word	0x08005225
 80051dc:	0800521d 	.word	0x0800521d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fd fd6e 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80051e4:	6178      	str	r0, [r7, #20]
        break;
 80051e6:	e022      	b.n	800522e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <UART_SetConfig+0x310>)
 80051ea:	617b      	str	r3, [r7, #20]
        break;
 80051ec:	e01f      	b.n	800522e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fd fcd1 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 80051f2:	6178      	str	r0, [r7, #20]
        break;
 80051f4:	e01b      	b.n	800522e <UART_SetConfig+0x326>
 80051f6:	bf00      	nop
 80051f8:	cfff69f3 	.word	0xcfff69f3
 80051fc:	40008000 	.word	0x40008000
 8005200:	40013800 	.word	0x40013800
 8005204:	40021000 	.word	0x40021000
 8005208:	40004400 	.word	0x40004400
 800520c:	40004800 	.word	0x40004800
 8005210:	40004c00 	.word	0x40004c00
 8005214:	40005000 	.word	0x40005000
 8005218:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005220:	617b      	str	r3, [r7, #20]
        break;
 8005222:	e004      	b.n	800522e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
        break;
 800522c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8119 	beq.w	8005468 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	4a95      	ldr	r2, [pc, #596]	; (8005490 <UART_SetConfig+0x588>)
 800523c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005240:	461a      	mov	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	fbb3 f3f2 	udiv	r3, r3, r2
 8005248:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	d305      	bcc.n	8005266 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d902      	bls.n	800526c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	76bb      	strb	r3, [r7, #26]
 800526a:	e0fd      	b.n	8005468 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4618      	mov	r0, r3
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	4a85      	ldr	r2, [pc, #532]	; (8005490 <UART_SetConfig+0x588>)
 800527a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f7fa ffba 	bl	80001fc <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	020b      	lsls	r3, r1, #8
 800529a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800529e:	0202      	lsls	r2, r0, #8
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	6849      	ldr	r1, [r1, #4]
 80052a4:	0849      	lsrs	r1, r1, #1
 80052a6:	4608      	mov	r0, r1
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	1814      	adds	r4, r2, r0
 80052ae:	eb43 0501 	adc.w	r5, r3, r1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	4620      	mov	r0, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	f7fa ff9c 	bl	80001fc <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d2:	d308      	bcc.n	80052e6 <UART_SetConfig+0x3de>
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052da:	d204      	bcs.n	80052e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e0c0      	b.n	8005468 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	76bb      	strb	r3, [r7, #26]
 80052ea:	e0bd      	b.n	8005468 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f4:	d164      	bne.n	80053c0 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80052f6:	7efb      	ldrb	r3, [r7, #27]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d828      	bhi.n	800534e <UART_SetConfig+0x446>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x3fc>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005339 	.word	0x08005339
 8005310:	0800534f 	.word	0x0800534f
 8005314:	0800533f 	.word	0x0800533f
 8005318:	0800534f 	.word	0x0800534f
 800531c:	0800534f 	.word	0x0800534f
 8005320:	0800534f 	.word	0x0800534f
 8005324:	08005347 	.word	0x08005347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fd fcca 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800532c:	6178      	str	r0, [r7, #20]
        break;
 800532e:	e013      	b.n	8005358 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7fd fcdc 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8005334:	6178      	str	r0, [r7, #20]
        break;
 8005336:	e00f      	b.n	8005358 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b56      	ldr	r3, [pc, #344]	; (8005494 <UART_SetConfig+0x58c>)
 800533a:	617b      	str	r3, [r7, #20]
        break;
 800533c:	e00c      	b.n	8005358 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fd fc29 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8005342:	6178      	str	r0, [r7, #20]
        break;
 8005344:	e008      	b.n	8005358 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534a:	617b      	str	r3, [r7, #20]
        break;
 800534c:	e004      	b.n	8005358 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	76bb      	strb	r3, [r7, #26]
        break;
 8005356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8084 	beq.w	8005468 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	4a4a      	ldr	r2, [pc, #296]	; (8005490 <UART_SetConfig+0x588>)
 8005366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800536a:	461a      	mov	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005372:	005a      	lsls	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	441a      	add	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d916      	bls.n	80053ba <UART_SetConfig+0x4b2>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d212      	bcs.n	80053ba <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f023 030f 	bic.w	r3, r3, #15
 800539c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	89fb      	ldrh	r3, [r7, #14]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	89fa      	ldrh	r2, [r7, #14]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	e056      	b.n	8005468 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	76bb      	strb	r3, [r7, #26]
 80053be:	e053      	b.n	8005468 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c0:	7efb      	ldrb	r3, [r7, #27]
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d827      	bhi.n	8005416 <UART_SetConfig+0x50e>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x4c4>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005417 	.word	0x08005417
 80053dc:	08005407 	.word	0x08005407
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005417 	.word	0x08005417
 80053ec:	0800540f 	.word	0x0800540f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fd fc66 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80053f4:	6178      	str	r0, [r7, #20]
        break;
 80053f6:	e013      	b.n	8005420 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f8:	f7fd fc78 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 80053fc:	6178      	str	r0, [r7, #20]
        break;
 80053fe:	e00f      	b.n	8005420 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <UART_SetConfig+0x58c>)
 8005402:	617b      	str	r3, [r7, #20]
        break;
 8005404:	e00c      	b.n	8005420 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fd fbc5 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 800540a:	6178      	str	r0, [r7, #20]
        break;
 800540c:	e008      	b.n	8005420 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	617b      	str	r3, [r7, #20]
        break;
 8005414:	e004      	b.n	8005420 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	76bb      	strb	r3, [r7, #26]
        break;
 800541e:	bf00      	nop
    }

    if (pclk != 0U)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d020      	beq.n	8005468 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	4a19      	ldr	r2, [pc, #100]	; (8005490 <UART_SetConfig+0x588>)
 800542c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005430:	461a      	mov	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	fbb3 f2f2 	udiv	r2, r3, r2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	441a      	add	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d909      	bls.n	8005464 <UART_SetConfig+0x55c>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	d205      	bcs.n	8005464 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
 8005462:	e001      	b.n	8005468 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005484:	7ebb      	ldrb	r3, [r7, #26]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bdb0      	pop	{r4, r5, r7, pc}
 800548e:	bf00      	nop
 8005490:	08005af0 	.word	0x08005af0
 8005494:	00f42400 	.word	0x00f42400

08005498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01a      	beq.n	80055ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005596:	d10a      	bne.n	80055ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fb fffe 	bl	80015ec <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d10e      	bne.n	800561e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f82f 	bl	8005672 <UART_WaitOnFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e025      	b.n	800566a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d10e      	bne.n	800564a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f819 	bl	8005672 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e00f      	b.n	800566a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b09c      	sub	sp, #112	; 0x70
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005682:	e0a9      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	f000 80a5 	beq.w	80057d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fb ffad 	bl	80015ec <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800569e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d140      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b8:	667b      	str	r3, [r7, #100]	; 0x64
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e6      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	663b      	str	r3, [r7, #96]	; 0x60
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e069      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d051      	beq.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005742:	d149      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800574c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	613b      	str	r3, [r7, #16]
   return(result);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	66bb      	str	r3, [r7, #104]	; 0x68
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057a0:	623a      	str	r2, [r7, #32]
 80057a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e010      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4013      	ands	r3, r2
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	bf0c      	ite	eq
 80057e8:	2301      	moveq	r3, #1
 80057ea:	2300      	movne	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	f43f af46 	beq.w	8005684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3770      	adds	r7, #112	; 0x70
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_UARTEx_DisableFifoMode+0x16>
 8005814:	2302      	movs	r3, #2
 8005816:	e027      	b.n	8005868 <HAL_UARTEx_DisableFifoMode+0x66>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2224      	movs	r2, #36	; 0x24
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005846:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005888:	2302      	movs	r3, #2
 800588a:	e02d      	b.n	80058e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f84f 	bl	800596c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005904:	2302      	movs	r3, #2
 8005906:	e02d      	b.n	8005964 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2224      	movs	r2, #36	; 0x24
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f811 	bl	800596c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005978:	2b00      	cmp	r3, #0
 800597a:	d108      	bne.n	800598e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800598c:	e031      	b.n	80059f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800598e:	2308      	movs	r3, #8
 8005990:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005992:	2308      	movs	r3, #8
 8005994:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	0e5b      	lsrs	r3, r3, #25
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	0f5b      	lsrs	r3, r3, #29
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	7b3a      	ldrb	r2, [r7, #12]
 80059ba:	4911      	ldr	r1, [pc, #68]	; (8005a00 <UARTEx_SetNbDataToProcess+0x94>)
 80059bc:	5c8a      	ldrb	r2, [r1, r2]
 80059be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059c2:	7b3a      	ldrb	r2, [r7, #12]
 80059c4:	490f      	ldr	r1, [pc, #60]	; (8005a04 <UARTEx_SetNbDataToProcess+0x98>)
 80059c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	7b7a      	ldrb	r2, [r7, #13]
 80059d8:	4909      	ldr	r1, [pc, #36]	; (8005a00 <UARTEx_SetNbDataToProcess+0x94>)
 80059da:	5c8a      	ldrb	r2, [r1, r2]
 80059dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059e0:	7b7a      	ldrb	r2, [r7, #13]
 80059e2:	4908      	ldr	r1, [pc, #32]	; (8005a04 <UARTEx_SetNbDataToProcess+0x98>)
 80059e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	08005b08 	.word	0x08005b08
 8005a04:	08005b10 	.word	0x08005b10

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	; (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	; (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	; (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	; (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 f82e 	bl	8005a7c <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	08005b20 	.word	0x08005b20
 8005a44:	08005b20 	.word	0x08005b20
 8005a48:	08005b20 	.word	0x08005b20
 8005a4c:	08005b24 	.word	0x08005b24

08005a50 <memcpy>:
 8005a50:	440a      	add	r2, r1
 8005a52:	4291      	cmp	r1, r2
 8005a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a58:	d100      	bne.n	8005a5c <memcpy+0xc>
 8005a5a:	4770      	bx	lr
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a66:	4291      	cmp	r1, r2
 8005a68:	d1f9      	bne.n	8005a5e <memcpy+0xe>
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <_init>:
 8005a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7e:	bf00      	nop
 8005a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a82:	bc08      	pop	{r3}
 8005a84:	469e      	mov	lr, r3
 8005a86:	4770      	bx	lr

08005a88 <_fini>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr
