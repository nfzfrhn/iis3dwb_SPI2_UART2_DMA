
Steval_SPI2_UART2_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08005bc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005bc0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e21  00000000  00000000  00041511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  00044338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00045910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030eb3  00000000  00000000  00046de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a2  00000000  00000000  00077c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f394  00000000  00000000  0008fe35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  001bf21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005b1c 	.word	0x08005b1c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005b1c 	.word	0x08005b1c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <IIS3DWB_READ_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_READ_REG(void *handle, uint8_t address, uint8_t *rx_data, uint16_t length){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	461a      	mov	r2, r3
 8000500:	460b      	mov	r3, r1
 8000502:	72fb      	strb	r3, [r7, #11]
 8000504:	4613      	mov	r3, r2
 8000506:	813b      	strh	r3, [r7, #8]
	address = address | 0x80;	//Set Read Bit in Address
 8000508:	7afb      	ldrb	r3, [r7, #11]
 800050a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800050e:	b2db      	uxtb	r3, r3
 8000510:	72fb      	strb	r3, [r7, #11]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8000512:	f000 f863 	bl	80005dc <IIS3DWB_CS_LOW>
	//Read Register
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, HAL_MAX_DELAY)){
 8000516:	f107 010b 	add.w	r1, r7, #11
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2201      	movs	r2, #1
 8000520:	68f8      	ldr	r0, [r7, #12]
 8000522:	f003 fb24 	bl	8003b6e <HAL_SPI_Transmit>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <IIS3DWB_READ_REG+0x3e>
		return IIS3DWB_ERROR;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	e012      	b.n	8000558 <IIS3DWB_READ_REG+0x64>
	}
	if(HAL_OK != HAL_SPI_Receive(handle, rx_data, length, HAL_MAX_DELAY)){
 8000532:	893a      	ldrh	r2, [r7, #8]
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f003 fc85 	bl	8003e4a <HAL_SPI_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <IIS3DWB_READ_REG+0x58>
		return IIS3DWB_ERROR;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e005      	b.n	8000558 <IIS3DWB_READ_REG+0x64>
	}
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f8a9 	bl	80016a4 <HAL_Delay>
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 8000552:	f000 f833 	bl	80005bc <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <IIS3DWB_WRITE_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_WRITE_REG(void *handle, uint8_t address, uint8_t *tx_data, uint16_t length){
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	461a      	mov	r2, r3
 800056c:	460b      	mov	r3, r1
 800056e:	72fb      	strb	r3, [r7, #11]
 8000570:	4613      	mov	r3, r2
 8000572:	813b      	strh	r3, [r7, #8]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8000574:	f000 f832 	bl	80005dc <IIS3DWB_CS_LOW>
	//Transmitting the register address
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, IIS3DWB_SPI_TIMEOUT)){
 8000578:	f107 010b 	add.w	r1, r7, #11
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	2201      	movs	r2, #1
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f003 faf3 	bl	8003b6e <HAL_SPI_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <IIS3DWB_WRITE_REG+0x34>
		return IIS3DWB_ERROR;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e00f      	b.n	80005b4 <IIS3DWB_WRITE_REG+0x54>
	}
	//Transmitting the data
	if(HAL_OK != HAL_SPI_Transmit(handle, tx_data, length, IIS3DWB_SPI_TIMEOUT)){
 8000594:	893a      	ldrh	r2, [r7, #8]
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f003 fae6 	bl	8003b6e <HAL_SPI_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <IIS3DWB_WRITE_REG+0x4e>
		return IIS3DWB_ERROR;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	e002      	b.n	80005b4 <IIS3DWB_WRITE_REG+0x54>
	}
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 80005ae:	f000 f805 	bl	80005bc <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <IIS3DWB_CS_HIGH>:

//Function:	Sets the GPIO-PIN responsible for the CS-signal to HIGH (LOW-ACTIVE!)
void IIS3DWB_CS_HIGH(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_SET);
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <IIS3DWB_CS_HIGH+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <IIS3DWB_CS_HIGH+0x1c>)
 80005c6:	8811      	ldrh	r1, [r2, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fcec 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a0 	.word	0x200000a0
 80005d8:	2000002e 	.word	0x2000002e

080005dc <IIS3DWB_CS_LOW>:
//void IIS3DWB_3_4_SEL_HIGH(){
//	HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
//}

//Function:	Sets the GPIO-PIN responsible for the CS-signal to LOW (LOW-ACTIVE!)
void IIS3DWB_CS_LOW(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_RESET);
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <IIS3DWB_CS_LOW+0x18>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <IIS3DWB_CS_LOW+0x1c>)
 80005e6:	8811      	ldrh	r1, [r2, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fcdc 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000a0 	.word	0x200000a0
 80005f8:	2000002e 	.word	0x2000002e

080005fc <IIS3DWB_SET_CONFIG>:
//dev_ctx.write_reg = IIS3DWB_WRITE_REG;
//dev_ctx.handle = &spi_iis3dwb;

/* Functions ------------------------------------------------------------------------ */
//Function:	Set-Function for the configuration of the IIS3DWB-sensor
void static IIS3DWB_SET_CONFIG(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
//	//init driver interface
//	//neccessary for iis3dwb driver (iis3dwb_reg)
//	stmdev_ctx_t dev_ctx;
//	uint8_t reg0;
//
	dev_ctx.read_reg = IIS3DWB_READ_REG;
 8000602:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <IIS3DWB_SET_CONFIG+0x104>)
 8000606:	605a      	str	r2, [r3, #4]
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 8000608:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 800060a:	4a3e      	ldr	r2, [pc, #248]	; (8000704 <IIS3DWB_SET_CONFIG+0x108>)
 800060c:	601a      	str	r2, [r3, #0]
	dev_ctx.handle = &spi_iis3dwb;
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000610:	4a3d      	ldr	r2, [pc, #244]	; (8000708 <IIS3DWB_SET_CONFIG+0x10c>)
 8000612:	609a      	str	r2, [r3, #8]
		HAL_UART_Transmit(&huart1, &iis3dwb_deviceID, sizeof(iis3dwb_deviceID), HAL_MAX_DELAY);
		HAL_Delay(1000);
	}*/

	//Get device ID
	iis3dwb_device_id_get(&dev_ctx, &iis3dwb_deviceID);
 8000614:	493d      	ldr	r1, [pc, #244]	; (800070c <IIS3DWB_SET_CONFIG+0x110>)
 8000616:	4839      	ldr	r0, [pc, #228]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000618:	f000 fa03 	bl	8000a22 <iis3dwb_device_id_get>
	//reset software in ctrl3_c
	//iis3dwb_reset_set(&dev_ctx, PROPERTY_ENABLE);
	iis3dwb_reset_set(&dev_ctx, 1);
 800061c:	2101      	movs	r1, #1
 800061e:	4837      	ldr	r0, [pc, #220]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000620:	f000 fa10 	bl	8000a44 <iis3dwb_reset_set>
	//continue after reset is finished
	do{
		iis3dwb_reset_get(&dev_ctx, &rst);
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	4619      	mov	r1, r3
 8000628:	4834      	ldr	r0, [pc, #208]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 800062a:	f000 fa31 	bl	8000a90 <iis3dwb_reset_get>
	}while(rst);
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f7      	bne.n	8000624 <IIS3DWB_SET_CONFIG+0x28>
//    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
//    pin_int1_route.int1_ctrl.int1_drdy_xl = 1;
//    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);

    //Select all 3-axis
    iis3dwb_xl_axis_selection_set(&dev_ctx, IIS3DWB_ENABLE_ALL);
 8000634:	2100      	movs	r1, #0
 8000636:	4831      	ldr	r0, [pc, #196]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000638:	f000 f988 	bl	800094c <iis3dwb_xl_axis_selection_set>

    // 3. Enables accelerometer:IIS3DWB_CTRL1_XL bit 7:5 XL_EN[2:0]
    /*(000: Power-down (default);
    101: accelerometer enabled;)
    All other configurations are not allowed*/
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 800063c:	2301      	movs	r3, #1
 800063e:	4a34      	ldr	r2, [pc, #208]	; (8000710 <IIS3DWB_SET_CONFIG+0x114>)
 8000640:	2110      	movs	r1, #16
 8000642:	482e      	ldr	r0, [pc, #184]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000644:	f000 f8e0 	bl	8000808 <iis3dwb_read_reg>
    reg0 |= 0xA0;	//1010 0000
 8000648:	4b31      	ldr	r3, [pc, #196]	; (8000710 <IIS3DWB_SET_CONFIG+0x114>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <IIS3DWB_SET_CONFIG+0x114>)
 8000656:	701a      	strb	r2, [r3, #0]
    iis3dwb_write_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8000658:	2301      	movs	r3, #1
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <IIS3DWB_SET_CONFIG+0x114>)
 800065c:	2110      	movs	r1, #16
 800065e:	4827      	ldr	r0, [pc, #156]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000660:	f000 f8ea 	bl	8000838 <iis3dwb_write_reg>

    // 4. IIS3DWB_CTRL4_C bit 2
    /* Disable I2C*/
    iis3dwb_i2c_interface_set(&dev_ctx, IIS3DWB_I2C_DISABLE);
 8000664:	2101      	movs	r1, #1
 8000666:	4825      	ldr	r0, [pc, #148]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000668:	f000 facf 	bl	8000c0a <iis3dwb_i2c_interface_set>

    //5. Set fifo in continuous / stream mode 110
    //110: Continuous mode: if the FIFO is full, the new sample overwrites the older one;
    iis3dwb_fifo_mode_set(&dev_ctx, IIS3DWB_STREAM_MODE);
 800066c:	2106      	movs	r1, #6
 800066e:	4823      	ldr	r0, [pc, #140]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000670:	f000 fb69 	bl	8000d46 <iis3dwb_fifo_mode_set>

    //6. Set watermark 128
    //IIS3DWB_FIFO_CTRL1 7:0 IIS3DWB_FIFO_CTRL2 bit 0
    uint8_t IIS3DWB_WTM_LEVEL = 128;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	71fb      	strb	r3, [r7, #7]
    iis3dwb_fifo_watermark_set(&dev_ctx, IIS3DWB_WTM_LEVEL);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	b29b      	uxth	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	481f      	ldr	r0, [pc, #124]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000680:	f000 fb05 	bl	8000c8e <iis3dwb_fifo_watermark_set>

    //7. Data Ready pulse mode
    //COUNTER_BDR_REG1 (0Bh) bit 7 dataready_pulsed
    //0: Data-ready latched mode
    //1: Data-ready pulsed mode (the data ready pulses are 18.75 �s long)
    iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_PULSED);			//Original config
 8000684:	2101      	movs	r1, #1
 8000686:	481d      	ldr	r0, [pc, #116]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000688:	f000 f9a5 	bl	80009d6 <iis3dwb_data_ready_mode_set>
    //iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_LATCHED );			//Changed to be observed

    //8. Set full scale
    /* CTRL1_XL (10h) bit 3:2  00 (default) �2 g  01 �16 g 10 �4 g 11 �8 g*/
    // set scale to +- 2g
    iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_2g);
 800068c:	2100      	movs	r1, #0
 800068e:	481b      	ldr	r0, [pc, #108]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000690:	f000 f8ea 	bl	8000868 <iis3dwb_xl_full_scale_set>
    	IIS3DWB_LP_ODR_DIV_100            = 0x84,
    	IIS3DWB_LP_ODR_DIV_200            = 0x85,
    	IIS3DWB_LP_ODR_DIV_400            = 0x86,
    	IIS3DWB_LP_ODR_DIV_800            = 0x87,
    **/
    iis3dwb_xl_hp_path_on_out_set(&dev_ctx,IIS3DWB_LP_ODR_DIV_20);
 8000694:	2182      	movs	r1, #130	; 0x82
 8000696:	4819      	ldr	r0, [pc, #100]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 8000698:	f000 fa5f 	bl	8000b5a <iis3dwb_xl_hp_path_on_out_set>
    //11. Enable writing to FIFO
    /* FIFO_CTRL3 (09h) bit 3:0 Selects Batch Data Rate (write frequency in FIFO) for accelerometer data.
     * (0000: Accelerometer not batched in FIFO (default);
     * 1010: 26667 Hz;
     * */
    iis3dwb_fifo_xl_batch_set(&dev_ctx, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 800069c:	210a      	movs	r1, #10
 800069e:	4817      	ldr	r0, [pc, #92]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006a0:	f000 fb2b 	bl	8000cfa <iis3dwb_fifo_xl_batch_set>


	//Register CTRL3_C bit BDU: Disable block data update
	iis3dwb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006a8:	f000 f92a 	bl	8000900 <iis3dwb_block_data_update_set>

	//set output data rate - enable acc
	iis3dwb_xl_data_rate_set(&dev_ctx, IIS3DWB_XL_ODR_26k7Hz);
 80006ac:	2105      	movs	r1, #5
 80006ae:	4813      	ldr	r0, [pc, #76]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006b0:	f000 f900 	bl	80008b4 <iis3dwb_xl_data_rate_set>

	//enable auto increment
	iis3dwb_auto_increment_set(&dev_ctx, PROPERTY_ENABLE);
 80006b4:	2101      	movs	r1, #1
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006b8:	f000 fa03 	bl	8000ac2 <iis3dwb_auto_increment_set>
	//enable fifo bypass mode
	iis3dwb_fifo_mode_set(&dev_ctx,IIS3DWB_BYPASS_MODE);
 80006bc:	2100      	movs	r1, #0
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006c0:	f000 fb41 	bl	8000d46 <iis3dwb_fifo_mode_set>
	//use LP filter
	iis3dwb_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80006c4:	2101      	movs	r1, #1
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006c8:	f000 fa21 	bl	8000b0e <iis3dwb_xl_filter_lp2_set>
     * INT1_FIFO_TH Enables FIFO threshold interrupt on INT1 pin.
     *
     * MD1_CFG (5Eh) Functions routing on INT1 register (r/w) disabled
     *  */
    iis3dwb_pin_int1_route_t pin_int1_route;
    *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    pin_int1_route.int1_ctrl.int1_drdy_xl = 1;
 80006da:	793b      	ldrb	r3, [r7, #4]
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	713b      	strb	r3, [r7, #4]
    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <IIS3DWB_SET_CONFIG+0x100>)
 80006e8:	f000 fab5 	bl	8000c56 <iis3dwb_pin_int1_route_set>

    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ec:	2017      	movs	r0, #23
 80006ee:	f001 f8f4 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000b0 	.word	0x200000b0
 8000700:	080004f5 	.word	0x080004f5
 8000704:	08000561 	.word	0x08000561
 8000708:	20000034 	.word	0x20000034
 800070c:	2000002c 	.word	0x2000002c
 8000710:	200000bd 	.word	0x200000bd

08000714 <IIS3DWB_Int_Measure>:
//		ftoa(acceleration_mg[2], msg_2, 2);
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, sizeof(msg_2), HAL_MAX_DELAY);
	}
}

void IIS3DWB_Int_Measure(){
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
	stmdev_ctx_t dev_ctx;
	dev_ctx.read_reg = IIS3DWB_READ_REG;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <IIS3DWB_Int_Measure+0x8c>)
 800071c:	60fb      	str	r3, [r7, #12]
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <IIS3DWB_Int_Measure+0x90>)
 8000720:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &spi_iis3dwb;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <IIS3DWB_Int_Measure+0x94>)
 8000724:	613b      	str	r3, [r7, #16]

    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 8000726:	f107 0008 	add.w	r0, r7, #8
 800072a:	2301      	movs	r3, #1
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <IIS3DWB_Int_Measure+0x98>)
 800072e:	213a      	movs	r1, #58	; 0x3a
 8000730:	f000 f86a 	bl	8000808 <iis3dwb_read_reg>
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_STATUS2, &reg1, 1);
 8000734:	f107 0008 	add.w	r0, r7, #8
 8000738:	2301      	movs	r3, #1
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <IIS3DWB_Int_Measure+0x9c>)
 800073c:	213b      	movs	r1, #59	; 0x3b
 800073e:	f000 f863 	bl	8000808 <iis3dwb_read_reg>
    fifo_level = ((reg1 & 0x03) << 8) + reg0;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <IIS3DWB_Int_Measure+0x9c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <IIS3DWB_Int_Measure+0x98>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	b29b      	uxth	r3, r3
 800075a:	4413      	add	r3, r2
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <IIS3DWB_Int_Measure+0xa0>)
 8000760:	801a      	strh	r2, [r3, #0]

    uint16_t i = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	82fb      	strh	r3, [r7, #22]
    uint8_t mem_X[2] = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	80bb      	strh	r3, [r7, #4]
//    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_DATA_OUT_X_L, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_FIFO_DATA_OUT_X_L, (uint8_t *)mem_X, 2);
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	f107 0008 	add.w	r0, r7, #8
 8000770:	2302      	movs	r3, #2
 8000772:	2179      	movs	r1, #121	; 0x79
 8000774:	f000 f848 	bl	8000808 <iis3dwb_read_reg>
//      tmpX[i] = *p16src++;
//      tmpY[i] = *p16src++;
//      tmpZ[i] = *p16src++;
//    }

    HAL_UART_Transmit(&huart2, (uint8_t*)mem_X[0], sizeof(mem_X[0]), HAL_MAX_DELAY);
 8000778:	793b      	ldrb	r3, [r7, #4]
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2201      	movs	r2, #1
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <IIS3DWB_Int_Measure+0xa4>)
 8000784:	f004 fb78 	bl	8004e78 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)mem_X[1], sizeof(mem_X[1]), HAL_MAX_DELAY);
 8000788:	797b      	ldrb	r3, [r7, #5]
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2201      	movs	r2, #1
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <IIS3DWB_Int_Measure+0xa4>)
 8000794:	f004 fb70 	bl	8004e78 <HAL_UART_Transmit>
//    HAL_UART_Transmit(&huart2, (uint8_t*)tmpY[0], sizeof(tmpY[0]), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t*)tmpZ[0], sizeof(tmpZ[0]), HAL_MAX_DELAY);
//    tmp_2 = (int16_t*) iis3dwb[];
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	080004f5 	.word	0x080004f5
 80007a4:	08000561 	.word	0x08000561
 80007a8:	20000034 	.word	0x20000034
 80007ac:	200000bd 	.word	0x200000bd
 80007b0:	200000bc 	.word	0x200000bc
 80007b4:	20000028 	.word	0x20000028
 80007b8:	200001d0 	.word	0x200001d0

080007bc <IIS3DWB_INIT>:

//Function:	Init-Function for the IIS3DWB-sensor
//para_1:	HAL SPI handler name from STM32 (Pointer)
//para_2:	HAL GPIO-bank-handler name from STM32 for CS-signal (Pointer)
//para_3:	HAL GPIO-PIN name from STM32 for CS-signal
void IIS3DWB_INIT(SPI_HandleTypeDef spi, GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN){
 80007bc:	b084      	sub	sp, #16
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	f107 0c08 	add.w	ip, r7, #8
 80007c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_iis3dwb = spi;	//Setting the SPI handler for the IIS3DWB-sensor
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <IIS3DWB_INIT+0x40>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2264      	movs	r2, #100	; 0x64
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 f98b 	bl	8005af0 <memcpy>
	cs_gpiox_iis3dwb = GPIOx;	//Setting the GPIO-handler for the IIS3DWB-sensor for the relevant PIN-bank
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <IIS3DWB_INIT+0x44>)
 80007dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007de:	6013      	str	r3, [r2, #0]
	cs_gpio_iis3dwb = GPIO_PIN;	//Setting the GPIO-PIN for the low-active chip select for the IIS3DWB-sensor
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <IIS3DWB_INIT+0x48>)
 80007e2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80007e6:	8013      	strh	r3, [r2, #0]

	IIS3DWB_CS_HIGH();			//Setting the cs-signal high (LOW-ACTIVE!) for the default state; only set to low for transmitting or receiving
 80007e8:	f7ff fee8 	bl	80005bc <IIS3DWB_CS_HIGH>
//	IIS3DWB_3_4_SEL_HIGH();
	IIS3DWB_SET_CONFIG();
 80007ec:	f7ff ff06 	bl	80005fc <IIS3DWB_SET_CONFIG>
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f8:	b004      	add	sp, #16
 80007fa:	4770      	bx	lr
 80007fc:	20000034 	.word	0x20000034
 8000800:	200000a0 	.word	0x200000a0
 8000804:	2000002e 	.word	0x2000002e

08000808 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	461a      	mov	r2, r3
 8000814:	460b      	mov	r3, r1
 8000816:	72fb      	strb	r3, [r7, #11]
 8000818:	4613      	mov	r3, r2
 800081a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685c      	ldr	r4, [r3, #4]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6898      	ldr	r0, [r3, #8]
 8000824:	893b      	ldrh	r3, [r7, #8]
 8000826:	7af9      	ldrb	r1, [r7, #11]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	47a0      	blx	r4
 800082c:	6178      	str	r0, [r7, #20]
  return ret;
 800082e:	697b      	ldr	r3, [r7, #20]
}
 8000830:	4618      	mov	r0, r3
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	72fb      	strb	r3, [r7, #11]
 8000848:	4613      	mov	r3, r2
 800084a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681c      	ldr	r4, [r3, #0]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6898      	ldr	r0, [r3, #8]
 8000854:	893b      	ldrh	r3, [r7, #8]
 8000856:	7af9      	ldrb	r1, [r7, #11]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	47a0      	blx	r4
 800085c:	6178      	str	r0, [r7, #20]
  return ret;
 800085e:	697b      	ldr	r3, [r7, #20]
}
 8000860:	4618      	mov	r0, r3
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000874:	f107 0208 	add.w	r2, r7, #8
 8000878:	2301      	movs	r3, #1
 800087a:	2110      	movs	r1, #16
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffc3 	bl	8000808 <iis3dwb_read_reg>
 8000882:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10f      	bne.n	80008aa <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	7a3b      	ldrb	r3, [r7, #8]
 8000894:	f362 0383 	bfi	r3, r2, #2, #2
 8000898:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 800089a:	f107 0208 	add.w	r2, r7, #8
 800089e:	2301      	movs	r3, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffc8 	bl	8000838 <iis3dwb_write_reg>
 80008a8:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   iis3dwb_odr_xl_t val)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80008c0:	f107 0208 	add.w	r2, r7, #8
 80008c4:	2301      	movs	r3, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff9d 	bl	8000808 <iis3dwb_read_reg>
 80008ce:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10f      	bne.n	80008f6 <iis3dwb_xl_data_rate_set+0x42>
    ctrl1_xl.xl_en= (uint8_t)val;
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	7a3b      	ldrb	r3, [r7, #8]
 80008e0:	f362 1347 	bfi	r3, r2, #5, #3
 80008e4:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 80008e6:	f107 0208 	add.w	r2, r7, #8
 80008ea:	2301      	movs	r3, #1
 80008ec:	2110      	movs	r1, #16
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <iis3dwb_write_reg>
 80008f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	2301      	movs	r3, #1
 8000912:	2112      	movs	r1, #18
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff77 	bl	8000808 <iis3dwb_read_reg>
 800091a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10f      	bne.n	8000942 <iis3dwb_block_data_update_set+0x42>
    ctrl3_c.bdu= (uint8_t)val;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	7a3b      	ldrb	r3, [r7, #8]
 800092c:	f362 1386 	bfi	r3, r2, #6, #1
 8000930:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000932:	f107 0208 	add.w	r2, r7, #8
 8000936:	2301      	movs	r3, #1
 8000938:	2112      	movs	r1, #18
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff7c 	bl	8000838 <iis3dwb_write_reg>
 8000940:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <iis3dwb_xl_axis_selection_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_axis_selection_set(stmdev_ctx_t *ctx,
                                     iis3dwb_xl_axis_sel_t val)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	2301      	movs	r3, #1
 800095e:	2113      	movs	r1, #19
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff51 	bl	8000808 <iis3dwb_read_reg>
 8000966:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d110      	bne.n	8000990 <iis3dwb_xl_axis_selection_set+0x44>
    ctrl4_c._1ax_to_3regout = ( (uint8_t)val & 0x10U ) >> 4;
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	091b      	lsrs	r3, r3, #4
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7c3b      	ldrb	r3, [r7, #16]
 800097a:	f362 0300 	bfi	r3, r2, #0, #1
 800097e:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000980:	f107 0210 	add.w	r2, r7, #16
 8000984:	2301      	movs	r3, #1
 8000986:	2113      	movs	r1, #19
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff55 	bl	8000838 <iis3dwb_write_reg>
 800098e:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d107      	bne.n	80009a6 <iis3dwb_xl_axis_selection_set+0x5a>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8000996:	f107 020c 	add.w	r2, r7, #12
 800099a:	2301      	movs	r3, #1
 800099c:	2115      	movs	r1, #21
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ff32 	bl	8000808 <iis3dwb_read_reg>
 80009a4:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10f      	bne.n	80009cc <iis3dwb_xl_axis_selection_set+0x80>
    ctrl6_c.xl_axis_sel = (uint8_t)val;
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	7b3b      	ldrb	r3, [r7, #12]
 80009b6:	f362 0301 	bfi	r3, r2, #0, #2
 80009ba:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	2301      	movs	r3, #1
 80009c2:	2115      	movs	r1, #21
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff37 	bl	8000838 <iis3dwb_write_reg>
 80009ca:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80009cc:	697b      	ldr	r3, [r7, #20]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80009e2:	f107 0208 	add.w	r2, r7, #8
 80009e6:	2301      	movs	r3, #1
 80009e8:	210b      	movs	r1, #11
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ff0c 	bl	8000808 <iis3dwb_read_reg>
 80009f0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10f      	bne.n	8000a18 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7a3b      	ldrb	r3, [r7, #8]
 8000a02:	f362 13c7 	bfi	r3, r2, #7, #1
 8000a06:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8000a08:	f107 0208 	add.w	r2, r7, #8
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	210b      	movs	r1, #11
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff11 	bl	8000838 <iis3dwb_write_reg>
 8000a16:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	210f      	movs	r1, #15
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fee8 	bl	8000808 <iis3dwb_read_reg>
 8000a38:	60f8      	str	r0, [r7, #12]
  return ret;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	2301      	movs	r3, #1
 8000a56:	2112      	movs	r1, #18
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fed5 	bl	8000808 <iis3dwb_read_reg>
 8000a5e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10f      	bne.n	8000a86 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	f362 0300 	bfi	r3, r2, #0, #1
 8000a74:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2112      	movs	r1, #18
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff feda 	bl	8000838 <iis3dwb_write_reg>
 8000a84:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <iis3dwb_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2112      	movs	r1, #18
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff feb0 	bl	8000808 <iis3dwb_read_reg>
 8000aa8:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	701a      	strb	r2, [r3, #0]

  return ret;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <iis3dwb_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000ace:	f107 0208 	add.w	r2, r7, #8
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2112      	movs	r1, #18
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe96 	bl	8000808 <iis3dwb_read_reg>
 8000adc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d10f      	bne.n	8000b04 <iis3dwb_auto_increment_set+0x42>
    ctrl3_c.if_inc= (uint8_t)val;
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	7a3b      	ldrb	r3, [r7, #8]
 8000aee:	f362 0382 	bfi	r3, r2, #2, #1
 8000af2:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	2301      	movs	r3, #1
 8000afa:	2112      	movs	r1, #18
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fe9b 	bl	8000838 <iis3dwb_write_reg>
 8000b02:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000b04:	68fb      	ldr	r3, [r7, #12]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <iis3dwb_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000b1a:	f107 0208 	add.w	r2, r7, #8
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fe70 	bl	8000808 <iis3dwb_read_reg>
 8000b28:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10f      	bne.n	8000b50 <iis3dwb_xl_filter_lp2_set+0x42>
    ctrl1_xl.lpf2_xl_en= (uint8_t)val;
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	7a3b      	ldrb	r3, [r7, #8]
 8000b3a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b3e:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	2301      	movs	r3, #1
 8000b46:	2110      	movs	r1, #16
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fe75 	bl	8000838 <iis3dwb_write_reg>
 8000b4e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8000b50:	68fb      	ldr	r3, [r7, #12]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000b66:	f107 0210 	add.w	r2, r7, #16
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fe4a 	bl	8000808 <iis3dwb_read_reg>
 8000b74:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d111      	bne.n	8000ba0 <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	09db      	lsrs	r3, r3, #7
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	7c3b      	ldrb	r3, [r7, #16]
 8000b8a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b8e:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	2301      	movs	r3, #1
 8000b96:	2110      	movs	r1, #16
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe4d 	bl	8000838 <iis3dwb_write_reg>
 8000b9e:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8000ba6:	f107 020c 	add.w	r2, r7, #12
 8000baa:	2301      	movs	r3, #1
 8000bac:	2117      	movs	r1, #23
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fe2a 	bl	8000808 <iis3dwb_read_reg>
 8000bb4:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d121      	bne.n	8000c00 <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	7b3b      	ldrb	r3, [r7, #12]
 8000bc8:	f362 0382 	bfi	r3, r2, #2, #1
 8000bcc:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	095b      	lsrs	r3, r3, #5
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	f362 1304 	bfi	r3, r2, #4, #1
 8000bde:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	7b3b      	ldrb	r3, [r7, #12]
 8000bea:	f362 1347 	bfi	r3, r2, #5, #3
 8000bee:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8000bf0:	f107 020c 	add.w	r2, r7, #12
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	2117      	movs	r1, #23
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fe1d 	bl	8000838 <iis3dwb_write_reg>
 8000bfe:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8000c00:	697b      	ldr	r3, [r7, #20]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000c16:	f107 0208 	add.w	r2, r7, #8
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2113      	movs	r1, #19
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fdf2 	bl	8000808 <iis3dwb_read_reg>
 8000c24:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10f      	bne.n	8000c4c <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	7a3b      	ldrb	r3, [r7, #8]
 8000c36:	f362 0382 	bfi	r3, r2, #2, #1
 8000c3a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8000c3c:	f107 0208 	add.w	r2, r7, #8
 8000c40:	2301      	movs	r3, #1
 8000c42:	2113      	movs	r1, #19
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fdf7 	bl	8000838 <iis3dwb_write_reg>
 8000c4a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8000c60:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8000c62:	2301      	movs	r3, #1
 8000c64:	210d      	movs	r1, #13
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fde6 	bl	8000838 <iis3dwb_write_reg>
 8000c6c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d107      	bne.n	8000c84 <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8000c78:	2301      	movs	r3, #1
 8000c7a:	215e      	movs	r1, #94	; 0x5e
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fddb 	bl	8000838 <iis3dwb_write_reg>
 8000c82:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8000c9a:	f107 020c 	add.w	r2, r7, #12
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fdb0 	bl	8000808 <iis3dwb_read_reg>
 8000ca8:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8000cb6:	f107 0210 	add.w	r2, r7, #16
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fdba 	bl	8000838 <iis3dwb_write_reg>
 8000cc4:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	7b3b      	ldrb	r3, [r7, #12]
 8000cda:	f362 0300 	bfi	r3, r2, #0, #1
 8000cde:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8000ce0:	f107 020c 	add.w	r2, r7, #12
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fda5 	bl	8000838 <iis3dwb_write_reg>
 8000cee:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 8000cf0:	697b      	ldr	r3, [r7, #20]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8000d06:	f107 0208 	add.w	r2, r7, #8
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2109      	movs	r1, #9
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fd7a 	bl	8000808 <iis3dwb_read_reg>
 8000d14:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10f      	bne.n	8000d3c <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	7a3b      	ldrb	r3, [r7, #8]
 8000d26:	f362 0303 	bfi	r3, r2, #0, #4
 8000d2a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8000d2c:	f107 0208 	add.w	r2, r7, #8
 8000d30:	2301      	movs	r3, #1
 8000d32:	2109      	movs	r1, #9
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fd7f 	bl	8000838 <iis3dwb_write_reg>
 8000d3a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8000d52:	f107 0208 	add.w	r2, r7, #8
 8000d56:	2301      	movs	r3, #1
 8000d58:	210a      	movs	r1, #10
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fd54 	bl	8000808 <iis3dwb_read_reg>
 8000d60:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	f362 0302 	bfi	r3, r2, #0, #3
 8000d76:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	210a      	movs	r1, #10
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fd59 	bl	8000838 <iis3dwb_write_reg>
 8000d86:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8000d88:	68fb      	ldr	r3, [r7, #12]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b099      	sub	sp, #100	; 0x64
 8000d98:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 fc0e 	bl	80015ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f825 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f000 f94f 	bl	8001044 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000da6:	f000 f8d7 	bl	8000f58 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000daa:	f000 f871 	bl	8000e90 <MX_SPI2_Init>
  MX_DMA_Init();
 8000dae:	f000 f91f 	bl	8000ff0 <MX_DMA_Init>
  MX_TIM17_Init();
 8000db2:	f000 f8ab 	bl	8000f0c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <main+0x4c>)
 8000db8:	f003 fd9e 	bl	80048f8 <HAL_TIM_Base_Start_IT>
  IIS3DWB_INIT(hspi2, SPI2_CS_GPIO_Port , SPI2_CS_Pin);
 8000dbc:	4c09      	ldr	r4, [pc, #36]	; (8000de4 <main+0x50>)
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	9316      	str	r3, [sp, #88]	; 0x58
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <main+0x54>)
 8000dc6:	9315      	str	r3, [sp, #84]	; 0x54
 8000dc8:	4668      	mov	r0, sp
 8000dca:	f104 0310 	add.w	r3, r4, #16
 8000dce:	2254      	movs	r2, #84	; 0x54
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f004 fe8d 	bl	8005af0 <memcpy>
 8000dd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dda:	f7ff fcef 	bl	80007bc <IIS3DWB_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <main+0x4a>
 8000de0:	20000184 	.word	0x20000184
 8000de4:	200000c0 	.word	0x200000c0
 8000de8:	48000400 	.word	0x48000400

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fe86 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e12:	f001 f919 	bl	8002048 <HAL_PWREx_ControlVoltageScaling>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e1c:	f000 f9f0 	bl	8001200 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e20:	2310      	movs	r3, #16
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e2c:	2360      	movs	r3, #96	; 0x60
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e34:	2301      	movs	r3, #1
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000e3c:	231e      	movs	r3, #30
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f99d 	bl	8002190 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e5c:	f000 f9d0 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	230f      	movs	r3, #15
 8000e62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2303      	movs	r3, #3
 8000e66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2102      	movs	r1, #2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fdaf 	bl	80029dc <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e84:	f000 f9bc 	bl	8001200 <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3758      	adds	r7, #88	; 0x58
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_SPI2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000eaa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_SPI2_Init+0x74>)
 8000ef0:	f002 fd9a 	bl	8003a28 <HAL_SPI_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f981 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000c0 	.word	0x200000c0
 8000f08:	40003800 	.word	0x40003800

08000f0c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <MX_TIM17_Init+0x48>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6-1;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f18:	2205      	movs	r2, #5
 8000f1a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f28:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_TIM17_Init+0x44>)
 8000f3e:	f003 fc83 	bl	8004848 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000f48:	f000 f95a 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000184 	.word	0x20000184
 8000f54:	40014800 	.word	0x40014800

08000f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <MX_USART2_UART_Init+0x94>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000fa2:	f003 ff19 	bl	8004dd8 <HAL_UART_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fac:	f000 f928 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000fb4:	f004 fcae 	bl	8005914 <HAL_UARTEx_SetTxFifoThreshold>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fbe:	f000 f91f 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000fc6:	f004 fce3 	bl	8005990 <HAL_UARTEx_SetRxFifoThreshold>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd0:	f000 f916 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_USART2_UART_Init+0x90>)
 8000fd6:	f004 fc64 	bl	80058a2 <HAL_UARTEx_DisableFifoMode>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f90e 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001d0 	.word	0x200001d0
 8000fec:	40004400 	.word	0x40004400

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_DMA_Init+0x50>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <MX_DMA_Init+0x50>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6493      	str	r3, [r2, #72]	; 0x48
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_DMA_Init+0x50>)
 8001004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_DMA_Init+0x50>)
 8001010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_DMA_Init+0x50>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6493      	str	r3, [r2, #72]	; 0x48
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_DMA_Init+0x50>)
 800101c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	200b      	movs	r0, #11
 800102c:	f000 fc39 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001030:	200b      	movs	r0, #11
 8001032:	f000 fc52 	bl	80018da <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <MX_GPIO_Init+0x174>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <MX_GPIO_Init+0x174>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <MX_GPIO_Init+0x174>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a44      	ldr	r2, [pc, #272]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <MX_GPIO_Init+0x174>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	4833      	ldr	r0, [pc, #204]	; (80011bc <MX_GPIO_Init+0x178>)
 80010f0:	f000 ff5a 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_1_2_GPIO_Port, SEL_1_2_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2101      	movs	r1, #1
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MX_GPIO_Init+0x17c>)
 80010fa:	f000 ff55 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001104:	482f      	ldr	r0, [pc, #188]	; (80011c4 <MX_GPIO_Init+0x180>)
 8001106:	f000 ff4f 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	482d      	ldr	r0, [pc, #180]	; (80011c8 <MX_GPIO_Init+0x184>)
 8001112:	f000 ff49 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <MX_GPIO_Init+0x178>)
 800112e:	f000 fda9 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_INT1_Pin */
  GPIO_InitStruct.Pin = SPI_INT1_Pin;
 8001132:	2320      	movs	r3, #32
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001136:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI_INT1_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <MX_GPIO_Init+0x188>)
 8001148:	f000 fd9c 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_2_Pin */
  GPIO_InitStruct.Pin = SEL_1_2_Pin;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_1_2_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <MX_GPIO_Init+0x17c>)
 8001164:	f000 fd8e 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_3_4_Pin */
  GPIO_InitStruct.Pin = SEL_3_4_Pin;
 8001168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_3_4_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_GPIO_Init+0x180>)
 8001182:	f000 fd7f 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <MX_GPIO_Init+0x184>)
 80011a0:	f000 fd70 	bl	8001c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2017      	movs	r0, #23
 80011aa:	f000 fb7a 	bl	80018a2 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48001800 	.word	0x48001800
 80011c4:	48001400 	.word	0x48001400
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800

080011d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

	//Check which version of the timer triggered this callback
	if(htim==&htim17){

	}
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==SPI_INT1_Pin){
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b20      	cmp	r3, #32
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_EXTI_Callback+0x14>
		//HAL_GPIO_TogglePin(LED1_GPIO_Port , LED1_Pin );
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg_0, sizeof(msg_0), HAL_MAX_DELAY);
		//IIS3DWB_MEASSURE();
		IIS3DWB_Int_Measure();
 80011f4:	f7ff fa8e 	bl	8000714 <IIS3DWB_Int_Measure>
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_MspInit+0x44>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x44>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x44>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x44>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a39      	ldr	r2, [pc, #228]	; (8001358 <HAL_SPI_MspInit+0x104>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d16c      	bne.n	8001350 <HAL_SPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_SPI_MspInit+0x108>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a38      	ldr	r2, [pc, #224]	; (800135c <HAL_SPI_MspInit+0x108>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_SPI_MspInit+0x108>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_SPI_MspInit+0x108>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_SPI_MspInit+0x108>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_SPI_MspInit+0x108>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_SPI_MspInit+0x108>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_SPI_MspInit+0x108>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_SPI_MspInit+0x108>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 80012be:	230a      	movs	r3, #10
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ce:	2305      	movs	r3, #5
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4821      	ldr	r0, [pc, #132]	; (8001360 <HAL_SPI_MspInit+0x10c>)
 80012da:	f000 fcd3 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012de:	2308      	movs	r3, #8
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	; (8001364 <HAL_SPI_MspInit+0x110>)
 80012fa:	f000 fcc3 	bl	8001c84 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_SPI_MspInit+0x118>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001306:	220c      	movs	r2, #12
 8001308:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_SPI_MspInit+0x114>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_SPI_MspInit+0x114>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_SPI_MspInit+0x114>)
 800132a:	2220      	movs	r2, #32
 800132c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001336:	f000 faeb 	bl	8001910 <HAL_DMA_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_SPI_MspInit+0xf0>
    {
      Error_Handler();
 8001340:	f7ff ff5e 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_SPI_MspInit+0x114>)
 8001348:	659a      	str	r2, [r3, #88]	; 0x58
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_SPI_MspInit+0x114>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40003800 	.word	0x40003800
 800135c:	40021000 	.word	0x40021000
 8001360:	48000c00 	.word	0x48000c00
 8001364:	48000800 	.word	0x48000800
 8001368:	20000124 	.word	0x20000124
 800136c:	40020008 	.word	0x40020008

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d113      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_TIM_Base_MspInit+0x48>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_TIM_Base_MspInit+0x48>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x48>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201a      	movs	r0, #26
 80013a0:	f000 fa7f 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013a4:	201a      	movs	r0, #26
 80013a6:	f000 fa98 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40014800 	.word	0x40014800
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0b0      	sub	sp, #192	; 0xc0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	229c      	movs	r2, #156	; 0x9c
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 fb95 	bl	8005b0c <memset>
  if(huart->Instance==USART2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_UART_MspInit+0xb0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d13a      	bne.n	8001462 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fd9d 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001404:	f7ff fefc 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_MspInit+0xb4>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_UART_MspInit+0xb4>)
 800140e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_UART_MspInit+0xb4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_UART_MspInit+0xb4>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_UART_MspInit+0xb4>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_UART_MspInit+0xb4>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001450:	2307      	movs	r3, #7
 8001452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_MspInit+0xb8>)
 800145e:	f000 fc11 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37c0      	adds	r7, #192	; 0xc0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004400 	.word	0x40004400
 8001470:	40021000 	.word	0x40021000
 8001474:	48000c00 	.word	0x48000c00

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f8ce 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <DMA1_Channel1_IRQHandler+0x10>)
 80014d2:	f000 fac5 	bl	8001a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000124 	.word	0x20000124

080014e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_INT1_Pin);
 80014e4:	2020      	movs	r0, #32
 80014e6:	f000 fd77 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014f6:	f003 fa6f 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000184 	.word	0x20000184

08001504 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <SystemInit+0x5c>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <SystemInit+0x5c>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0x60>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <SystemInit+0x60>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0x60>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <SystemInit+0x60>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <SystemInit+0x60>)
 8001530:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001534:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001538:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <SystemInit+0x60>)
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SystemInit+0x60>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <SystemInit+0x60>)
 8001548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x60>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	40021000 	.word	0x40021000

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff ffca 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001570:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001582:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
	ldr	r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800158a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LoopForever+0x16>)
	cmp	r2, r3
 8001592:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f004 fa87 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff fbfb 	bl	8000d94 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80015a4:	08005bb4 	.word	0x08005bb4
	ldr	r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80015b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80015b4:	20000264 	.word	0x20000264

080015b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_IRQHandler>

080015ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f961 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f80e 	bl	80015ec <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	e001      	b.n	80015e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015dc:	f7ff fe16 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d023      	beq.n	8001648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_InitTick+0x70>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_InitTick+0x6c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f96d 	bl	80018f6 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d809      	bhi.n	800163c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f937 	bl	80018a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_InitTick+0x74>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e007      	b.n	800164c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e004      	b.n	800164c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	20000260 	.word	0x20000260

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000260 	.word	0x20000260

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08d      	b.n	8001a3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_DMA_Init+0x138>)
 800192a:	429a      	cmp	r2, r3
 800192c:	d80f      	bhi.n	800194e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_DMA_Init+0x13c>)
 8001936:	4413      	add	r3, r2
 8001938:	4a45      	ldr	r2, [pc, #276]	; (8001a50 <HAL_DMA_Init+0x140>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_DMA_Init+0x144>)
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
 800194c:	e00e      	b.n	800196c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_DMA_Init+0x148>)
 8001956:	4413      	add	r3, r2
 8001958:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <HAL_DMA_Init+0x140>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	009a      	lsls	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a3c      	ldr	r2, [pc, #240]	; (8001a5c <HAL_DMA_Init+0x14c>)
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8fe 	bl	8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019cc:	d102      	bne.n	80019d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019e8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_DMA_Init+0x104>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d80c      	bhi.n	8001a14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f91e 	bl	8001c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e008      	b.n	8001a26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40020407 	.word	0x40020407
 8001a4c:	bffdfff8 	.word	0xbffdfff8
 8001a50:	cccccccd 	.word	0xcccccccd
 8001a54:	40020000 	.word	0x40020000
 8001a58:	bffdfbf8 	.word	0xbffdfbf8
 8001a5c:	40020400 	.word	0x40020400

08001a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f003 031c 	and.w	r3, r3, #28
 8001a80:	2204      	movs	r2, #4
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d026      	beq.n	8001ada <HAL_DMA_IRQHandler+0x7a>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d021      	beq.n	8001ada <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f003 021c 	and.w	r2, r3, #28
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d071      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	e06c      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f003 031c 	and.w	r3, r3, #28
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02e      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xec>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d029      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 020a 	bic.w	r2, r2, #10
 8001b14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f003 021c 	and.w	r2, r3, #28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d038      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b4a:	e033      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f003 031c 	and.w	r3, r3, #28
 8001b54:	2208      	movs	r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d02a      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d025      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020e 	bic.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 021c 	and.w	r2, r3, #28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
}
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d80a      	bhi.n	8001bea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001be0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6493      	str	r3, [r2, #72]	; 0x48
 8001be8:	e007      	b.n	8001bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	009a      	lsls	r2, r3, #2
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3b08      	subs	r3, #8
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2201      	movs	r2, #1
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40020407 	.word	0x40020407
 8001c30:	4002081c 	.word	0x4002081c
 8001c34:	cccccccd 	.word	0xcccccccd
 8001c38:	40020880 	.word	0x40020880

08001c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	1000823f 	.word	0x1000823f
 8001c80:	40020940 	.word	0x40020940

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e166      	b.n	8001f62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8158 	beq.w	8001f5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80b2 	beq.w	8001f5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e10:	4a5c      	ldr	r2, [pc, #368]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e3a:	d02b      	beq.n	8001e94 <HAL_GPIO_Init+0x210>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d025      	beq.n	8001e90 <HAL_GPIO_Init+0x20c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x308>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d01f      	beq.n	8001e8c <HAL_GPIO_Init+0x208>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d019      	beq.n	8001e88 <HAL_GPIO_Init+0x204>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <HAL_GPIO_Init+0x310>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_GPIO_Init+0x200>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4e      	ldr	r2, [pc, #312]	; (8001f98 <HAL_GPIO_Init+0x314>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1fc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_GPIO_Init+0x318>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1f8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x31c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1f4>
 8001e74:	2307      	movs	r3, #7
 8001e76:	e00e      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e78:	2308      	movs	r3, #8
 8001e7a:	e00c      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	e00a      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e008      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e004      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e94:	2300      	movs	r3, #0
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea6:	4937      	ldr	r1, [pc, #220]	; (8001f84 <HAL_GPIO_Init+0x300>)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed8:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f02:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f47f ae91 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	48000800 	.word	0x48000800
 8001f90:	48000c00 	.word	0x48000c00
 8001f94:	48001000 	.word	0x48001000
 8001f98:	48001400 	.word	0x48001400
 8001f9c:	48001800 	.word	0x48001800
 8001fa0:	48001c00 	.word	0x48001c00
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8f4 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_PWREx_GetVoltageRange+0x3c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d102      	bne.n	8002020 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800201a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201e:	e00b      	b.n	8002038 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202e:	d102      	bne.n	8002036 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002034:	e000      	b.n	8002038 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002036:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40007000 	.word	0x40007000

08002048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d141      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d131      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800206a:	4a46      	ldr	r2, [pc, #280]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002084:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2232      	movs	r2, #50	; 0x32
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209a:	e002      	b.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3b01      	subs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d102      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f2      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d158      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e057      	b.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ce:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020d8:	e04d      	b.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e0:	d141      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ee:	d131      	bne.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f6:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2232      	movs	r2, #50	; 0x32
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002126:	e002      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3b01      	subs	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213a:	d102      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f2      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214e:	d112      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e011      	b.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002164:	e007      	b.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002174:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40007000 	.word	0x40007000
 8002188:	20000000 	.word	0x20000000
 800218c:	431bde83 	.word	0x431bde83

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 bc16 	b.w	80029d0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80e4 	beq.w	800238e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_RCC_OscConfig+0x4c>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	f040 808b 	bne.w	80022ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 8087 	bne.w	80022ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x64>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e3ed      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_RCC_OscConfig+0x7e>
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	e005      	b.n	800221a <HAL_RCC_OscConfig+0x8a>
 800220e:	4b86      	ldr	r3, [pc, #536]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221a:	4293      	cmp	r3, r2
 800221c:	d223      	bcs.n	8002266 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fdc8 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e3ce      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7c      	ldr	r2, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4977      	ldr	r1, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002250:	4b75      	ldr	r3, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	4972      	ldr	r1, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e025      	b.n	80022b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002266:	4b70      	ldr	r3, [pc, #448]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	496a      	ldr	r1, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	4965      	ldr	r1, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fd88 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e38e      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b2:	f000 fcbf 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	495a      	ldr	r1, [pc, #360]	; (800242c <HAL_RCC_OscConfig+0x29c>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_OscConfig+0x2a0>)
 80022d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022d2:	4b58      	ldr	r3, [pc, #352]	; (8002434 <HAL_RCC_OscConfig+0x2a4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f988 	bl	80015ec <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d052      	beq.n	800238c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	e372      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d032      	beq.n	8002358 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022f2:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fe:	f7ff f9c5 	bl	800168c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002306:	f7ff f9c1 	bl	800168c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e35b      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002324:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	493a      	ldr	r1, [pc, #232]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4935      	ldr	r1, [pc, #212]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
 8002356:	e01a      	b.n	800238e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a32      	ldr	r2, [pc, #200]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7ff f992 	bl	800168c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7ff f98e 	bl	800168c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e328      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1dc>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d073      	beq.n	8002482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x21c>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d063      	beq.n	8002480 <HAL_RCC_OscConfig+0x2f0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d15f      	bne.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e305      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x24c>
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a15      	ldr	r2, [pc, #84]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0x288>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x270>
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x288>
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_RCC_OscConfig+0x298>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f934 	bl	800168c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	e010      	b.n	800244a <HAL_RCC_OscConfig+0x2ba>
 8002428:	40021000 	.word	0x40021000
 800242c:	08005b34 	.word	0x08005b34
 8002430:	20000000 	.word	0x20000000
 8002434:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f928 	bl	800168c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e2c2      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	4baf      	ldr	r3, [pc, #700]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2a8>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff f918 	bl	800168c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f914 	bl	800168c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e2ae      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002472:	4ba5      	ldr	r3, [pc, #660]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x2d0>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d060      	beq.n	8002550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x310>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d119      	bne.n	80024ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d116      	bne.n	80024ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a0:	4b99      	ldr	r3, [pc, #612]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x328>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e28b      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	4990      	ldr	r1, [pc, #576]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024cc:	e040      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d023      	beq.n	800251e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d6:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a8b      	ldr	r2, [pc, #556]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7ff f8d3 	bl	800168c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7ff f8cf 	bl	800168c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e269      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fc:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	497c      	ldr	r1, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a79      	ldr	r2, [pc, #484]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff f8af 	bl	800168c <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7ff f8ab 	bl	800168c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e245      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002544:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d03c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01c      	beq.n	800259e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f88a 	bl	800168c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7ff f886 	bl	800168c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e220      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258e:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ef      	beq.n	800257c <HAL_RCC_OscConfig+0x3ec>
 800259c:	e01b      	b.n	80025d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff f86d 	bl	800168c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7ff f869 	bl	800168c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e203      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ef      	bne.n	80025b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80a6 	beq.w	8002730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e8:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	4a43      	ldr	r2, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260c:	2301      	movs	r3, #1
 800260e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCC_OscConfig+0x57c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d118      	bne.n	800264e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x57c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x57c>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002628:	f7ff f830 	bl	800168c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7ff f82c 	bl	800168c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1c6      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCC_OscConfig+0x57c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d8>
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002666:	e024      	b.n	80026b2 <HAL_RCC_OscConfig+0x522>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d110      	bne.n	8002692 <HAL_RCC_OscConfig+0x502>
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a20      	ldr	r2, [pc, #128]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002690:	e00f      	b.n	80026b2 <HAL_RCC_OscConfig+0x522>
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe ffe7 	bl	800168c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe ffe3 	bl	800168c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e17b      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x578>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ed      	beq.n	80026c2 <HAL_RCC_OscConfig+0x532>
 80026e6:	e01a      	b.n	800271e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe ffd0 	bl	800168c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe ffcc 	bl	800168c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d906      	bls.n	8002710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e164      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002710:	4ba8      	ldr	r3, [pc, #672]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e8      	bne.n	80026f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271e:	7ffb      	ldrb	r3, [r7, #31]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4ba3      	ldr	r3, [pc, #652]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4aa2      	ldr	r2, [pc, #648]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002744:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800274a:	4a9a      	ldr	r2, [pc, #616]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe ff9a 	bl	800168c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275c:	f7fe ff96 	bl	800168c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e130      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800276e:	4b91      	ldr	r3, [pc, #580]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCC_OscConfig+0x5cc>
 800277c:	e01b      	b.n	80027b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277e:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002784:	4a8b      	ldr	r2, [pc, #556]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe ff7d 	bl	800168c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002796:	f7fe ff79 	bl	800168c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e113      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a8:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80027aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ef      	bne.n	8002796 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8107 	beq.w	80029ce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 80cb 	bne.w	8002960 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ca:	4b7a      	ldr	r3, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d12c      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	3b01      	subs	r3, #1
 80027ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d123      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d11b      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d113      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d109      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d06d      	beq.n	8002914 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d068      	beq.n	8002910 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800284a:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0ba      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002864:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002866:	f7fe ff11 	bl	800168c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe ff0d 	bl	800168c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0a7      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288c:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <HAL_RCC_OscConfig+0x828>)
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289c:	3a01      	subs	r2, #1
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a6:	0212      	lsls	r2, r2, #8
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0552      	lsls	r2, r2, #21
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ba:	0852      	lsrs	r2, r2, #1
 80028bc:	3a01      	subs	r2, #1
 80028be:	0652      	lsls	r2, r2, #25
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c6:	06d2      	lsls	r2, r2, #27
 80028c8:	430a      	orrs	r2, r1
 80028ca:	493a      	ldr	r1, [pc, #232]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a37      	ldr	r2, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fed0 	bl	800168c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fecc 	bl	800168c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e066      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e05e      	b.n	80029ce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e05d      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d156      	bne.n	80029ce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe fea8 	bl	800168c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fea4 	bl	800168c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03e      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x7b0>
 800295e:	e036      	b.n	80029ce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d031      	beq.n	80029ca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x824>)
 8002990:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fe77 	bl	800168c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e00c      	b.n	80029bc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fe73 	bl	800168c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d905      	bls.n	80029bc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e00d      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x848>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ec      	bne.n	80029a2 <HAL_RCC_OscConfig+0x812>
 80029c8:	e001      	b.n	80029ce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e10f      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	4984      	ldr	r1, [pc, #528]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0f7      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8089 	beq.w	8002b44 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d133      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e4      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a4a:	f000 fa0f 	bl	8002e6c <RCC_GetSysClockFreqFromPLLSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a74      	ldr	r2, [pc, #464]	; (8002c24 <HAL_RCC_ClockConfig+0x248>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d955      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a56:	4b72      	ldr	r3, [pc, #456]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a62:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	4a6d      	ldr	r2, [pc, #436]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e044      	b.n	8002b02 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03e      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x126>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d13a      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a8c:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a94:	4a62      	ldr	r2, [pc, #392]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e02f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aaa:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0ac      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac2:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a0      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e098      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ae2:	f000 f8a7 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_RCC_ClockConfig+0x248>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d909      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aee:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	4a4a      	ldr	r2, [pc, #296]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4944      	ldr	r1, [pc, #272]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fe fdba 	bl	800168c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fe fdb6 	bl	800168c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e070      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4930      	ldr	r1, [pc, #192]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b74:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b76:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d210      	bcs.n	8002ba6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 020f 	bic.w	r2, r3, #15
 8002b8c:	4923      	ldr	r1, [pc, #140]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_ClockConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e036      	b.n	8002c14 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4918      	ldr	r1, [pc, #96]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4910      	ldr	r1, [pc, #64]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be4:	f000 f826 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <HAL_RCC_ClockConfig+0x24c>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x250>)
 8002c02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x254>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fcef 	bl	80015ec <HAL_InitTick>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	04c4b400 	.word	0x04c4b400
 8002c28:	08005b34 	.word	0x08005b34
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d121      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d11e      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c90:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d134      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0xa6>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	617b      	str	r3, [r7, #20]
      break;
 8002cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fb02 f203 	mul.w	r2, r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0e5b      	lsrs	r3, r3, #25
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08005b4c 	.word	0x08005b4c
 8002d44:	00f42400 	.word	0x00f42400

08002d48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4904      	ldr	r1, [pc, #16]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08005b44 	.word	0x08005b44

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d90:	f7ff ffda 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0adb      	lsrs	r3, r3, #11
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08005b44 	.word	0x08005b44

08002db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd0:	f7ff f91a 	bl	8002008 <HAL_PWREx_GetVoltageRange>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f90a 	bl	8002008 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d10b      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d913      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2ba0      	cmp	r3, #160	; 0xa0
 8002e14:	d902      	bls.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e16:	2302      	movs	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e00d      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e00a      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b7f      	cmp	r3, #127	; 0x7f
 8002e26:	d902      	bls.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e28:	2302      	movs	r3, #2
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	e004      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b70      	cmp	r3, #112	; 0x70
 8002e32:	d101      	bne.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 020f 	bic.w	r2, r3, #15
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40022000 	.word	0x40022000

08002e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d118      	bne.n	8002eb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e005      	b.n	8002eaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d003      	beq.n	8002ecc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d003      	beq.n	8002ed2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002eca:	e005      	b.n	8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ece:	613b      	str	r3, [r7, #16]
    break;
 8002ed0:	e005      	b.n	8002ede <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ed4:	613b      	str	r3, [r7, #16]
    break;
 8002ed6:	e002      	b.n	8002ede <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
    break;
 8002edc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	fb02 f203 	mul.w	r2, r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0e5b      	lsrs	r3, r3, #25
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f1e:	683b      	ldr	r3, [r7, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08005b4c 	.word	0x08005b4c
 8002f34:	00f42400 	.word	0x00f42400

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d040      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d02a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d825      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d026      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d821      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d006      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d81d      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d010      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f78:	e018      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a88      	ldr	r2, [pc, #544]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f86:	e015      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fb62 	bl	8003658 <RCCEx_PLLSAI1_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f98:	e00c      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fc4d 	bl	8003840 <RCCEx_PLLSAI2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fc0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc8:	4975      	ldr	r1, [pc, #468]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d047      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d030      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d82a      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff6:	d02a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ffc:	d824      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003002:	d008      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d81e      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d010      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003014:	e018      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003016:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a61      	ldr	r2, [pc, #388]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003022:	e015      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb14 	bl	8003658 <RCCEx_PLLSAI1_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e00c      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3320      	adds	r3, #32
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fbff 	bl	8003840 <RCCEx_PLLSAI2_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003046:	e003      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	74fb      	strb	r3, [r7, #19]
      break;
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800304e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003056:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	494e      	ldr	r1, [pc, #312]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800306c:	e001      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 809f 	beq.w	80031be <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003084:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030c2:	f7fe fae3 	bl	800168c <HAL_GetTick>
 80030c6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c8:	e009      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe fadf 	bl	800168c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d902      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	74fb      	strb	r3, [r7, #19]
        break;
 80030dc:	e005      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ef      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d15b      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01f      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	429a      	cmp	r2, r3
 800310c:	d019      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800313a:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fa9e 	bl	800168c <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	e00b      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fa9a 	bl	800168c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d902      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	74fb      	strb	r3, [r7, #19]
            break;
 800316a:	e006      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ec      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10c      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003198:	e008      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	74bb      	strb	r3, [r7, #18]
 800319e:	e005      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ac:	7c7b      	ldrb	r3, [r7, #17]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d105      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b2:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	4a9f      	ldr	r2, [pc, #636]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ca:	4b9a      	ldr	r3, [pc, #616]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f023 0203 	bic.w	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	4996      	ldr	r1, [pc, #600]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ec:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 020c 	bic.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	498e      	ldr	r1, [pc, #568]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800320e:	4b89      	ldr	r3, [pc, #548]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	4985      	ldr	r1, [pc, #532]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003230:	4b80      	ldr	r3, [pc, #512]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	497d      	ldr	r1, [pc, #500]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003252:	4b78      	ldr	r3, [pc, #480]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	4974      	ldr	r1, [pc, #464]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003282:	496c      	ldr	r1, [pc, #432]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a4:	4963      	ldr	r1, [pc, #396]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c6:	495b      	ldr	r1, [pc, #364]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	4952      	ldr	r1, [pc, #328]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fc:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	494a      	ldr	r1, [pc, #296]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331e:	4b45      	ldr	r3, [pc, #276]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	4941      	ldr	r1, [pc, #260]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003340:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4939      	ldr	r1, [pc, #228]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d028      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003362:	4b34      	ldr	r3, [pc, #208]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	4930      	ldr	r1, [pc, #192]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003380:	d106      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338c:	60d3      	str	r3, [r2, #12]
 800338e:	e011      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f959 	bl	8003658 <RCCEx_PLLSAI1_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d04d      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c8:	d108      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033ca:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033da:	e012      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033dc:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fa:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d106      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e020      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003422:	d109      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a02      	ldr	r2, [pc, #8]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342e:	60d3      	str	r3, [r2, #12]
 8003430:	e014      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003440:	d10c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f905 	bl	8003658 <RCCEx_PLLSAI1_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d028      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003468:	4b7a      	ldr	r3, [pc, #488]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003476:	4977      	ldr	r1, [pc, #476]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003486:	d106      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003488:	4b72      	ldr	r3, [pc, #456]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a71      	ldr	r2, [pc, #452]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800348e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	e011      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800349e:	d10c      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f8d6 	bl	8003658 <RCCEx_PLLSAI1_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01e      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d6:	495f      	ldr	r1, [pc, #380]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f8b1 	bl	8003658 <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003510:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003516:	f023 0204 	bic.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	494c      	ldr	r1, [pc, #304]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003534:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353a:	f023 0218 	bic.w	r2, r3, #24
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	4943      	ldr	r1, [pc, #268]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d035      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe f892 	bl	800168c <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800356a:	e009      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356c:	f7fe f88e 	bl	800168c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	74fb      	strb	r3, [r7, #19]
        break;
 800357e:	e005      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ef      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d113      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a2:	492c      	ldr	r1, [pc, #176]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3320      	adds	r3, #32
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f945 	bl	8003840 <RCCEx_PLLSAI2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01e      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	491c      	ldr	r1, [pc, #112]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d10c      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3320      	adds	r3, #32
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f920 	bl	8003840 <RCCEx_PLLSAI2_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800361c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003648:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800364a:	7cbb      	ldrb	r3, [r7, #18]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000

08003658 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003672:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d103      	bne.n	800368a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
       ||
 8003686:	2b00      	cmp	r3, #0
 8003688:	d142      	bne.n	8003710 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e03f      	b.n	8003710 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x72>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI1_Config+0x90>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0x4e>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI1_Config+0x60>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80036fe:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4949      	ldr	r1, [pc, #292]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8086 	bne.w	8003824 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a44      	ldr	r2, [pc, #272]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fd ffb2 	bl	800168c <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800372a:	e009      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800372c:	f7fd ffae 	bl	800168c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	73fb      	strb	r3, [r7, #15]
        break;
 800373e:	e005      	b.n	800374c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ef      	bne.n	800372c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d168      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	06d2      	lsls	r2, r2, #27
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	3a01      	subs	r2, #1
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	430a      	orrs	r2, r1
 8003778:	492d      	ldr	r1, [pc, #180]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e02d      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d115      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	0211      	lsls	r1, r2, #8
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6912      	ldr	r2, [r2, #16]
 8003798:	0852      	lsrs	r2, r2, #1
 800379a:	3a01      	subs	r2, #1
 800379c:	0552      	lsls	r2, r2, #21
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4921      	ldr	r1, [pc, #132]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	610b      	str	r3, [r1, #16]
 80037b0:	e014      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b2:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	0211      	lsls	r1, r2, #8
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6952      	ldr	r2, [r2, #20]
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0652      	lsls	r2, r2, #25
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	430a      	orrs	r2, r1
 80037d6:	4916      	ldr	r1, [pc, #88]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fd ff50 	bl	800168c <HAL_GetTick>
 80037ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ee:	e009      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f0:	f7fd ff4c 	bl	800168c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d902      	bls.n	8003804 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	73fb      	strb	r3, [r7, #15]
          break;
 8003802:	e005      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ef      	beq.n	80037f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	4904      	ldr	r1, [pc, #16]	; (8003830 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	07ff800f 	.word	0x07ff800f
 8003838:	ff9f800f 	.word	0xff9f800f
 800383c:	f9ff800f 	.word	0xf9ff800f

08003840 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384e:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00e      	beq.n	8003878 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800385a:	4b6f      	ldr	r3, [pc, #444]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d103      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
       ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d142      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	e03f      	b.n	80038f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d018      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0x72>
 8003880:	2b03      	cmp	r3, #3
 8003882:	d825      	bhi.n	80038d0 <RCCEx_PLLSAI2_Config+0x90>
 8003884:	2b01      	cmp	r3, #1
 8003886:	d002      	beq.n	800388e <RCCEx_PLLSAI2_Config+0x4e>
 8003888:	2b02      	cmp	r3, #2
 800388a:	d009      	beq.n	80038a0 <RCCEx_PLLSAI2_Config+0x60>
 800388c:	e020      	b.n	80038d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800388e:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11d      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389e:	e01a      	b.n	80038d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a0:	4b5d      	ldr	r3, [pc, #372]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e013      	b.n	80038da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b2:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038be:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ce:	e006      	b.n	80038de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e004      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80038de:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80038e6:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4949      	ldr	r1, [pc, #292]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 8086 	bne.w	8003a0c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003900:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a44      	ldr	r2, [pc, #272]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fd febe 	bl	800168c <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003914:	f7fd feba 	bl	800168c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
        break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ef      	bne.n	8003914 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d168      	bne.n	8003a0c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003940:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	06d2      	lsls	r2, r2, #27
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6852      	ldr	r2, [r2, #4]
 800395a:	3a01      	subs	r2, #1
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	430a      	orrs	r2, r1
 8003960:	492d      	ldr	r1, [pc, #180]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	614b      	str	r3, [r1, #20]
 8003966:	e02d      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d115      	bne.n	800399a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	0211      	lsls	r1, r2, #8
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6912      	ldr	r2, [r2, #16]
 8003980:	0852      	lsrs	r2, r2, #1
 8003982:	3a01      	subs	r2, #1
 8003984:	0552      	lsls	r2, r2, #21
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	3a01      	subs	r2, #1
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	430a      	orrs	r2, r1
 8003992:	4921      	ldr	r1, [pc, #132]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	614b      	str	r3, [r1, #20]
 8003998:	e014      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1e4>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	0211      	lsls	r1, r2, #8
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6952      	ldr	r2, [r2, #20]
 80039ac:	0852      	lsrs	r2, r2, #1
 80039ae:	3a01      	subs	r2, #1
 80039b0:	0652      	lsls	r2, r2, #25
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6852      	ldr	r2, [r2, #4]
 80039b8:	3a01      	subs	r2, #1
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	430a      	orrs	r2, r1
 80039be:	4916      	ldr	r1, [pc, #88]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fe5c 	bl	800168c <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039d6:	e009      	b.n	80039ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d8:	f7fd fe58 	bl	800168c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ea:	e005      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4904      	ldr	r1, [pc, #16]	; (8003a18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	07ff800f 	.word	0x07ff800f
 8003a20:	ff9f800f 	.word	0xff9f800f
 8003a24:	f9ff800f 	.word	0xf9ff800f

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e095      	b.n	8003b66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fbea 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa0:	d902      	bls.n	8003aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e002      	b.n	8003aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_Init+0xa0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 0204 	and.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b44:	ea42 0103 	orr.w	r1, r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b088      	sub	sp, #32
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_SPI_Transmit+0x22>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e158      	b.n	8003e42 <HAL_SPI_Transmit+0x2d4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b98:	f7fd fd78 	bl	800168c <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d002      	beq.n	8003bb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb2:	e13d      	b.n	8003e30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Transmit+0x52>
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bc4:	e134      	b.n	8003e30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	d10f      	bne.n	8003c32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c58:	d94b      	bls.n	8003cf2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0xfa>
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13e      	bne.n	8003ce6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c8c:	e02b      	b.n	8003ce6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d112      	bne.n	8003cc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc0:	e011      	b.n	8003ce6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc2:	f7fd fce3 	bl	800168c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d803      	bhi.n	8003cda <HAL_SPI_Transmit+0x16c>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d102      	bne.n	8003ce0 <HAL_SPI_Transmit+0x172>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce4:	e0a4      	b.n	8003e30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ce      	bne.n	8003c8e <HAL_SPI_Transmit+0x120>
 8003cf0:	e07c      	b.n	8003dec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0x192>
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d170      	bne.n	8003de2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d912      	bls.n	8003d30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	881a      	ldrh	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	1c9a      	adds	r2, r3, #2
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b02      	subs	r3, #2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2e:	e058      	b.n	8003de2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d56:	e044      	b.n	8003de2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d12b      	bne.n	8003dbe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d912      	bls.n	8003d96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b02      	subs	r3, #2
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d94:	e025      	b.n	8003de2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dbc:	e011      	b.n	8003de2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dbe:	f7fd fc65 	bl	800168c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d803      	bhi.n	8003dd6 <HAL_SPI_Transmit+0x268>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d102      	bne.n	8003ddc <HAL_SPI_Transmit+0x26e>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de0:	e026      	b.n	8003e30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1b5      	bne.n	8003d58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	6839      	ldr	r1, [r7, #0]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fce3 	bl	80047bc <SPI_EndRxTxTransaction>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e000      	b.n	8003e30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b088      	sub	sp, #32
 8003e4e:	af02      	add	r7, sp, #8
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e66:	d112      	bne.n	8003e8e <HAL_SPI_Receive+0x44>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10e      	bne.n	8003e8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2204      	movs	r2, #4
 8003e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f910 	bl	80040aa <HAL_SPI_TransmitReceive>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	e109      	b.n	80040a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_SPI_Receive+0x52>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e102      	b.n	80040a2 <HAL_SPI_Receive+0x258>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea4:	f7fd fbf2 	bl	800168c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eba:	e0e9      	b.n	8004090 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Receive+0x7e>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ecc:	e0e0      	b.n	8004090 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f18:	d908      	bls.n	8003f2c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e007      	b.n	8003f3c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f44:	d10f      	bne.n	8003f66 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d007      	beq.n	8003f84 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f8c:	d867      	bhi.n	800405e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f8e:	e030      	b.n	8003ff2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d117      	bne.n	8003fce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f103 020c 	add.w	r2, r3, #12
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fcc:	e011      	b.n	8003ff2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fce:	f7fd fb5d 	bl	800168c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d803      	bhi.n	8003fe6 <HAL_SPI_Receive+0x19c>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d102      	bne.n	8003fec <HAL_SPI_Receive+0x1a2>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ff0:	e04e      	b.n	8004090 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1c8      	bne.n	8003f90 <HAL_SPI_Receive+0x146>
 8003ffe:	e034      	b.n	800406a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d115      	bne.n	800403a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004038:	e011      	b.n	800405e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403a:	f7fd fb27 	bl	800168c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d803      	bhi.n	8004052 <HAL_SPI_Receive+0x208>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d102      	bne.n	8004058 <HAL_SPI_Receive+0x20e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800405c:	e018      	b.n	8004090 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ca      	bne.n	8004000 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fb4c 	bl	800470c <SPI_EndRxTransaction>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
 800408c:	e000      	b.n	8004090 <HAL_SPI_Receive+0x246>
  }

error :
 800408e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b08a      	sub	sp, #40	; 0x28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040b8:	2301      	movs	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x26>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e1fb      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x41e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d8:	f7fd fad8 	bl	800168c <HAL_GetTick>
 80040dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040f4:	7efb      	ldrb	r3, [r7, #27]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d00e      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x6e>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004100:	d106      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x66>
 800410a:	7efb      	ldrb	r3, [r7, #27]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d003      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004110:	2302      	movs	r3, #2
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004116:	e1cd      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_SPI_TransmitReceive+0x80>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_SPI_TransmitReceive+0x80>
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004130:	e1c0      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b04      	cmp	r3, #4
 800413c:	d003      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2205      	movs	r2, #5
 8004142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004188:	d802      	bhi.n	8004190 <HAL_SPI_TransmitReceive+0xe6>
 800418a:	8a3b      	ldrh	r3, [r7, #16]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d908      	bls.n	80041a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e007      	b.n	80041b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d007      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d8:	d97c      	bls.n	80042d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x13e>
 80041e2:	8a7b      	ldrh	r3, [r7, #18]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d169      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420c:	e056      	b.n	80042bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x1aa>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x1aa>
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	2b01      	cmp	r3, #1
 800422a:	d113      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	881a      	ldrh	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d11c      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1f2>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	b292      	uxth	r2, r2
 800427a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429c:	f7fd f9f6 	bl	800168c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d807      	bhi.n	80042bc <HAL_SPI_TransmitReceive+0x212>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d003      	beq.n	80042bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042ba:	e0fb      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1a3      	bne.n	800420e <HAL_SPI_TransmitReceive+0x164>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d19d      	bne.n	800420e <HAL_SPI_TransmitReceive+0x164>
 80042d2:	e0df      	b.n	8004494 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x23a>
 80042dc:	8a7b      	ldrh	r3, [r7, #18]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f040 80cb 	bne.w	800447a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d912      	bls.n	8004314 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	881a      	ldrh	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	1c9a      	adds	r2, r3, #2
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b02      	subs	r3, #2
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004312:	e0b2      	b.n	800447a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433a:	e09e      	b.n	800447a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d134      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x30a>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x30a>
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	2b01      	cmp	r3, #1
 8004358:	d12c      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d912      	bls.n	800438a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b02      	subs	r3, #2
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004388:	e012      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d148      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x3aa>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d042      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d923      	bls.n	8004422 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	b292      	uxth	r2, r2
 80043e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b02      	subs	r3, #2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d81f      	bhi.n	8004450 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e016      	b.n	8004450 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f103 020c 	add.w	r2, r3, #12
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004450:	2301      	movs	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004454:	f7fd f91a 	bl	800168c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	429a      	cmp	r2, r3
 8004462:	d803      	bhi.n	800446c <HAL_SPI_TransmitReceive+0x3c2>
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d102      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x3c8>
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004478:	e01c      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f af5b 	bne.w	800433c <HAL_SPI_TransmitReceive+0x292>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	f47f af54 	bne.w	800433c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f98f 	bl	80047bc <SPI_EndRxTxTransaction>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
 80044b0:	e000      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80044b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044e0:	f7fd f8d4 	bl	800168c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	4413      	add	r3, r2
 80044ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044f0:	f7fd f8cc 	bl	800168c <HAL_GetTick>
 80044f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	015b      	lsls	r3, r3, #5
 80044fc:	0d1b      	lsrs	r3, r3, #20
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004506:	e054      	b.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d050      	beq.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004510:	f7fd f8bc 	bl	800168c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	429a      	cmp	r2, r3
 800451e:	d902      	bls.n	8004526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d13d      	bne.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453e:	d111      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	d004      	beq.n	8004554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004552:	d107      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456c:	d10f      	bne.n	800458e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e017      	b.n	80045d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d19b      	bne.n	8004508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000

080045e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045f2:	f7fd f84b 	bl	800168c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	4413      	add	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004602:	f7fd f843 	bl	800168c <HAL_GetTick>
 8004606:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004610:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00da      	lsls	r2, r3, #3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004628:	e060      	b.n	80046ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004630:	d107      	bne.n	8004642 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004640:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d050      	beq.n	80046ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800464a:	f7fd f81f 	bl	800168c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	429a      	cmp	r2, r3
 8004658:	d902      	bls.n	8004660 <SPI_WaitFifoStateUntilTimeout+0x80>
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d13d      	bne.n	80046dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800466e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004678:	d111      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004682:	d004      	beq.n	800468e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	d107      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a6:	d10f      	bne.n	80046c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e010      	b.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d196      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000000 	.word	0x20000000

0800470c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004720:	d111      	bne.n	8004746 <SPI_EndRxTransaction+0x3a>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472a:	d004      	beq.n	8004736 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d107      	bne.n	8004746 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff febd 	bl	80044d0 <SPI_WaitFlagStateUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e023      	b.n	80047b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004774:	d11d      	bne.n	80047b2 <SPI_EndRxTransaction+0xa6>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477e:	d004      	beq.n	800478a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004788:	d113      	bne.n	80047b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2200      	movs	r2, #0
 8004792:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff ff22 	bl	80045e0 <SPI_WaitFifoStateUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e000      	b.n	80047b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ff03 	bl	80045e0 <SPI_WaitFifoStateUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e027      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fe68 	bl	80044d0 <SPI_WaitFlagStateUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e014      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff fedc 	bl	80045e0 <SPI_WaitFifoStateUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e000      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e049      	b.n	80048ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fd7e 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 f9ee 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04f      	b.n	80049b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <HAL_TIM_Base_Start_IT+0xc4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d018      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d115      	bne.n	800499a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d015      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d011      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	e008      	b.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	00010007 	.word	0x00010007

080049d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0202 	mvn.w	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f905 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8f7 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f908 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8db 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8cd 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8de 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8b1 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8a3 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8b4 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f887 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f879 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f88a 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fb3a 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f914 	bl	8004db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b96:	d10e      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d107      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f907 	bl	8004dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d10e      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f838 	bl	8004c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d10e      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0220 	mvn.w	r2, #32
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8c7 	bl	8004d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3d      	ldr	r2, [pc, #244]	; (8004d80 <TIM_Base_SetConfig+0x118>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3c      	ldr	r2, [pc, #240]	; (8004d84 <TIM_Base_SetConfig+0x11c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <TIM_Base_SetConfig+0x120>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <TIM_Base_SetConfig+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2b      	ldr	r2, [pc, #172]	; (8004d84 <TIM_Base_SetConfig+0x11c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <TIM_Base_SetConfig+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <TIM_Base_SetConfig+0x128>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a27      	ldr	r2, [pc, #156]	; (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <TIM_Base_SetConfig+0x130>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <TIM_Base_SetConfig+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <TIM_Base_SetConfig+0x130>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d103      	bne.n	8004d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	615a      	str	r2, [r3, #20]
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e042      	b.n	8004e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fc fadd 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2224      	movs	r2, #36	; 0x24
 8004e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8c4 	bl	8004fa8 <UART_SetConfig>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fb80 	bl	8005538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fc07 	bl	800567c <UART_CheckIdleState>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	f040 8084 	bne.w	8004f9c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_UART_Transmit+0x28>
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e07c      	b.n	8004f9e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Transmit+0x3a>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e075      	b.n	8004f9e <HAL_UART_Transmit+0x126>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fc fbdf 	bl	800168c <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x84>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004f0c:	e02d      	b.n	8004f6a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fbfa 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e03a      	b.n	8004f9e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3302      	adds	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e008      	b.n	8004f58 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3301      	adds	r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1cb      	bne.n	8004f0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2140      	movs	r1, #64	; 0x40
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fbc6 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e006      	b.n	8004f9e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4bb1      	ldr	r3, [pc, #708]	; (8005298 <UART_SetConfig+0x2f0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4aa6      	ldr	r2, [pc, #664]	; (800529c <UART_SetConfig+0x2f4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800501a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	69f9      	ldr	r1, [r7, #28]
 8005024:	430b      	orrs	r3, r1
 8005026:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f023 010f 	bic.w	r1, r3, #15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a97      	ldr	r2, [pc, #604]	; (80052a0 <UART_SetConfig+0x2f8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d120      	bne.n	800508a <UART_SetConfig+0xe2>
 8005048:	4b96      	ldr	r3, [pc, #600]	; (80052a4 <UART_SetConfig+0x2fc>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d816      	bhi.n	8005084 <UART_SetConfig+0xdc>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0xb4>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	0800506d 	.word	0x0800506d
 8005060:	08005079 	.word	0x08005079
 8005064:	08005073 	.word	0x08005073
 8005068:	0800507f 	.word	0x0800507f
 800506c:	2301      	movs	r3, #1
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e0e7      	b.n	8005242 <UART_SetConfig+0x29a>
 8005072:	2302      	movs	r3, #2
 8005074:	76fb      	strb	r3, [r7, #27]
 8005076:	e0e4      	b.n	8005242 <UART_SetConfig+0x29a>
 8005078:	2304      	movs	r3, #4
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	e0e1      	b.n	8005242 <UART_SetConfig+0x29a>
 800507e:	2308      	movs	r3, #8
 8005080:	76fb      	strb	r3, [r7, #27]
 8005082:	e0de      	b.n	8005242 <UART_SetConfig+0x29a>
 8005084:	2310      	movs	r3, #16
 8005086:	76fb      	strb	r3, [r7, #27]
 8005088:	e0db      	b.n	8005242 <UART_SetConfig+0x29a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a86      	ldr	r2, [pc, #536]	; (80052a8 <UART_SetConfig+0x300>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d132      	bne.n	80050fa <UART_SetConfig+0x152>
 8005094:	4b83      	ldr	r3, [pc, #524]	; (80052a4 <UART_SetConfig+0x2fc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d828      	bhi.n	80050f4 <UART_SetConfig+0x14c>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x100>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080050f5 	.word	0x080050f5
 80050b0:	080050f5 	.word	0x080050f5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080050f5 	.word	0x080050f5
 80050c8:	080050e3 	.word	0x080050e3
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	080050f5 	.word	0x080050f5
 80050d8:	080050ef 	.word	0x080050ef
 80050dc:	2300      	movs	r3, #0
 80050de:	76fb      	strb	r3, [r7, #27]
 80050e0:	e0af      	b.n	8005242 <UART_SetConfig+0x29a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	76fb      	strb	r3, [r7, #27]
 80050e6:	e0ac      	b.n	8005242 <UART_SetConfig+0x29a>
 80050e8:	2304      	movs	r3, #4
 80050ea:	76fb      	strb	r3, [r7, #27]
 80050ec:	e0a9      	b.n	8005242 <UART_SetConfig+0x29a>
 80050ee:	2308      	movs	r3, #8
 80050f0:	76fb      	strb	r3, [r7, #27]
 80050f2:	e0a6      	b.n	8005242 <UART_SetConfig+0x29a>
 80050f4:	2310      	movs	r3, #16
 80050f6:	76fb      	strb	r3, [r7, #27]
 80050f8:	e0a3      	b.n	8005242 <UART_SetConfig+0x29a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6b      	ldr	r2, [pc, #428]	; (80052ac <UART_SetConfig+0x304>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d120      	bne.n	8005146 <UART_SetConfig+0x19e>
 8005104:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <UART_SetConfig+0x2fc>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	d013      	beq.n	800513a <UART_SetConfig+0x192>
 8005112:	2b30      	cmp	r3, #48	; 0x30
 8005114:	d814      	bhi.n	8005140 <UART_SetConfig+0x198>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d009      	beq.n	800512e <UART_SetConfig+0x186>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d810      	bhi.n	8005140 <UART_SetConfig+0x198>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <UART_SetConfig+0x180>
 8005122:	2b10      	cmp	r3, #16
 8005124:	d006      	beq.n	8005134 <UART_SetConfig+0x18c>
 8005126:	e00b      	b.n	8005140 <UART_SetConfig+0x198>
 8005128:	2300      	movs	r3, #0
 800512a:	76fb      	strb	r3, [r7, #27]
 800512c:	e089      	b.n	8005242 <UART_SetConfig+0x29a>
 800512e:	2302      	movs	r3, #2
 8005130:	76fb      	strb	r3, [r7, #27]
 8005132:	e086      	b.n	8005242 <UART_SetConfig+0x29a>
 8005134:	2304      	movs	r3, #4
 8005136:	76fb      	strb	r3, [r7, #27]
 8005138:	e083      	b.n	8005242 <UART_SetConfig+0x29a>
 800513a:	2308      	movs	r3, #8
 800513c:	76fb      	strb	r3, [r7, #27]
 800513e:	e080      	b.n	8005242 <UART_SetConfig+0x29a>
 8005140:	2310      	movs	r3, #16
 8005142:	76fb      	strb	r3, [r7, #27]
 8005144:	e07d      	b.n	8005242 <UART_SetConfig+0x29a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a59      	ldr	r2, [pc, #356]	; (80052b0 <UART_SetConfig+0x308>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d120      	bne.n	8005192 <UART_SetConfig+0x1ea>
 8005150:	4b54      	ldr	r3, [pc, #336]	; (80052a4 <UART_SetConfig+0x2fc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800515a:	2bc0      	cmp	r3, #192	; 0xc0
 800515c:	d013      	beq.n	8005186 <UART_SetConfig+0x1de>
 800515e:	2bc0      	cmp	r3, #192	; 0xc0
 8005160:	d814      	bhi.n	800518c <UART_SetConfig+0x1e4>
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d009      	beq.n	800517a <UART_SetConfig+0x1d2>
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d810      	bhi.n	800518c <UART_SetConfig+0x1e4>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <UART_SetConfig+0x1cc>
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d006      	beq.n	8005180 <UART_SetConfig+0x1d8>
 8005172:	e00b      	b.n	800518c <UART_SetConfig+0x1e4>
 8005174:	2300      	movs	r3, #0
 8005176:	76fb      	strb	r3, [r7, #27]
 8005178:	e063      	b.n	8005242 <UART_SetConfig+0x29a>
 800517a:	2302      	movs	r3, #2
 800517c:	76fb      	strb	r3, [r7, #27]
 800517e:	e060      	b.n	8005242 <UART_SetConfig+0x29a>
 8005180:	2304      	movs	r3, #4
 8005182:	76fb      	strb	r3, [r7, #27]
 8005184:	e05d      	b.n	8005242 <UART_SetConfig+0x29a>
 8005186:	2308      	movs	r3, #8
 8005188:	76fb      	strb	r3, [r7, #27]
 800518a:	e05a      	b.n	8005242 <UART_SetConfig+0x29a>
 800518c:	2310      	movs	r3, #16
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e057      	b.n	8005242 <UART_SetConfig+0x29a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <UART_SetConfig+0x30c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d125      	bne.n	80051e8 <UART_SetConfig+0x240>
 800519c:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <UART_SetConfig+0x2fc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051aa:	d017      	beq.n	80051dc <UART_SetConfig+0x234>
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b0:	d817      	bhi.n	80051e2 <UART_SetConfig+0x23a>
 80051b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b6:	d00b      	beq.n	80051d0 <UART_SetConfig+0x228>
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051bc:	d811      	bhi.n	80051e2 <UART_SetConfig+0x23a>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <UART_SetConfig+0x222>
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c6:	d006      	beq.n	80051d6 <UART_SetConfig+0x22e>
 80051c8:	e00b      	b.n	80051e2 <UART_SetConfig+0x23a>
 80051ca:	2300      	movs	r3, #0
 80051cc:	76fb      	strb	r3, [r7, #27]
 80051ce:	e038      	b.n	8005242 <UART_SetConfig+0x29a>
 80051d0:	2302      	movs	r3, #2
 80051d2:	76fb      	strb	r3, [r7, #27]
 80051d4:	e035      	b.n	8005242 <UART_SetConfig+0x29a>
 80051d6:	2304      	movs	r3, #4
 80051d8:	76fb      	strb	r3, [r7, #27]
 80051da:	e032      	b.n	8005242 <UART_SetConfig+0x29a>
 80051dc:	2308      	movs	r3, #8
 80051de:	76fb      	strb	r3, [r7, #27]
 80051e0:	e02f      	b.n	8005242 <UART_SetConfig+0x29a>
 80051e2:	2310      	movs	r3, #16
 80051e4:	76fb      	strb	r3, [r7, #27]
 80051e6:	e02c      	b.n	8005242 <UART_SetConfig+0x29a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <UART_SetConfig+0x2f4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d125      	bne.n	800523e <UART_SetConfig+0x296>
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <UART_SetConfig+0x2fc>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005200:	d017      	beq.n	8005232 <UART_SetConfig+0x28a>
 8005202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005206:	d817      	bhi.n	8005238 <UART_SetConfig+0x290>
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d00b      	beq.n	8005226 <UART_SetConfig+0x27e>
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005212:	d811      	bhi.n	8005238 <UART_SetConfig+0x290>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <UART_SetConfig+0x278>
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d006      	beq.n	800522c <UART_SetConfig+0x284>
 800521e:	e00b      	b.n	8005238 <UART_SetConfig+0x290>
 8005220:	2300      	movs	r3, #0
 8005222:	76fb      	strb	r3, [r7, #27]
 8005224:	e00d      	b.n	8005242 <UART_SetConfig+0x29a>
 8005226:	2302      	movs	r3, #2
 8005228:	76fb      	strb	r3, [r7, #27]
 800522a:	e00a      	b.n	8005242 <UART_SetConfig+0x29a>
 800522c:	2304      	movs	r3, #4
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e007      	b.n	8005242 <UART_SetConfig+0x29a>
 8005232:	2308      	movs	r3, #8
 8005234:	76fb      	strb	r3, [r7, #27]
 8005236:	e004      	b.n	8005242 <UART_SetConfig+0x29a>
 8005238:	2310      	movs	r3, #16
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e001      	b.n	8005242 <UART_SetConfig+0x29a>
 800523e:	2310      	movs	r3, #16
 8005240:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <UART_SetConfig+0x2f4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	f040 809f 	bne.w	800538c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800524e:	7efb      	ldrb	r3, [r7, #27]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d837      	bhi.n	80052c4 <UART_SetConfig+0x31c>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x2b4>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	080052c5 	.word	0x080052c5
 8005264:	08005289 	.word	0x08005289
 8005268:	080052c5 	.word	0x080052c5
 800526c:	0800528f 	.word	0x0800528f
 8005270:	080052c5 	.word	0x080052c5
 8005274:	080052c5 	.word	0x080052c5
 8005278:	080052c5 	.word	0x080052c5
 800527c:	080052bd 	.word	0x080052bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd fd6e 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8005284:	6178      	str	r0, [r7, #20]
        break;
 8005286:	e022      	b.n	80052ce <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <UART_SetConfig+0x310>)
 800528a:	617b      	str	r3, [r7, #20]
        break;
 800528c:	e01f      	b.n	80052ce <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528e:	f7fd fcd1 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8005292:	6178      	str	r0, [r7, #20]
        break;
 8005294:	e01b      	b.n	80052ce <UART_SetConfig+0x326>
 8005296:	bf00      	nop
 8005298:	cfff69f3 	.word	0xcfff69f3
 800529c:	40008000 	.word	0x40008000
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40004400 	.word	0x40004400
 80052ac:	40004800 	.word	0x40004800
 80052b0:	40004c00 	.word	0x40004c00
 80052b4:	40005000 	.word	0x40005000
 80052b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c0:	617b      	str	r3, [r7, #20]
        break;
 80052c2:	e004      	b.n	80052ce <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	76bb      	strb	r3, [r7, #26]
        break;
 80052cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8119 	beq.w	8005508 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	4a95      	ldr	r2, [pc, #596]	; (8005530 <UART_SetConfig+0x588>)
 80052dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e0:	461a      	mov	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d305      	bcc.n	8005306 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	d902      	bls.n	800530c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	76bb      	strb	r3, [r7, #26]
 800530a:	e0fd      	b.n	8005508 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4618      	mov	r0, r3
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	4a85      	ldr	r2, [pc, #532]	; (8005530 <UART_SetConfig+0x588>)
 800531a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531e:	b29a      	uxth	r2, r3
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f7fa ff6a 	bl	80001fc <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	020b      	lsls	r3, r1, #8
 800533a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800533e:	0202      	lsls	r2, r0, #8
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6849      	ldr	r1, [r1, #4]
 8005344:	0849      	lsrs	r1, r1, #1
 8005346:	4608      	mov	r0, r1
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	1814      	adds	r4, r2, r0
 800534e:	eb43 0501 	adc.w	r5, r3, r1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	4620      	mov	r0, r4
 800535e:	4629      	mov	r1, r5
 8005360:	f7fa ff4c 	bl	80001fc <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005372:	d308      	bcc.n	8005386 <UART_SetConfig+0x3de>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d204      	bcs.n	8005386 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e0c0      	b.n	8005508 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	76bb      	strb	r3, [r7, #26]
 800538a:	e0bd      	b.n	8005508 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	d164      	bne.n	8005460 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005396:	7efb      	ldrb	r3, [r7, #27]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d828      	bhi.n	80053ee <UART_SetConfig+0x446>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x3fc>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	080053ef 	.word	0x080053ef
 80053c0:	080053ef 	.word	0x080053ef
 80053c4:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fd fcca 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80053cc:	6178      	str	r0, [r7, #20]
        break;
 80053ce:	e013      	b.n	80053f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fd fcdc 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 80053d4:	6178      	str	r0, [r7, #20]
        break;
 80053d6:	e00f      	b.n	80053f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b56      	ldr	r3, [pc, #344]	; (8005534 <UART_SetConfig+0x58c>)
 80053da:	617b      	str	r3, [r7, #20]
        break;
 80053dc:	e00c      	b.n	80053f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fd fc29 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80053e2:	6178      	str	r0, [r7, #20]
        break;
 80053e4:	e008      	b.n	80053f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	617b      	str	r3, [r7, #20]
        break;
 80053ec:	e004      	b.n	80053f8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	76bb      	strb	r3, [r7, #26]
        break;
 80053f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 8084 	beq.w	8005508 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <UART_SetConfig+0x588>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	461a      	mov	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005412:	005a      	lsls	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	441a      	add	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d916      	bls.n	800545a <UART_SetConfig+0x4b2>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d212      	bcs.n	800545a <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f023 030f 	bic.w	r3, r3, #15
 800543c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	b29a      	uxth	r2, r3
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	4313      	orrs	r3, r2
 800544e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	89fa      	ldrh	r2, [r7, #14]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	e056      	b.n	8005508 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	76bb      	strb	r3, [r7, #26]
 800545e:	e053      	b.n	8005508 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005460:	7efb      	ldrb	r3, [r7, #27]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d827      	bhi.n	80054b6 <UART_SetConfig+0x50e>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x4c4>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	08005491 	.word	0x08005491
 8005470:	08005499 	.word	0x08005499
 8005474:	080054a1 	.word	0x080054a1
 8005478:	080054b7 	.word	0x080054b7
 800547c:	080054a7 	.word	0x080054a7
 8005480:	080054b7 	.word	0x080054b7
 8005484:	080054b7 	.word	0x080054b7
 8005488:	080054b7 	.word	0x080054b7
 800548c:	080054af 	.word	0x080054af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fd fc66 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8005494:	6178      	str	r0, [r7, #20]
        break;
 8005496:	e013      	b.n	80054c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005498:	f7fd fc78 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 800549c:	6178      	str	r0, [r7, #20]
        break;
 800549e:	e00f      	b.n	80054c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <UART_SetConfig+0x58c>)
 80054a2:	617b      	str	r3, [r7, #20]
        break;
 80054a4:	e00c      	b.n	80054c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fd fbc5 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80054aa:	6178      	str	r0, [r7, #20]
        break;
 80054ac:	e008      	b.n	80054c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b2:	617b      	str	r3, [r7, #20]
        break;
 80054b4:	e004      	b.n	80054c0 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	76bb      	strb	r3, [r7, #26]
        break;
 80054be:	bf00      	nop
    }

    if (pclk != 0U)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	4a19      	ldr	r2, [pc, #100]	; (8005530 <UART_SetConfig+0x588>)
 80054cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054d0:	461a      	mov	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	441a      	add	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d909      	bls.n	8005504 <UART_SetConfig+0x55c>
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f6:	d205      	bcs.n	8005504 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	e001      	b.n	8005508 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005524:	7ebb      	ldrb	r3, [r7, #26]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bdb0      	pop	{r4, r5, r7, pc}
 800552e:	bf00      	nop
 8005530:	08005b7c 	.word	0x08005b7c
 8005534:	00f42400 	.word	0x00f42400

08005538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005636:	d10a      	bne.n	800564e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
  }
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af02      	add	r7, sp, #8
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800568c:	f7fb fffe 	bl	800168c <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d10e      	bne.n	80056be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f82f 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e025      	b.n	800570a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d10e      	bne.n	80056ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f819 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e00f      	b.n	800570a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b09c      	sub	sp, #112	; 0x70
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005722:	e0a9      	b.n	8005878 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	f000 80a5 	beq.w	8005878 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7fb ffad 	bl	800168c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <UART_WaitOnFlagUntilTimeout+0x32>
 800573e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005740:	2b00      	cmp	r3, #0
 8005742:	d140      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005758:	667b      	str	r3, [r7, #100]	; 0x64
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005764:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	663b      	str	r3, [r7, #96]	; 0x60
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005796:	64ba      	str	r2, [r7, #72]	; 0x48
 8005798:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800579c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e5      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e069      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d051      	beq.n	8005878 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e2:	d149      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005802:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	613b      	str	r3, [r7, #16]
   return(result);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	66bb      	str	r3, [r7, #104]	; 0x68
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005840:	623a      	str	r2, [r7, #32]
 8005842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	69f9      	ldr	r1, [r7, #28]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	61bb      	str	r3, [r7, #24]
   return(result);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e010      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4013      	ands	r3, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	bf0c      	ite	eq
 8005888:	2301      	moveq	r3, #1
 800588a:	2300      	movne	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	429a      	cmp	r2, r3
 8005894:	f43f af46 	beq.w	8005724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3770      	adds	r7, #112	; 0x70
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e027      	b.n	8005908 <HAL_UARTEx_DisableFifoMode+0x66>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e02d      	b.n	8005988 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2224      	movs	r2, #36	; 0x24
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f84f 	bl	8005a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e02d      	b.n	8005a04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f811 	bl	8005a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a2c:	e031      	b.n	8005a92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a2e:	2308      	movs	r3, #8
 8005a30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a32:	2308      	movs	r3, #8
 8005a34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	0e5b      	lsrs	r3, r3, #25
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	0f5b      	lsrs	r3, r3, #29
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	7b3a      	ldrb	r2, [r7, #12]
 8005a5a:	4911      	ldr	r1, [pc, #68]	; (8005aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a5c:	5c8a      	ldrb	r2, [r1, r2]
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a62:	7b3a      	ldrb	r2, [r7, #12]
 8005a64:	490f      	ldr	r1, [pc, #60]	; (8005aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8005a66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	7b7a      	ldrb	r2, [r7, #13]
 8005a78:	4909      	ldr	r1, [pc, #36]	; (8005aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a7a:	5c8a      	ldrb	r2, [r1, r2]
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a80:	7b7a      	ldrb	r2, [r7, #13]
 8005a82:	4908      	ldr	r1, [pc, #32]	; (8005aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8005a84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	08005b94 	.word	0x08005b94
 8005aa4:	08005b9c 	.word	0x08005b9c

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4d0b      	ldr	r5, [pc, #44]	; (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	; (8005aec <__libc_init_array+0x44>)
 8005abc:	f000 f82e 	bl	8005b1c <_init>
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	08005bac 	.word	0x08005bac
 8005ae4:	08005bac 	.word	0x08005bac
 8005ae8:	08005bac 	.word	0x08005bac
 8005aec:	08005bb0 	.word	0x08005bb0

08005af0 <memcpy>:
 8005af0:	440a      	add	r2, r1
 8005af2:	4291      	cmp	r1, r2
 8005af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af8:	d100      	bne.n	8005afc <memcpy+0xc>
 8005afa:	4770      	bx	lr
 8005afc:	b510      	push	{r4, lr}
 8005afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b06:	4291      	cmp	r1, r2
 8005b08:	d1f9      	bne.n	8005afe <memcpy+0xe>
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr
