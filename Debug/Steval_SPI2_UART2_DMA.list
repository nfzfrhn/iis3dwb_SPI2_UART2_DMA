
Steval_SPI2_UART2_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080077b0  080077b0  000177b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007868  08007868  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007870  08007870  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000074  080078ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080078ec  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c72  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305c  00000000  00000000  00041d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00044d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00046380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a1a  00000000  00000000  00047870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187a9  00000000  00000000  0007a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f37f  00000000  00000000  00092a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c1db2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  001c1e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007794 	.word	0x08007794

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08007794 	.word	0x08007794

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96e 	b.w	8000e6c <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468c      	mov	ip, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8083 	bne.w	8000cbe <__udivmoddi4+0x116>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4617      	mov	r7, r2
 8000bbc:	d947      	bls.n	8000c4e <__udivmoddi4+0xa6>
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	b142      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	f1c2 0020 	rsb	r0, r2, #32
 8000bc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4097      	lsls	r7, r2
 8000bd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000be0:	fa1f fe87 	uxth.w	lr, r7
 8000be4:	fb08 c116 	mls	r1, r8, r6, ip
 8000be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bec:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 8119 	bcs.w	8000e30 <__udivmoddi4+0x288>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8116 	bls.w	8000e30 <__udivmoddi4+0x288>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	443b      	add	r3, r7
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	193c      	adds	r4, r7, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8105 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f240 8102 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c30:	3802      	subs	r0, #2
 8000c32:	443c      	add	r4, r7
 8000c34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c38:	eba4 040e 	sub.w	r4, r4, lr
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xaa>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d150      	bne.n	8000cfc <__udivmoddi4+0x154>
 8000c5a:	1bcb      	subs	r3, r1, r7
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f f887 	uxth.w	r8, r7
 8000c64:	2601      	movs	r6, #1
 8000c66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6a:	0c21      	lsrs	r1, r4, #16
 8000c6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c74:	fb08 f30c 	mul.w	r3, r8, ip
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000c7c:	1879      	adds	r1, r7, r1
 8000c7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0xe2>
 8000c84:	428b      	cmp	r3, r1
 8000c86:	f200 80e9 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000c8a:	4684      	mov	ip, r0
 8000c8c:	1ac9      	subs	r1, r1, r3
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c9c:	fb08 f800 	mul.w	r8, r8, r0
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x10c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x10a>
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	f200 80d9 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	eba4 0408 	sub.w	r4, r4, r8
 8000cb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbc:	e7bf      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x12e>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	f000 80b1 	beq.w	8000e2a <__udivmoddi4+0x282>
 8000cc8:	2600      	movs	r6, #0
 8000cca:	e9c5 0100 	strd	r0, r1, [r5]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f683 	clz	r6, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d14a      	bne.n	8000d74 <__udivmoddi4+0x1cc>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0x140>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80b8 	bhi.w	8000e58 <__udivmoddi4+0x2b0>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0103 	sbc.w	r1, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d0a8      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000cf6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f603 	lsr.w	r6, r0, r3
 8000d04:	4097      	lsls	r7, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0e:	40d9      	lsrs	r1, r3
 8000d10:	4330      	orrs	r0, r6
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d18:	fa1f f887 	uxth.w	r8, r7
 8000d1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb06 f108 	mul.w	r1, r6, r8
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x19c>
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d36:	f080 808d 	bcs.w	8000e54 <__udivmoddi4+0x2ac>
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	f240 808a 	bls.w	8000e54 <__udivmoddi4+0x2ac>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	443b      	add	r3, r7
 8000d44:	1a5b      	subs	r3, r3, r1
 8000d46:	b281      	uxth	r1, r0
 8000d48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb00 f308 	mul.w	r3, r0, r8
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d62:	d273      	bcs.n	8000e4c <__udivmoddi4+0x2a4>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d971      	bls.n	8000e4c <__udivmoddi4+0x2a4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4439      	add	r1, r7
 8000d6c:	1acb      	subs	r3, r1, r3
 8000d6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d72:	e778      	b.n	8000c66 <__udivmoddi4+0xbe>
 8000d74:	f1c6 0c20 	rsb	ip, r6, #32
 8000d78:	fa03 f406 	lsl.w	r4, r3, r6
 8000d7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d80:	431c      	orrs	r4, r3
 8000d82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d86:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d92:	431f      	orrs	r7, r3
 8000d94:	0c3b      	lsrs	r3, r7, #16
 8000d96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9a:	fa1f f884 	uxth.w	r8, r4
 8000d9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000da6:	fb09 fa08 	mul.w	sl, r9, r8
 8000daa:	458a      	cmp	sl, r1
 8000dac:	fa02 f206 	lsl.w	r2, r2, r6
 8000db0:	fa00 f306 	lsl.w	r3, r0, r6
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x220>
 8000db6:	1861      	adds	r1, r4, r1
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	d248      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	d946      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4421      	add	r1, r4
 8000dc8:	eba1 010a 	sub.w	r1, r1, sl
 8000dcc:	b2bf      	uxth	r7, r7
 8000dce:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dda:	fb00 f808 	mul.w	r8, r0, r8
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x24a>
 8000de2:	19e7      	adds	r7, r4, r7
 8000de4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de8:	d22e      	bcs.n	8000e48 <__udivmoddi4+0x2a0>
 8000dea:	45b8      	cmp	r8, r7
 8000dec:	d92c      	bls.n	8000e48 <__udivmoddi4+0x2a0>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4427      	add	r7, r4
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	eba7 0708 	sub.w	r7, r7, r8
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	454f      	cmp	r7, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	4649      	mov	r1, r9
 8000e04:	d31a      	bcc.n	8000e3c <__udivmoddi4+0x294>
 8000e06:	d017      	beq.n	8000e38 <__udivmoddi4+0x290>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x27a>
 8000e0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e16:	40f2      	lsrs	r2, r6
 8000e18:	ea4c 0202 	orr.w	r2, ip, r2
 8000e1c:	40f7      	lsrs	r7, r6
 8000e1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	462e      	mov	r6, r5
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	e70b      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e30:	4606      	mov	r6, r0
 8000e32:	e6e9      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fd      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e38:	4543      	cmp	r3, r8
 8000e3a:	d2e5      	bcs.n	8000e08 <__udivmoddi4+0x260>
 8000e3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e40:	eb69 0104 	sbc.w	r1, r9, r4
 8000e44:	3801      	subs	r0, #1
 8000e46:	e7df      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e7d2      	b.n	8000df2 <__udivmoddi4+0x24a>
 8000e4c:	4660      	mov	r0, ip
 8000e4e:	e78d      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e50:	4681      	mov	r9, r0
 8000e52:	e7b9      	b.n	8000dc8 <__udivmoddi4+0x220>
 8000e54:	4666      	mov	r6, ip
 8000e56:	e775      	b.n	8000d44 <__udivmoddi4+0x19c>
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e74a      	b.n	8000cf2 <__udivmoddi4+0x14a>
 8000e5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e60:	4439      	add	r1, r7
 8000e62:	e713      	b.n	8000c8c <__udivmoddi4+0xe4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	e724      	b.n	8000cb4 <__udivmoddi4+0x10c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <reverse>:

//Function:	Reverses a string
//para_1:	String to be reversed
//para_2:	Length of the string to be reversed
//return:	void
void reverse(char* str, int len){
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
	int j = len -1;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
	int tmp;
	while(i < j){
 8000e84:	e018      	b.n	8000eb8 <reverse+0x48>
		tmp = str[i];										//Store the i-element of string in tmp
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];									//Store the j-element of the string in the i-element of the string
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	441a      	add	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
		str[j] = tmp;										//Store tmp in the j-element of the string
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	701a      	strb	r2, [r3, #0]
		i++;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
		j--;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
	while(i < j){
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbe2      	blt.n	8000e86 <reverse+0x16>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <itostr>:
//Function:	Converts an integer to string
//para_1:	Integer to be converted
//para_2:	String which the integer is converted to
//para_3:	Number of digits required in output
//return:	void
int itostr(int x, char str[], int d){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
	while(x){
 8000ee0:	e01d      	b.n	8000f1e <itostr+0x4e>
		str[i++] = (x % 10) + '0';
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <itostr+0x8c>)
 8000ee6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eea:	1099      	asrs	r1, r3, #2
 8000eec:	17d3      	asrs	r3, r2, #31
 8000eee:	1ac9      	subs	r1, r1, r3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	1ad1      	subs	r1, r2, r3
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	6179      	str	r1, [r7, #20]
 8000f02:	4619      	mov	r1, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	440b      	add	r3, r1
 8000f08:	3230      	adds	r2, #48	; 0x30
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <itostr+0x8c>)
 8000f12:	fb82 1203 	smull	r1, r2, r2, r3
 8000f16:	1092      	asrs	r2, r2, #2
 8000f18:	17db      	asrs	r3, r3, #31
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	60fb      	str	r3, [r7, #12]
	while(x){
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1de      	bne.n	8000ee2 <itostr+0x12>
	}
	while(i < d){
 8000f24:	e007      	b.n	8000f36 <itostr+0x66>
		str[i++] = '0';
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	617a      	str	r2, [r7, #20]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	701a      	strb	r2, [r3, #0]
	while(i < d){
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbf3      	blt.n	8000f26 <itostr+0x56>
	}
	reverse(str, i);
 8000f3e:	6979      	ldr	r1, [r7, #20]
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f7ff ff95 	bl	8000e70 <reverse>
	str[i] = '\0';
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	return i;
 8000f50:	697b      	ldr	r3, [r7, #20]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	66666667 	.word	0x66666667

08000f60 <ftoa>:
//Function:	Converts a float to a string
//para_1:	Float to be converted
//para_2:	String which the float is converted to
//para_3:	Number of digits behind the point
//return:	void
void ftoa(float n, char* res, int afterpoint){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f6a:	60b8      	str	r0, [r7, #8]
 8000f6c:	6079      	str	r1, [r7, #4]
	int ipart = (int)n;										//Integer-part of float n stored in ipart
 8000f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f76:	ee17 3a90 	vmov	r3, s15
 8000f7a:	61fb      	str	r3, [r7, #28]
	float fpart = n - (float)ipart;							//Float-part of float n stored in fpart
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
	int i = itostr(ipart, res, 0);							//Convert the integer-part to string
 8000f92:	2200      	movs	r2, #0
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	69f8      	ldr	r0, [r7, #28]
 8000f98:	f7ff ff9a 	bl	8000ed0 <itostr>
 8000f9c:	6178      	str	r0, [r7, #20]
	if(afterpoint != 0){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d030      	beq.n	8001006 <ftoa+0xa6>
		res[i] = '.';
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	222e      	movs	r2, #46	; 0x2e
 8000fac:	701a      	strb	r2, [r3, #0]
		fpart = fpart * pow(10, afterpoint);
 8000fae:	69b8      	ldr	r0, [r7, #24]
 8000fb0:	f7ff fa8a 	bl	80004c8 <__aeabi_f2d>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	460d      	mov	r5, r1
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fa73 	bl	80004a4 <__aeabi_i2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	ec43 2b11 	vmov	d1, r2, r3
 8000fc6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001010 <ftoa+0xb0>
 8000fca:	f005 fc2d 	bl	8006828 <pow>
 8000fce:	ec53 2b10 	vmov	r2, r3, d0
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff facf 	bl	8000578 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fd79 	bl	8000ad8 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]
		itostr((int)fpart, (res + i + 1), afterpoint);
 8000fea:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	ee17 0a90 	vmov	r0, s15
 8001002:	f7ff ff65 	bl	8000ed0 <itostr>
	}
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bdb0      	pop	{r4, r5, r7, pc}
 800100e:	bf00      	nop
 8001010:	00000000 	.word	0x00000000
 8001014:	40240000 	.word	0x40240000

08001018 <IIS3DWB_READ_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_READ_REG(void *handle, uint8_t address, uint8_t *rx_data, uint16_t length){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	461a      	mov	r2, r3
 8001024:	460b      	mov	r3, r1
 8001026:	72fb      	strb	r3, [r7, #11]
 8001028:	4613      	mov	r3, r2
 800102a:	813b      	strh	r3, [r7, #8]
	address = address | 0x80;	//Set Read Bit in Address
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001032:	b2db      	uxtb	r3, r3
 8001034:	72fb      	strb	r3, [r7, #11]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8001036:	f000 f863 	bl	8001100 <IIS3DWB_CS_LOW>
	//Read Register
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, HAL_MAX_DELAY)){
 800103a:	f107 010b 	add.w	r1, r7, #11
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2201      	movs	r2, #1
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f003 fc12 	bl	800486e <HAL_SPI_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <IIS3DWB_READ_REG+0x3e>
		return IIS3DWB_ERROR;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e012      	b.n	800107c <IIS3DWB_READ_REG+0x64>
	}
	if(HAL_OK != HAL_SPI_Receive(handle, rx_data, length, HAL_MAX_DELAY)){
 8001056:	893a      	ldrh	r2, [r7, #8]
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f003 fd73 	bl	8004b4a <HAL_SPI_Receive>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <IIS3DWB_READ_REG+0x58>
		return IIS3DWB_ERROR;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e005      	b.n	800107c <IIS3DWB_READ_REG+0x64>
	}
	HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f001 f97d 	bl	8002370 <HAL_Delay>
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 8001076:	f000 f833 	bl	80010e0 <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <IIS3DWB_WRITE_REG>:
//para_1:	Bus-handler; spi_iis3dwb (Pointer)
//para_2:	Register address/target
//para_3:	To be transmitted data
//para_4:	Length of the to be transmitted data in Byte
//return:	State of IIS3DWB
int32_t IIS3DWB_WRITE_REG(void *handle, uint8_t address, uint8_t *tx_data, uint16_t length){
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	461a      	mov	r2, r3
 8001090:	460b      	mov	r3, r1
 8001092:	72fb      	strb	r3, [r7, #11]
 8001094:	4613      	mov	r3, r2
 8001096:	813b      	strh	r3, [r7, #8]
	IIS3DWB_CS_LOW();	//Setting the CS-signal active = LOW
 8001098:	f000 f832 	bl	8001100 <IIS3DWB_CS_LOW>
	//Transmitting the register address
	if(HAL_OK != HAL_SPI_Transmit(handle, &address, 1, IIS3DWB_SPI_TIMEOUT)){
 800109c:	f107 010b 	add.w	r1, r7, #11
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	2201      	movs	r2, #1
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f003 fbe1 	bl	800486e <HAL_SPI_Transmit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <IIS3DWB_WRITE_REG+0x34>
		return IIS3DWB_ERROR;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e00f      	b.n	80010d8 <IIS3DWB_WRITE_REG+0x54>
	}
	//Transmitting the data
	if(HAL_OK != HAL_SPI_Transmit(handle, tx_data, length, IIS3DWB_SPI_TIMEOUT)){
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f003 fbd4 	bl	800486e <HAL_SPI_Transmit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <IIS3DWB_WRITE_REG+0x4e>
		return IIS3DWB_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	e002      	b.n	80010d8 <IIS3DWB_WRITE_REG+0x54>
	}
	IIS3DWB_CS_HIGH();	//Setting the CS-signal deactive = HIGH
 80010d2:	f000 f805 	bl	80010e0 <IIS3DWB_CS_HIGH>
	return IIS3DWB_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <IIS3DWB_CS_HIGH>:

//Function:	Sets the GPIO-PIN responsible for the CS-signal to HIGH (LOW-ACTIVE!)
void IIS3DWB_CS_HIGH(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_SET);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <IIS3DWB_CS_HIGH+0x18>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <IIS3DWB_CS_HIGH+0x1c>)
 80010ea:	8811      	ldrh	r1, [r2, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fdc0 	bl	8002c74 <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000104 	.word	0x20000104
 80010fc:	20000092 	.word	0x20000092

08001100 <IIS3DWB_CS_LOW>:
//void IIS3DWB_3_4_SEL_HIGH(){
//	HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
//}

//Function:	Sets the GPIO-PIN responsible for the CS-signal to LOW (LOW-ACTIVE!)
void IIS3DWB_CS_LOW(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_gpiox_iis3dwb, cs_gpio_iis3dwb, GPIO_PIN_RESET);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <IIS3DWB_CS_LOW+0x18>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <IIS3DWB_CS_LOW+0x1c>)
 800110a:	8811      	ldrh	r1, [r2, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fdb0 	bl	8002c74 <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000104 	.word	0x20000104
 800111c:	20000092 	.word	0x20000092

08001120 <IIS3DWB_SET_CONFIG>:
void static IIS3DWB_SET_CONFIG();
extern UART_HandleTypeDef huart2;

/* Functions ------------------------------------------------------------------------ */
//Function:	Set-Function for the configuration of the IIS3DWB-sensor
void static IIS3DWB_SET_CONFIG(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
	//init driver interface
	//neccessary for iis3dwb driver (iis3dwb_reg)
	stmdev_ctx_t dev_ctx;
	uint8_t reg0;

	dev_ctx.read_reg = IIS3DWB_READ_REG;
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <IIS3DWB_SET_CONFIG+0x12c>)
 8001128:	60fb      	str	r3, [r7, #12]
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <IIS3DWB_SET_CONFIG+0x130>)
 800112c:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &spi_iis3dwb;
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <IIS3DWB_SET_CONFIG+0x134>)
 8001130:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, &iis3dwb_deviceID, sizeof(iis3dwb_deviceID), HAL_MAX_DELAY);
		HAL_Delay(1000);
	}*/

	//Get device ID
	iis3dwb_device_id_get(&dev_ctx, &iis3dwb_deviceID);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4948      	ldr	r1, [pc, #288]	; (8001258 <IIS3DWB_SET_CONFIG+0x138>)
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fad0 	bl	80016de <iis3dwb_device_id_get>
	//reset software in ctrl3_c
	//iis3dwb_reset_set(&dev_ctx, PROPERTY_ENABLE);
	iis3dwb_reset_set(&dev_ctx, 1);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2101      	movs	r1, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fadb 	bl	8001700 <iis3dwb_reset_set>
	//continue after reset is finished
	do{
		iis3dwb_reset_get(&dev_ctx, &rst);
 800114a:	f107 0216 	add.w	r2, r7, #22
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 faf9 	bl	800174c <iis3dwb_reset_get>
	}while(rst);
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f4      	bne.n	800114a <IIS3DWB_SET_CONFIG+0x2a>
//    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
//    pin_int1_route.int1_ctrl.int1_drdy_xl = 1;
//    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);

    //Select all 3-axis
    iis3dwb_xl_axis_selection_set(&dev_ctx, IIS3DWB_ENABLE_ALL);
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa24 	bl	80015b4 <iis3dwb_xl_axis_selection_set>

    // 3. Enables accelerometer:IIS3DWB_CTRL1_XL bit 7:5 XL_EN[2:0]
    /*(000: Power-down (default);
    101: accelerometer enabled;)
    All other configurations are not allowed*/
    iis3dwb_read_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 800116c:	1dfa      	adds	r2, r7, #7
 800116e:	f107 0008 	add.w	r0, r7, #8
 8001172:	2301      	movs	r3, #1
 8001174:	2110      	movs	r1, #16
 8001176:	f000 f963 	bl	8001440 <iis3dwb_read_reg>
    reg0 |= 0xA0;	//1010 0000
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	71fb      	strb	r3, [r7, #7]
    iis3dwb_write_reg(&dev_ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8001184:	1dfa      	adds	r2, r7, #7
 8001186:	f107 0008 	add.w	r0, r7, #8
 800118a:	2301      	movs	r3, #1
 800118c:	2110      	movs	r1, #16
 800118e:	f000 f96f 	bl	8001470 <iis3dwb_write_reg>

    // 4. IIS3DWB_CTRL4_C bit 2
    /* Disable I2C*/
    iis3dwb_i2c_interface_set(&dev_ctx, IIS3DWB_I2C_DISABLE);
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fb94 	bl	80018c6 <iis3dwb_i2c_interface_set>

    //5. Set fifo in continuous / stream mode 110
    //110: Continuous mode: if the FIFO is full, the new sample overwrites the older one;
    iis3dwb_fifo_mode_set(&dev_ctx, IIS3DWB_STREAM_MODE);
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2106      	movs	r1, #6
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fc2c 	bl	8001a02 <iis3dwb_fifo_mode_set>

    //6. Set watermark 128
    //IIS3DWB_FIFO_CTRL1 7:0 IIS3DWB_FIFO_CTRL2 bit 0
    uint8_t IIS3DWB_WTM_LEVEL = 128;
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	75fb      	strb	r3, [r7, #23]
    iis3dwb_fifo_watermark_set(&dev_ctx, IIS3DWB_WTM_LEVEL);
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fbc6 	bl	800194a <iis3dwb_fifo_watermark_set>
    //7. Data Ready pulse mode
    //COUNTER_BDR_REG1 (0Bh) bit 7 dataready_pulsed
    //0: Data-ready latched mode
    //1: Data-ready pulsed mode (the data ready pulses are 18.75 �s long)
    //iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_PULSED);			//Original config
    iis3dwb_data_ready_mode_set(&dev_ctx, IIS3DWB_DRDY_LATCHED );			//Changed to be observed
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fa64 	bl	8001692 <iis3dwb_data_ready_mode_set>

    //8. Set full scale
    /* CTRL1_XL (10h) bit 3:2  00 (default) �2 g  01 �16 g 10 �4 g 11 �8 g*/
    // set scale to +- 2g
    iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_2g);
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f97d 	bl	80014d0 <iis3dwb_xl_full_scale_set>
    	IIS3DWB_LP_ODR_DIV_100            = 0x84,
    	IIS3DWB_LP_ODR_DIV_200            = 0x85,
    	IIS3DWB_LP_ODR_DIV_400            = 0x86,
    	IIS3DWB_LP_ODR_DIV_800            = 0x87,
    **/
    iis3dwb_xl_hp_path_on_out_set(&dev_ctx,IIS3DWB_LP_ODR_DIV_20);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2182      	movs	r1, #130	; 0x82
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb1a 	bl	8001816 <iis3dwb_xl_hp_path_on_out_set>
     * INT1_FIFO_TH Enables FIFO threshold interrupt on INT1 pin.
     *
     * MD1_CFG (5Eh) Functions routing on INT1 register (r/w) disabled
     *  */
    iis3dwb_pin_int1_route_t pin_int1_route;
    *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
    *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	3301      	adds	r3, #1
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
    pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 80011f0:	793b      	ldrb	r3, [r7, #4]
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	713b      	strb	r3, [r7, #4]
    iis3dwb_pin_int1_route_set(&dev_ctx, &pin_int1_route);
 80011f8:	1d3a      	adds	r2, r7, #4
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fb86 	bl	8001912 <iis3dwb_pin_int1_route_set>
    //11. Enable writing to FIFO
    /* FIFO_CTRL3 (09h) bit 3:0 Selects Batch Data Rate (write frequency in FIFO) for accelerometer data.
     * (0000: Accelerometer not batched in FIFO (default);
     * 1010: 26667 Hz;
     * */
    iis3dwb_fifo_xl_batch_set(&dev_ctx, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	210a      	movs	r1, #10
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fbd2 	bl	80019b6 <iis3dwb_fifo_xl_batch_set>


	//Register CTRL3_C bit BDU: Disable block data update
	iis3dwb_block_data_update_set(&dev_ctx, PROPERTY_DISABLE);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f9a5 	bl	8001568 <iis3dwb_block_data_update_set>

	//set output data rate - enable acc
	iis3dwb_xl_data_rate_set(&dev_ctx, IIS3DWB_XL_ODR_26k7Hz);
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2105      	movs	r1, #5
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f979 	bl	800151c <iis3dwb_xl_data_rate_set>

	//enable auto increment
	iis3dwb_auto_increment_set(&dev_ctx, PROPERTY_ENABLE);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2101      	movs	r1, #1
 8001230:	4618      	mov	r0, r3
 8001232:	f000 faa4 	bl	800177e <iis3dwb_auto_increment_set>
	//enable fifo bypass mode
	//iis3dwb_fifo_mode_set(&dev_ctx,IIS3DWB_BYPASS_MODE);
	//use LP filter
	iis3dwb_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fac4 	bl	80017ca <iis3dwb_xl_filter_lp2_set>
	//enable all axis
	//iis3dwb_xl_axis_selection_set(&dev_ctx,IIS3DWB_ENABLE_ALL);
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08001019 	.word	0x08001019
 8001250:	08001085 	.word	0x08001085
 8001254:	20000098 	.word	0x20000098
 8001258:	20000090 	.word	0x20000090

0800125c <IIS3DWB_MEASSURE>:

void IIS3DWB_MEASSURE(){
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0
	int16_t tmp_1[3] = { 0 };
 8001262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	809a      	strh	r2, [r3, #4]
	int16_t tmp_2 = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	86fb      	strh	r3, [r7, #54]	; 0x36

	char msg_0[10] = {'\0'};
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	809a      	strh	r2, [r3, #4]
	msg_0[9] = '\n';
 800127e:	230a      	movs	r3, #10
 8001280:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	char msg_1[10] = {'\0'};
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	809a      	strh	r2, [r3, #4]
	msg_1[9] = '\n';
 8001292:	230a      	movs	r3, #10
 8001294:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	char msg_2[10] = {'\0'};
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	809a      	strh	r2, [r3, #4]
	msg_2[9] = '\n';
 80012a6:	230a      	movs	r3, #10
 80012a8:	757b      	strb	r3, [r7, #21]

	//iis3dwb_config();
	//init driver interface
	//neccessary for iis3dwb driver (iis3dwb_reg)
	stmdev_ctx_t dev_ctx;
	dev_ctx.read_reg = IIS3DWB_READ_REG;
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <IIS3DWB_MEASSURE+0x17c>)
 80012ac:	607b      	str	r3, [r7, #4]
	dev_ctx.write_reg = IIS3DWB_WRITE_REG;
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <IIS3DWB_MEASSURE+0x180>)
 80012b0:	603b      	str	r3, [r7, #0]
	dev_ctx.handle = &spi_iis3dwb;
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <IIS3DWB_MEASSURE+0x184>)
 80012b4:	60bb      	str	r3, [r7, #8]

	//get data ready flag
	iis3dwb_xl_flag_data_ready_get(&dev_ctx, &iis3dwb_dataReady);
 80012b6:	463b      	mov	r3, r7
 80012b8:	494a      	ldr	r1, [pc, #296]	; (80013e4 <IIS3DWB_MEASSURE+0x188>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9bf 	bl	800163e <iis3dwb_xl_flag_data_ready_get>

	//check if acceleration data is ready -> read data
	if(iis3dwb_dataReady == 1){
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <IIS3DWB_MEASSURE+0x188>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 8082 	bne.w	80013ce <IIS3DWB_MEASSURE+0x172>
		memset(data_raw_acceleration, 0x00, 6 * sizeof(uint8_t));
 80012ca:	2206      	movs	r2, #6
 80012cc:	2100      	movs	r1, #0
 80012ce:	4846      	ldr	r0, [pc, #280]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012d0:	f005 faa2 	bl	8006818 <memset>
		iis3dwb_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80012d4:	463b      	mov	r3, r7
 80012d6:	4944      	ldr	r1, [pc, #272]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9c9 	bl	8001670 <iis3dwb_acceleration_raw_get>

		tmp_2 = (data_raw_acceleration[1] << 8) | data_raw_acceleration[0];
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	86fb      	strh	r3, [r7, #54]	; 0x36
		tmp_1[0] = tmp_2;
 80012f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012f2:	863b      	strh	r3, [r7, #48]	; 0x30
		tmp_2 = (data_raw_acceleration[3] << 8) | data_raw_acceleration[2];
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	86fb      	strh	r3, [r7, #54]	; 0x36
		tmp_1[1] = tmp_2;
 8001306:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001308:	867b      	strh	r3, [r7, #50]	; 0x32
		tmp_2 = (data_raw_acceleration[5] << 8) | data_raw_acceleration[4];
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <IIS3DWB_MEASSURE+0x18c>)
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	86fb      	strh	r3, [r7, #54]	; 0x36
		tmp_1[2] = tmp_2;
 800131c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800131e:	86bb      	strh	r3, [r7, #52]	; 0x34

		//convert data to engineering units
		acceleration_mg[0] = iis3dwb_from_fs2g_to_mg(tmp_1[0]);
 8001320:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8bb 	bl	80014a0 <iis3dwb_from_fs2g_to_mg>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 8001330:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = iis3dwb_from_fs2g_to_mg(tmp_1[1]);
 8001334:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f8b1 	bl	80014a0 <iis3dwb_from_fs2g_to_mg>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 8001344:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = iis3dwb_from_fs2g_to_mg(tmp_1[2]);
 8001348:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f8a7 	bl	80014a0 <iis3dwb_from_fs2g_to_mg>
 8001352:	eef0 7a40 	vmov.f32	s15, s0
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 8001358:	edc3 7a02 	vstr	s15, [r3, #8]

		ftoa(acceleration_mg[0], msg_0, 2);
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	2102      	movs	r1, #2
 8001368:	4618      	mov	r0, r3
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	f7ff fdf7 	bl	8000f60 <ftoa>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_0, sizeof(msg_0), HAL_MAX_DELAY);
 8001372:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	220a      	movs	r2, #10
 800137c:	481c      	ldr	r0, [pc, #112]	; (80013f0 <IIS3DWB_MEASSURE+0x194>)
 800137e:	f004 fbfb 	bl	8005b78 <HAL_UART_Transmit>
		ftoa(acceleration_mg[1], msg_1, 2);
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 8001384:	edd3 7a01 	vldr	s15, [r3, #4]
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff fde4 	bl	8000f60 <ftoa>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_1, sizeof(msg_1), HAL_MAX_DELAY);
 8001398:	f107 0118 	add.w	r1, r7, #24
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	220a      	movs	r2, #10
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <IIS3DWB_MEASSURE+0x194>)
 80013a4:	f004 fbe8 	bl	8005b78 <HAL_UART_Transmit>
		ftoa(acceleration_mg[2], msg_2, 2);
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <IIS3DWB_MEASSURE+0x190>)
 80013aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	f7ff fdd1 	bl	8000f60 <ftoa>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_2, sizeof(msg_2), HAL_MAX_DELAY);
 80013be:	f107 010c 	add.w	r1, r7, #12
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	220a      	movs	r2, #10
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <IIS3DWB_MEASSURE+0x194>)
 80013ca:	f004 fbd5 	bl	8005b78 <HAL_UART_Transmit>
	}
}
 80013ce:	bf00      	nop
 80013d0:	3738      	adds	r7, #56	; 0x38
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08001019 	.word	0x08001019
 80013dc:	08001085 	.word	0x08001085
 80013e0:	20000098 	.word	0x20000098
 80013e4:	20000094 	.word	0x20000094
 80013e8:	200000fc 	.word	0x200000fc
 80013ec:	20000108 	.word	0x20000108
 80013f0:	20000224 	.word	0x20000224

080013f4 <IIS3DWB_INIT>:

//Function:	Init-Function for the IIS3DWB-sensor
//para_1:	HAL SPI handler name from STM32 (Pointer)
//para_2:	HAL GPIO-bank-handler name from STM32 for CS-signal (Pointer)
//para_3:	HAL GPIO-PIN name from STM32 for CS-signal
void IIS3DWB_INIT(SPI_HandleTypeDef spi, GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN){
 80013f4:	b084      	sub	sp, #16
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	f107 0c08 	add.w	ip, r7, #8
 80013fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_iis3dwb = spi;	//Setting the SPI handler for the IIS3DWB-sensor
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <IIS3DWB_INIT+0x40>)
 8001404:	4618      	mov	r0, r3
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2264      	movs	r2, #100	; 0x64
 800140c:	4619      	mov	r1, r3
 800140e:	f005 f9f5 	bl	80067fc <memcpy>
	cs_gpiox_iis3dwb = GPIOx;	//Setting the GPIO-handler for the IIS3DWB-sensor for the relevant PIN-bank
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <IIS3DWB_INIT+0x44>)
 8001414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001416:	6013      	str	r3, [r2, #0]
	cs_gpio_iis3dwb = GPIO_PIN;	//Setting the GPIO-PIN for the low-active chip select for the IIS3DWB-sensor
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <IIS3DWB_INIT+0x48>)
 800141a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800141e:	8013      	strh	r3, [r2, #0]

	IIS3DWB_CS_HIGH();			//Setting the cs-signal high (LOW-ACTIVE!) for the default state; only set to low for transmitting or receiving
 8001420:	f7ff fe5e 	bl	80010e0 <IIS3DWB_CS_HIGH>
//	IIS3DWB_3_4_SEL_HIGH();
	IIS3DWB_SET_CONFIG();
 8001424:	f7ff fe7c 	bl	8001120 <IIS3DWB_SET_CONFIG>
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001430:	b004      	add	sp, #16
 8001432:	4770      	bx	lr
 8001434:	20000098 	.word	0x20000098
 8001438:	20000104 	.word	0x20000104
 800143c:	20000092 	.word	0x20000092

08001440 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685c      	ldr	r4, [r3, #4]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6898      	ldr	r0, [r3, #8]
 800145c:	893b      	ldrh	r3, [r7, #8]
 800145e:	7af9      	ldrb	r1, [r7, #11]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	47a0      	blx	r4
 8001464:	6178      	str	r0, [r7, #20]
  return ret;
 8001466:	697b      	ldr	r3, [r7, #20]
}
 8001468:	4618      	mov	r0, r3
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
 8001480:	4613      	mov	r3, r2
 8001482:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681c      	ldr	r4, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6898      	ldr	r0, [r3, #8]
 800148c:	893b      	ldrh	r3, [r7, #8]
 800148e:	7af9      	ldrb	r1, [r7, #11]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	47a0      	blx	r4
 8001494:	6178      	str	r0, [r7, #20]
  return ret;
 8001496:	697b      	ldr	r3, [r7, #20]
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}

080014a0 <iis3dwb_from_fs2g_to_mg>:
  * @{
  *
  */

float_t iis3dwb_from_fs2g_to_mg(int16_t lsb)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014cc <iis3dwb_from_fs2g_to_mg+0x2c>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	3d79db23 	.word	0x3d79db23

080014d0 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	2301      	movs	r3, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffab 	bl	8001440 <iis3dwb_read_reg>
 80014ea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	7a3b      	ldrb	r3, [r7, #8]
 80014fc:	f362 0383 	bfi	r3, r2, #2, #2
 8001500:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8001502:	f107 0208 	add.w	r2, r7, #8
 8001506:	2301      	movs	r3, #1
 8001508:	2110      	movs	r1, #16
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffb0 	bl	8001470 <iis3dwb_write_reg>
 8001510:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   iis3dwb_odr_xl_t val)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001528:	f107 0208 	add.w	r2, r7, #8
 800152c:	2301      	movs	r3, #1
 800152e:	2110      	movs	r1, #16
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff85 	bl	8001440 <iis3dwb_read_reg>
 8001536:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <iis3dwb_xl_data_rate_set+0x42>
    ctrl1_xl.xl_en= (uint8_t)val;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	b2da      	uxtb	r2, r3
 8001546:	7a3b      	ldrb	r3, [r7, #8]
 8001548:	f362 1347 	bfi	r3, r2, #5, #3
 800154c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	2301      	movs	r3, #1
 8001554:	2110      	movs	r1, #16
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff8a 	bl	8001470 <iis3dwb_write_reg>
 800155c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001574:	f107 0208 	add.w	r2, r7, #8
 8001578:	2301      	movs	r3, #1
 800157a:	2112      	movs	r1, #18
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff5f 	bl	8001440 <iis3dwb_read_reg>
 8001582:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <iis3dwb_block_data_update_set+0x42>
    ctrl3_c.bdu= (uint8_t)val;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	7a3b      	ldrb	r3, [r7, #8]
 8001594:	f362 1386 	bfi	r3, r2, #6, #1
 8001598:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800159a:	f107 0208 	add.w	r2, r7, #8
 800159e:	2301      	movs	r3, #1
 80015a0:	2112      	movs	r1, #18
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff64 	bl	8001470 <iis3dwb_write_reg>
 80015a8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <iis3dwb_xl_axis_selection_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_axis_selection_set(stmdev_ctx_t *ctx,
                                     iis3dwb_xl_axis_sel_t val)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80015c0:	f107 0210 	add.w	r2, r7, #16
 80015c4:	2301      	movs	r3, #1
 80015c6:	2113      	movs	r1, #19
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff39 	bl	8001440 <iis3dwb_read_reg>
 80015ce:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d110      	bne.n	80015f8 <iis3dwb_xl_axis_selection_set+0x44>
    ctrl4_c._1ax_to_3regout = ( (uint8_t)val & 0x10U ) >> 4;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	7c3b      	ldrb	r3, [r7, #16]
 80015e2:	f362 0300 	bfi	r3, r2, #0, #1
 80015e6:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80015e8:	f107 0210 	add.w	r2, r7, #16
 80015ec:	2301      	movs	r3, #1
 80015ee:	2113      	movs	r1, #19
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff3d 	bl	8001470 <iis3dwb_write_reg>
 80015f6:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <iis3dwb_xl_axis_selection_set+0x5a>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	2301      	movs	r3, #1
 8001604:	2115      	movs	r1, #21
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff1a 	bl	8001440 <iis3dwb_read_reg>
 800160c:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10f      	bne.n	8001634 <iis3dwb_xl_axis_selection_set+0x80>
    ctrl6_c.xl_axis_sel = (uint8_t)val;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	f362 0301 	bfi	r3, r2, #0, #2
 8001622:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	2301      	movs	r3, #1
 800162a:	2115      	movs	r1, #21
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff1f 	bl	8001470 <iis3dwb_write_reg>
 8001632:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8001634:	697b      	ldr	r3, [r7, #20]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <iis3dwb_xl_flag_data_ready_get>:
  * @param  val    Change the values of xlda in reg STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  iis3dwb_status_reg_t status_reg;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	2301      	movs	r3, #1
 800164e:	211e      	movs	r1, #30
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fef5 	bl	8001440 <iis3dwb_read_reg>
 8001656:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&status_reg, 1);
  *val = status_reg.xlda;
 8001658:	7a3b      	ldrb	r3, [r7, #8]
 800165a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	701a      	strb	r2, [r3, #0]

  return ret;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <iis3dwb_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 800167a:	2306      	movs	r3, #6
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	2128      	movs	r1, #40	; 0x28
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fedd 	bl	8001440 <iis3dwb_read_reg>
 8001686:	60f8      	str	r0, [r7, #12]
  return ret;
 8001688:	68fb      	ldr	r3, [r7, #12]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 800169e:	f107 0208 	add.w	r2, r7, #8
 80016a2:	2301      	movs	r3, #1
 80016a4:	210b      	movs	r1, #11
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff feca 	bl	8001440 <iis3dwb_read_reg>
 80016ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10f      	bne.n	80016d4 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	f362 13c7 	bfi	r3, r2, #7, #1
 80016c2:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	2301      	movs	r3, #1
 80016ca:	210b      	movs	r1, #11
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fecf 	bl	8001470 <iis3dwb_write_reg>
 80016d2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 80016d4:	68fb      	ldr	r3, [r7, #12]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 80016e8:	2301      	movs	r3, #1
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fea6 	bl	8001440 <iis3dwb_read_reg>
 80016f4:	60f8      	str	r0, [r7, #12]
  return ret;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	2301      	movs	r3, #1
 8001712:	2112      	movs	r1, #18
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe93 	bl	8001440 <iis3dwb_read_reg>
 800171a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	7a3b      	ldrb	r3, [r7, #8]
 800172c:	f362 0300 	bfi	r3, r2, #0, #1
 8001730:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001732:	f107 0208 	add.w	r2, r7, #8
 8001736:	2301      	movs	r3, #1
 8001738:	2112      	movs	r1, #18
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe98 	bl	8001470 <iis3dwb_write_reg>
 8001740:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <iis3dwb_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001756:	f107 0208 	add.w	r2, r7, #8
 800175a:	2301      	movs	r3, #1
 800175c:	2112      	movs	r1, #18
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe6e 	bl	8001440 <iis3dwb_read_reg>
 8001764:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001766:	7a3b      	ldrb	r3, [r7, #8]
 8001768:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]

  return ret;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <iis3dwb_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	2301      	movs	r3, #1
 8001790:	2112      	movs	r1, #18
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe54 	bl	8001440 <iis3dwb_read_reg>
 8001798:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <iis3dwb_auto_increment_set+0x42>
    ctrl3_c.if_inc= (uint8_t)val;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	f362 0382 	bfi	r3, r2, #2, #1
 80017ae:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80017b0:	f107 0208 	add.w	r2, r7, #8
 80017b4:	2301      	movs	r3, #1
 80017b6:	2112      	movs	r1, #18
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe59 	bl	8001470 <iis3dwb_write_reg>
 80017be:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017c0:	68fb      	ldr	r3, [r7, #12]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <iis3dwb_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	2301      	movs	r3, #1
 80017dc:	2110      	movs	r1, #16
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fe2e 	bl	8001440 <iis3dwb_read_reg>
 80017e4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <iis3dwb_xl_filter_lp2_set+0x42>
    ctrl1_xl.lpf2_xl_en= (uint8_t)val;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	7a3b      	ldrb	r3, [r7, #8]
 80017f6:	f362 0341 	bfi	r3, r2, #1, #1
 80017fa:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 80017fc:	f107 0208 	add.w	r2, r7, #8
 8001800:	2301      	movs	r3, #1
 8001802:	2110      	movs	r1, #16
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe33 	bl	8001470 <iis3dwb_write_reg>
 800180a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001822:	f107 0210 	add.w	r2, r7, #16
 8001826:	2301      	movs	r3, #1
 8001828:	2110      	movs	r1, #16
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe08 	bl	8001440 <iis3dwb_read_reg>
 8001830:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	09db      	lsrs	r3, r3, #7
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	7c3b      	ldrb	r3, [r7, #16]
 8001846:	f362 0341 	bfi	r3, r2, #1, #1
 800184a:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800184c:	f107 0210 	add.w	r2, r7, #16
 8001850:	2301      	movs	r3, #1
 8001852:	2110      	movs	r1, #16
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fe0b 	bl	8001470 <iis3dwb_write_reg>
 800185a:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	2301      	movs	r3, #1
 8001868:	2117      	movs	r1, #23
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fde8 	bl	8001440 <iis3dwb_read_reg>
 8001870:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d121      	bne.n	80018bc <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	7b3b      	ldrb	r3, [r7, #12]
 8001884:	f362 0382 	bfi	r3, r2, #2, #1
 8001888:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	7b3b      	ldrb	r3, [r7, #12]
 8001896:	f362 1304 	bfi	r3, r2, #4, #1
 800189a:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7b3b      	ldrb	r3, [r7, #12]
 80018a6:	f362 1347 	bfi	r3, r2, #5, #3
 80018aa:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 80018ac:	f107 020c 	add.w	r2, r7, #12
 80018b0:	2301      	movs	r3, #1
 80018b2:	2117      	movs	r1, #23
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fddb 	bl	8001470 <iis3dwb_write_reg>
 80018ba:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80018bc:	697b      	ldr	r3, [r7, #20]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	2301      	movs	r3, #1
 80018d8:	2113      	movs	r1, #19
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fdb0 	bl	8001440 <iis3dwb_read_reg>
 80018e0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10f      	bne.n	8001908 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	7a3b      	ldrb	r3, [r7, #8]
 80018f2:	f362 0382 	bfi	r3, r2, #2, #1
 80018f6:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	2301      	movs	r3, #1
 80018fe:	2113      	movs	r1, #19
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fdb5 	bl	8001470 <iis3dwb_write_reg>
 8001906:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001908:	68fb      	ldr	r3, [r7, #12]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 800191c:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 800191e:	2301      	movs	r3, #1
 8001920:	210d      	movs	r1, #13
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fda4 	bl	8001470 <iis3dwb_write_reg>
 8001928:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8001934:	2301      	movs	r3, #1
 8001936:	215e      	movs	r1, #94	; 0x5e
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fd99 	bl	8001470 <iis3dwb_write_reg>
 800193e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	2301      	movs	r3, #1
 800195c:	2108      	movs	r1, #8
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd6e 	bl	8001440 <iis3dwb_read_reg>
 8001964:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8001972:	f107 0210 	add.w	r2, r7, #16
 8001976:	2301      	movs	r3, #1
 8001978:	2107      	movs	r1, #7
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd78 	bl	8001470 <iis3dwb_write_reg>
 8001980:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	7b3b      	ldrb	r3, [r7, #12]
 8001996:	f362 0300 	bfi	r3, r2, #0, #1
 800199a:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 800199c:	f107 020c 	add.w	r2, r7, #12
 80019a0:	2301      	movs	r3, #1
 80019a2:	2108      	movs	r1, #8
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fd63 	bl	8001470 <iis3dwb_write_reg>
 80019aa:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 80019ac:	697b      	ldr	r3, [r7, #20]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	2301      	movs	r3, #1
 80019c8:	2109      	movs	r1, #9
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fd38 	bl	8001440 <iis3dwb_read_reg>
 80019d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10f      	bne.n	80019f8 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	7a3b      	ldrb	r3, [r7, #8]
 80019e2:	f362 0303 	bfi	r3, r2, #0, #4
 80019e6:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	2301      	movs	r3, #1
 80019ee:	2109      	movs	r1, #9
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fd3d 	bl	8001470 <iis3dwb_write_reg>
 80019f6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8001a0e:	f107 0208 	add.w	r2, r7, #8
 8001a12:	2301      	movs	r3, #1
 8001a14:	210a      	movs	r1, #10
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fd12 	bl	8001440 <iis3dwb_read_reg>
 8001a1c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10f      	bne.n	8001a44 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	7a3b      	ldrb	r3, [r7, #8]
 8001a2e:	f362 0302 	bfi	r3, r2, #0, #3
 8001a32:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8001a34:	f107 0208 	add.w	r2, r7, #8
 8001a38:	2301      	movs	r3, #1
 8001a3a:	210a      	movs	r1, #10
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fd17 	bl	8001470 <iis3dwb_write_reg>
 8001a42:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8001a44:	68fb      	ldr	r3, [r7, #12]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b099      	sub	sp, #100	; 0x64
 8001a54:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f000 fc16 	bl	8002286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f827 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f000 f951 	bl	8001d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a62:	f000 f8d9 	bl	8001c18 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001a66:	f000 f873 	bl	8001b50 <MX_SPI2_Init>
  MX_DMA_Init();
 8001a6a:	f000 f921 	bl	8001cb0 <MX_DMA_Init>
  MX_TIM17_Init();
 8001a6e:	f000 f8ad 	bl	8001bcc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <main+0x50>)
 8001a74:	f003 fdc0 	bl	80055f8 <HAL_TIM_Base_Start_IT>
  IIS3DWB_INIT(hspi2, SPI2_CS_GPIO_Port , SPI2_CS_Pin);
 8001a78:	4c0a      	ldr	r4, [pc, #40]	; (8001aa4 <main+0x54>)
 8001a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7e:	9316      	str	r3, [sp, #88]	; 0x58
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <main+0x58>)
 8001a82:	9315      	str	r3, [sp, #84]	; 0x54
 8001a84:	4668      	mov	r0, sp
 8001a86:	f104 0310 	add.w	r3, r4, #16
 8001a8a:	2254      	movs	r2, #84	; 0x54
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f004 feb5 	bl	80067fc <memcpy>
 8001a92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a96:	f7ff fcad 	bl	80013f4 <IIS3DWB_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IIS3DWB_MEASSURE();
 8001a9a:	f7ff fbdf 	bl	800125c <IIS3DWB_MEASSURE>
 8001a9e:	e7fc      	b.n	8001a9a <main+0x4a>
 8001aa0:	200001d8 	.word	0x200001d8
 8001aa4:	20000114 	.word	0x20000114
 8001aa8:	48000400 	.word	0x48000400

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2244      	movs	r2, #68	; 0x44
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 feac 	bl	8006818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad2:	f001 f939 	bl	8002d48 <HAL_PWREx_ControlVoltageScaling>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001adc:	f000 f9f6 	bl	8001ecc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001aec:	2360      	movs	r3, #96	; 0x60
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af0:	2302      	movs	r3, #2
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001afc:	231e      	movs	r3, #30
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f9bd 	bl	8002e90 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b1c:	f000 f9d6 	bl	8001ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	230f      	movs	r3, #15
 8001b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b24:	2303      	movs	r3, #3
 8001b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	2102      	movs	r1, #2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fdcf 	bl	80036dc <HAL_RCC_ClockConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b44:	f000 f9c2 	bl	8001ecc <Error_Handler>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3758      	adds	r7, #88	; 0x58
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <MX_SPI2_Init+0x78>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_SPI2_Init+0x74>)
 8001bb0:	f002 fdba 	bl	8004728 <HAL_SPI_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f000 f987 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000114 	.word	0x20000114
 8001bc8:	40003800 	.word	0x40003800

08001bcc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <MX_TIM17_Init+0x48>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6-1;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bd8:	2205      	movs	r2, #5
 8001bda:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_TIM17_Init+0x44>)
 8001bfe:	f003 fca3 	bl	8005548 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001c08:	f000 f960 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200001d8 	.word	0x200001d8
 8001c14:	40014800 	.word	0x40014800

08001c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_USART2_UART_Init+0x94>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c60:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c62:	f003 ff39 	bl	8005ad8 <HAL_UART_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f000 f92e 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c74:	f004 fcce 	bl	8006614 <HAL_UARTEx_SetTxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c7e:	f000 f925 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c86:	f004 fd03 	bl	8006690 <HAL_UARTEx_SetRxFifoThreshold>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c90:	f000 f91c 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c96:	f004 fc84 	bl	80065a2 <HAL_UARTEx_DisableFifoMode>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ca0:	f000 f914 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000224 	.word	0x20000224
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6493      	str	r3, [r2, #72]	; 0x48
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6493      	str	r3, [r2, #72]	; 0x48
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_DMA_Init+0x50>)
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	200b      	movs	r0, #11
 8001cec:	f000 fc3f 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cf0:	200b      	movs	r0, #11
 8001cf2:	f000 fc58 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d32:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <MX_GPIO_Init+0x178>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2102      	movs	r1, #2
 8001dae:	4834      	ldr	r0, [pc, #208]	; (8001e80 <MX_GPIO_Init+0x17c>)
 8001db0:	f000 ff60 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_1_2_GPIO_Port, SEL_1_2_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2101      	movs	r1, #1
 8001db8:	4832      	ldr	r0, [pc, #200]	; (8001e84 <MX_GPIO_Init+0x180>)
 8001dba:	f000 ff5b 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL_3_4_GPIO_Port, SEL_3_4_Pin, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc4:	4830      	ldr	r0, [pc, #192]	; (8001e88 <MX_GPIO_Init+0x184>)
 8001dc6:	f000 ff55 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd0:	482e      	ldr	r0, [pc, #184]	; (8001e8c <MX_GPIO_Init+0x188>)
 8001dd2:	f000 ff4f 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	4824      	ldr	r0, [pc, #144]	; (8001e80 <MX_GPIO_Init+0x17c>)
 8001dee:	f000 fdaf 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_INT1_Pin */
  GPIO_InitStruct.Pin = SPI_INT1_Pin;
 8001df2:	2320      	movs	r3, #32
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI_INT1_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4822      	ldr	r0, [pc, #136]	; (8001e90 <MX_GPIO_Init+0x18c>)
 8001e08:	f000 fda2 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_1_2_Pin */
  GPIO_InitStruct.Pin = SEL_1_2_Pin;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_1_2_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_GPIO_Init+0x180>)
 8001e24:	f000 fd94 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL_3_4_Pin */
  GPIO_InitStruct.Pin = SEL_3_4_Pin;
 8001e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEL_3_4_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4811      	ldr	r0, [pc, #68]	; (8001e88 <MX_GPIO_Init+0x184>)
 8001e42:	f000 fd85 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MX_GPIO_Init+0x188>)
 8001e60:	f000 fd76 	bl	8002950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2017      	movs	r0, #23
 8001e6a:	f000 fb80 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e6e:	2017      	movs	r0, #23
 8001e70:	f000 fb99 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 8001e74:	bf00      	nop
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48001000 	.word	0x48001000
 8001e84:	48001800 	.word	0x48001800
 8001e88:	48001400 	.word	0x48001400
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800

08001e94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

	//Check which version of the timer triggered this callback
	if(htim==&htim17){

	}
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==SPI_INT1_Pin){
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d103      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(LED1_GPIO_Port , LED1_Pin );
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x20>)
 8001ebc:	f000 fef2 	bl	8002ca4 <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg_0, sizeof(msg_0), HAL_MAX_DELAY);
	}
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	48001000 	.word	0x48001000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_SPI_MspInit+0x104>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d16c      	bne.n	800201c <HAL_SPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a32      	ldr	r2, [pc, #200]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_SPI_MspInit+0x108>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	; (800202c <HAL_SPI_MspInit+0x10c>)
 8001fa6:	f000 fcd3 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001faa:	2308      	movs	r3, #8
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481a      	ldr	r0, [pc, #104]	; (8002030 <HAL_SPI_MspInit+0x110>)
 8001fc6:	f000 fcc3 	bl	8002950 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_SPI_MspInit+0x118>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8002002:	f000 faeb 	bl	80025dc <HAL_DMA_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_SPI_MspInit+0xf0>
    {
      Error_Handler();
 800200c:	f7ff ff5e 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8002014:	659a      	str	r2, [r3, #88]	; 0x58
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_SPI_MspInit+0x114>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40003800 	.word	0x40003800
 8002028:	40021000 	.word	0x40021000
 800202c:	48000c00 	.word	0x48000c00
 8002030:	48000800 	.word	0x48000800
 8002034:	20000178 	.word	0x20000178
 8002038:	40020008 	.word	0x40020008

0800203c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_TIM_Base_MspInit+0x44>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d113      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002058:	6613      	str	r3, [r2, #96]	; 0x60
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_TIM_Base_MspInit+0x48>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201a      	movs	r0, #26
 800206c:	f000 fa7f 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002070:	201a      	movs	r0, #26
 8002072:	f000 fa98 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40014800 	.word	0x40014800
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b0      	sub	sp, #192	; 0xc0
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	229c      	movs	r2, #156	; 0x9c
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 fbb5 	bl	8006818 <memset>
  if(huart->Instance==USART2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a21      	ldr	r2, [pc, #132]	; (8002138 <HAL_UART_MspInit+0xb0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d13a      	bne.n	800212e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020b8:	2302      	movs	r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fdb7 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d0:	f7ff fefc 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_UART_MspInit+0xb4>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8002104:	2360      	movs	r3, #96	; 0x60
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002122:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_UART_MspInit+0xb8>)
 800212a:	f000 fc11 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	37c0      	adds	r7, #192	; 0xc0
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	40021000 	.word	0x40021000
 8002140:	48000c00 	.word	0x48000c00

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002190:	f000 f8ce 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Channel1_IRQHandler+0x10>)
 800219e:	f000 fac5 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000178 	.word	0x20000178

080021ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_INT1_Pin);
 80021b0:	2020      	movs	r0, #32
 80021b2:	f000 fd91 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80021c2:	f003 fa89 	bl	80056d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001d8 	.word	0x200001d8

080021d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <SystemInit+0x5c>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <SystemInit+0x5c>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <SystemInit+0x60>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <SystemInit+0x60>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <SystemInit+0x60>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <SystemInit+0x60>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <SystemInit+0x60>)
 80021fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002200:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002204:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <SystemInit+0x60>)
 8002208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <SystemInit+0x60>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a07      	ldr	r2, [pc, #28]	; (8002230 <SystemInit+0x60>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SystemInit+0x60>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	40021000 	.word	0x40021000

08002234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002238:	f7ff ffca 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800223c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800223e:	e003      	b.n	8002248 <LoopCopyDataInit>

08002240 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002242:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002244:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002246:	3104      	adds	r1, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002248:	480a      	ldr	r0, [pc, #40]	; (8002274 <LoopForever+0xa>)
	ldr	r3, =_edata
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <LoopForever+0xe>)
	adds	r2, r0, r1
 800224c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800224e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002250:	d3f6      	bcc.n	8002240 <CopyDataInit>
	ldr	r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002254:	e002      	b.n	800225c <LoopFillZerobss>

08002256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002256:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002258:	f842 3b04 	str.w	r3, [r2], #4

0800225c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <LoopForever+0x16>)
	cmp	r2, r3
 800225e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002260:	d3f9      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f004 faa7 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002266:	f7ff fbf3 	bl	8001a50 <main>

0800226a <LoopForever>:

LoopForever:
    b LoopForever
 800226a:	e7fe      	b.n	800226a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800226c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002270:	08007878 	.word	0x08007878
	ldr	r0, =_sdata
 8002274:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002278:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800227c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002280:	200002b8 	.word	0x200002b8

08002284 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC1_IRQHandler>

08002286 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f961 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f80e 	bl	80022b8 <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	e001      	b.n	80022ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a8:	f7ff fe16 	bl	8001ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ac:	79fb      	ldrb	r3, [r7, #7]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_InitTick+0x6c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_InitTick+0x70>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_InitTick+0x6c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f96d 	bl	80025c2 <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d809      	bhi.n	8002308 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f937 	bl	800256e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_InitTick+0x74>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e007      	b.n	8002318 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e004      	b.n	8002318 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	e001      	b.n	8002318 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008
 8002354:	200002b4 	.word	0x200002b4

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200002b4 	.word	0x200002b4

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08d      	b.n	800270a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_DMA_Init+0x138>)
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d80f      	bhi.n	800261a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b45      	ldr	r3, [pc, #276]	; (8002718 <HAL_DMA_Init+0x13c>)
 8002602:	4413      	add	r3, r2
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_DMA_Init+0x140>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a42      	ldr	r2, [pc, #264]	; (8002720 <HAL_DMA_Init+0x144>)
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
 8002618:	e00e      	b.n	8002638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_DMA_Init+0x148>)
 8002622:	4413      	add	r3, r2
 8002624:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_DMA_Init+0x140>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_DMA_Init+0x14c>)
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8fe 	bl	800288c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002698:	d102      	bne.n	80026a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026b4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_DMA_Init+0x104>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d80c      	bhi.n	80026e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f91e 	bl	8002908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	e008      	b.n	80026f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40020407 	.word	0x40020407
 8002718:	bffdfff8 	.word	0xbffdfff8
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	40020000 	.word	0x40020000
 8002724:	bffdfbf8 	.word	0xbffdfbf8
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d026      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x7a>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d021      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 021c 	and.w	r2, r3, #28
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2104      	movs	r1, #4
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	2b00      	cmp	r3, #0
 800279a:	d071      	beq.n	8002880 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027a4:	e06c      	b.n	8002880 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f003 031c 	and.w	r3, r3, #28
 80027ae:	2202      	movs	r2, #2
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02e      	beq.n	8002818 <HAL_DMA_IRQHandler+0xec>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d029      	beq.n	8002818 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020a 	bic.w	r2, r2, #10
 80027e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 021c 	and.w	r2, r3, #28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2102      	movs	r1, #2
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d038      	beq.n	8002880 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002816:	e033      	b.n	8002880 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f003 031c 	and.w	r3, r3, #28
 8002820:	2208      	movs	r2, #8
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02a      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d025      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020e 	bic.w	r2, r2, #14
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f003 021c 	and.w	r2, r3, #28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002880:	bf00      	nop
 8002882:	bf00      	nop
}
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d80a      	bhi.n	80028b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6493      	str	r3, [r2, #72]	; 0x48
 80028b4:	e007      	b.n	80028c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028c0:	4413      	add	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3b08      	subs	r3, #8
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2201      	movs	r2, #1
 80028e6:	409a      	lsls	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40020407 	.word	0x40020407
 80028fc:	4002081c 	.word	0x4002081c
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	40020880 	.word	0x40020880

08002908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800292a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3b01      	subs	r3, #1
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	1000823f 	.word	0x1000823f
 800294c:	40020940 	.word	0x40020940

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	e166      	b.n	8002c2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8158 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d005      	beq.n	8002990 <HAL_GPIO_Init+0x40>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d130      	bne.n	80029f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c6:	2201      	movs	r2, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0201 	and.w	r2, r3, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d017      	beq.n	8002a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d123      	bne.n	8002a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80b2 	beq.w	8002c28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002adc:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b06:	d02b      	beq.n	8002b60 <HAL_GPIO_Init+0x210>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d025      	beq.n	8002b5c <HAL_GPIO_Init+0x20c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x308>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01f      	beq.n	8002b58 <HAL_GPIO_Init+0x208>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x30c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d019      	beq.n	8002b54 <HAL_GPIO_Init+0x204>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x310>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x200>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x314>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1fc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x318>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1f8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x31c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1f4>
 8002b40:	2307      	movs	r3, #7
 8002b42:	e00e      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b44:	2308      	movs	r3, #8
 8002b46:	e00c      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b48:	2306      	movs	r3, #6
 8002b4a:	e00a      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b4c:	2305      	movs	r3, #5
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba4:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f ae91 	bne.w	8002960 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	48001800 	.word	0x48001800
 8002c6c:	48001c00 	.word	0x48001c00
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43d9      	mvns	r1, r3
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f8d6 	bl	8001ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d102      	bne.n	8002d20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	e00b      	b.n	8002d38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	d102      	bne.n	8002d36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	e000      	b.n	8002d38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d141      	bne.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d131      	bne.n	8002dc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6a:	4a46      	ldr	r2, [pc, #280]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d74:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7c:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2232      	movs	r2, #50	; 0x32
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0c9b      	lsrs	r3, r3, #18
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9a:	e002      	b.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d102      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f2      	bne.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d158      	bne.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e057      	b.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dce:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dd8:	e04d      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de0:	d141      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d131      	bne.n	8002e54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2232      	movs	r2, #50	; 0x32
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e26:	e002      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d102      	bne.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d112      	bne.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e011      	b.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e64:	e007      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e74:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40007000 	.word	0x40007000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f000 bc16 	b.w	80036d0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea4:	4ba0      	ldr	r3, [pc, #640]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eae:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80e4 	beq.w	800308e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_RCC_OscConfig+0x4c>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	f040 808b 	bne.w	8002fea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 8087 	bne.w	8002fea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002edc:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x64>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e3ed      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4b8b      	ldr	r3, [pc, #556]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_RCC_OscConfig+0x7e>
 8002f04:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	e005      	b.n	8002f1a <HAL_RCC_OscConfig+0x8a>
 8002f0e:	4b86      	ldr	r3, [pc, #536]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d223      	bcs.n	8002f66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fdc8 	bl	8003ab8 <RCC_SetFlashLatencyFromMSIRange>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e3ce      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7c      	ldr	r2, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4977      	ldr	r1, [pc, #476]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b75      	ldr	r3, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4972      	ldr	r1, [pc, #456]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	e025      	b.n	8002fb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f66:	4b70      	ldr	r3, [pc, #448]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6f      	ldr	r2, [pc, #444]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	496a      	ldr	r1, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fd88 	bl	8003ab8 <RCC_SetFlashLatencyFromMSIRange>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e38e      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb2:	f000 fcbf 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	495a      	ldr	r1, [pc, #360]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002fc4:	5ccb      	ldrb	r3, [r1, r3]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <HAL_RCC_OscConfig+0x2a0>)
 8002fd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd2:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x2a4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f96e 	bl	80022b8 <HAL_InitTick>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d052      	beq.n	800308c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	e372      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d032      	beq.n	8003058 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff2:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ffe:	f7ff f9ab 	bl	8002358 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003006:	f7ff f9a7 	bl	8002358 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e35b      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3f      	ldr	r2, [pc, #252]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	493a      	ldr	r1, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	4935      	ldr	r1, [pc, #212]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	e01a      	b.n	800308e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003064:	f7ff f978 	bl	8002358 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800306c:	f7ff f974 	bl	8002358 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e328      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800307e:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1dc>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d073      	beq.n	8003182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d005      	beq.n	80030ac <HAL_RCC_OscConfig+0x21c>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d10e      	bne.n	80030c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d063      	beq.n	8003180 <HAL_RCC_OscConfig+0x2f0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d15f      	bne.n	8003180 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e305      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x24c>
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0x288>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x270>
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x288>
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a05      	ldr	r2, [pc, #20]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7ff f91a 	bl	8002358 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003126:	e010      	b.n	800314a <HAL_RCC_OscConfig+0x2ba>
 8003128:	40021000 	.word	0x40021000
 800312c:	080077b0 	.word	0x080077b0
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff f90e 	bl	8002358 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e2c2      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	4baf      	ldr	r3, [pc, #700]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x2a8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7ff f8fe 	bl	8002358 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f8fa 	bl	8002358 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2ae      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003172:	4ba5      	ldr	r3, [pc, #660]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x2d0>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d060      	beq.n	8003250 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_OscConfig+0x310>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d119      	bne.n	80031ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d116      	bne.n	80031ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_OscConfig+0x328>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e28b      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	4990      	ldr	r1, [pc, #576]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031cc:	e040      	b.n	8003250 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7ff f8b9 	bl	8002358 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ea:	f7ff f8b5 	bl	8002358 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e269      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fc:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	497c      	ldr	r1, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
 800321c:	e018      	b.n	8003250 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a79      	ldr	r2, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7ff f895 	bl	8002358 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7ff f891 	bl	8002358 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e245      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003264:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	4a67      	ldr	r2, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7ff f870 	bl	8002358 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7ff f86c 	bl	8002358 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e220      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800328e:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCC_OscConfig+0x3ec>
 800329c:	e01b      	b.n	80032d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7ff f853 	bl	8002358 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7ff f84f 	bl	8002358 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e203      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80a6 	beq.w	8003430 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a43      	ldr	r2, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003310:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d118      	bne.n	800334e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3a      	ldr	r2, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003328:	f7ff f816 	bl	8002358 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7ff f812 	bl	8002358 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1c6      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003342:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d108      	bne.n	8003368 <HAL_RCC_OscConfig+0x4d8>
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003366:	e024      	b.n	80033b2 <HAL_RCC_OscConfig+0x522>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d110      	bne.n	8003392 <HAL_RCC_OscConfig+0x502>
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003390:	e00f      	b.n	80033b2 <HAL_RCC_OscConfig+0x522>
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe ffcd 	bl	8002358 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe ffc9 	bl	8002358 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e17b      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ed      	beq.n	80033c2 <HAL_RCC_OscConfig+0x532>
 80033e6:	e01a      	b.n	800341e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe ffb6 	bl	8002358 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe ffb2 	bl	8002358 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d906      	bls.n	8003410 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e164      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003410:	4ba8      	ldr	r3, [pc, #672]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e8      	bne.n	80033f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4ba3      	ldr	r3, [pc, #652]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4aa2      	ldr	r2, [pc, #648]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003444:	4b9b      	ldr	r3, [pc, #620]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800344a:	4a9a      	ldr	r2, [pc, #616]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fe ff80 	bl	8002358 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800345c:	f7fe ff7c 	bl	8002358 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e130      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800346e:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ef      	beq.n	800345c <HAL_RCC_OscConfig+0x5cc>
 800347c:	e01b      	b.n	80034b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800347e:	4b8d      	ldr	r3, [pc, #564]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003484:	4a8b      	ldr	r2, [pc, #556]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe ff63 	bl	8002358 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003496:	f7fe ff5f 	bl	8002358 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e113      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80034aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ef      	bne.n	8003496 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8107 	beq.w	80036ce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	f040 80cb 	bne.w	8003660 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034ca:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d12c      	bne.n	8003538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	3b01      	subs	r3, #1
 80034ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d123      	bne.n	8003538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d11b      	bne.n	8003538 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d113      	bne.n	8003538 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d109      	bne.n	8003538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d06d      	beq.n	8003614 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d068      	beq.n	8003610 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800354a:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0ba      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003564:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003566:	f7fe fef7 	bl	8002358 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356e:	f7fe fef3 	bl	8002358 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0a7      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358c:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_RCC_OscConfig+0x828>)
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800359c:	3a01      	subs	r2, #1
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a6:	0212      	lsls	r2, r2, #8
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ae:	0852      	lsrs	r2, r2, #1
 80035b0:	3a01      	subs	r2, #1
 80035b2:	0552      	lsls	r2, r2, #21
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ba:	0852      	lsrs	r2, r2, #1
 80035bc:	3a01      	subs	r2, #1
 80035be:	0652      	lsls	r2, r2, #25
 80035c0:	4311      	orrs	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c6:	06d2      	lsls	r2, r2, #27
 80035c8:	430a      	orrs	r2, r1
 80035ca:	493a      	ldr	r1, [pc, #232]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035d0:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e8:	f7fe feb6 	bl	8002358 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe feb2 	bl	8002358 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e066      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360e:	e05e      	b.n	80036ce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e05d      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d156      	bne.n	80036ce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003638:	f7fe fe8e 	bl	8002358 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fe8a 	bl	8002358 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e03e      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x7b0>
 800365e:	e036      	b.n	80036ce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d031      	beq.n	80036ca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800366c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003670:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003684:	f023 0303 	bic.w	r3, r3, #3
 8003688:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x824>)
 8003690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe fe5d 	bl	8002358 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	e00c      	b.n	80036bc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe fe59 	bl	8002358 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d905      	bls.n	80036bc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e00d      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
 80036b4:	40021000 	.word	0x40021000
 80036b8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x848>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ec      	bne.n	80036a2 <HAL_RCC_OscConfig+0x812>
 80036c8:	e001      	b.n	80036ce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e10f      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b86      	ldr	r3, [pc, #536]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 020f 	bic.w	r2, r3, #15
 800370a:	4984      	ldr	r1, [pc, #528]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b82      	ldr	r3, [pc, #520]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0f7      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8089 	beq.w	8003844 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d133      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0e4      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800374a:	f000 fa0f 	bl	8003b6c <RCC_GetSysClockFreqFromPLLSource>
 800374e:	4603      	mov	r3, r0
 8003750:	4a74      	ldr	r2, [pc, #464]	; (8003924 <HAL_RCC_ClockConfig+0x248>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d955      	bls.n	8003802 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	4a6d      	ldr	r2, [pc, #436]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e044      	b.n	8003802 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d03e      	beq.n	8003802 <HAL_RCC_ClockConfig+0x126>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13a      	bne.n	8003802 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003794:	4a62      	ldr	r2, [pc, #392]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e02f      	b.n	8003802 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0ac      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0a0      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e098      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80037e2:	f000 f8a7 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4a4e      	ldr	r2, [pc, #312]	; (8003924 <HAL_RCC_ClockConfig+0x248>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d909      	bls.n	8003802 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f6:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4944      	ldr	r1, [pc, #272]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fe fda0 	bl	8002358 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe fd9c 	bl	8002358 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e070      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4930      	ldr	r1, [pc, #192]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
 8003862:	e008      	b.n	8003876 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d105      	bne.n	8003876 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003874:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d210      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 020f 	bic.w	r2, r3, #15
 800388c:	4923      	ldr	r1, [pc, #140]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e036      	b.n	8003914 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4918      	ldr	r1, [pc, #96]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4910      	ldr	r1, [pc, #64]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e4:	f000 f826 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	490c      	ldr	r1, [pc, #48]	; (8003928 <HAL_RCC_ClockConfig+0x24c>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x250>)
 8003902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x254>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fcd5 	bl	80022b8 <HAL_InitTick>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]

  return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	04c4b400 	.word	0x04c4b400
 8003928:	080077b0 	.word	0x080077b0
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x34>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d11e      	bne.n	80039a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e005      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003984:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10d      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e004      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d134      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0xa6>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d003      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0xac>
 80039d8:	e005      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039dc:	617b      	str	r3, [r7, #20]
      break;
 80039de:	e005      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039e2:	617b      	str	r3, [r7, #20]
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	617b      	str	r3, [r7, #20]
      break;
 80039ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	0e5b      	lsrs	r3, r3, #25
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080077c8 	.word	0x080077c8
 8003a44:	00f42400 	.word	0x00f42400

08003a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000000 	.word	0x20000000

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	080077c0 	.word	0x080077c0

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a90:	f7ff ffda 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0adb      	lsrs	r3, r3, #11
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	080077c0 	.word	0x080077c0

08003ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ad0:	f7ff f91a 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003ad4:	6178      	str	r0, [r7, #20]
 8003ad6:	e014      	b.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003af0:	f7ff f90a 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b08:	d10b      	bne.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	d913      	bls.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2ba0      	cmp	r3, #160	; 0xa0
 8003b14:	d902      	bls.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b16:	2302      	movs	r3, #2
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e00d      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e00a      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b7f      	cmp	r3, #127	; 0x7f
 8003b26:	d902      	bls.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b28:	2302      	movs	r3, #2
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e004      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d101      	bne.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b34:	2301      	movs	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 020f 	bic.w	r2, r3, #15
 8003b40:	4909      	ldr	r1, [pc, #36]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40022000 	.word	0x40022000

08003b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003b76:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d118      	bne.n	8003bb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e005      	b.n	8003baa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d003      	beq.n	8003bcc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d003      	beq.n	8003bd2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003bca:	e005      	b.n	8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003bce:	613b      	str	r3, [r7, #16]
    break;
 8003bd0:	e005      	b.n	8003bde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003bd4:	613b      	str	r3, [r7, #16]
    break;
 8003bd6:	e002      	b.n	8003bde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]
    break;
 8003bdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	3301      	adds	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	fb02 f203 	mul.w	r2, r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c1e:	683b      	ldr	r3, [r7, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	080077c8 	.word	0x080077c8
 8003c34:	00f42400 	.word	0x00f42400

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c40:	2300      	movs	r3, #0
 8003c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c44:	2300      	movs	r3, #0
 8003c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d040      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d02a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c5c:	2b80      	cmp	r3, #128	; 0x80
 8003c5e:	d825      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d026      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d821      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d006      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d81d      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d010      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c78:	e018      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c7a:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4a88      	ldr	r2, [pc, #544]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c86:	e015      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fb62 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c98:	e00c      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3320      	adds	r3, #32
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fc4d 	bl	8004540 <RCCEx_PLLSAI2_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	74fb      	strb	r3, [r7, #19]
      break;
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cba:	4b79      	ldr	r3, [pc, #484]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cc0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc8:	4975      	ldr	r1, [pc, #468]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cd0:	e001      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d047      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d030      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf0:	d82a      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf6:	d02a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfc:	d824      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d08:	d81e      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d010      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d14:	e018      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d16:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d22:	e015      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fb14 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3320      	adds	r3, #32
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fbff 	bl	8004540 <RCCEx_PLLSAI2_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	74fb      	strb	r3, [r7, #19]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d56:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	494e      	ldr	r1, [pc, #312]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d6c:	e001      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 809f 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d80:	2300      	movs	r3, #0
 8003d82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d84:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a40      	ldr	r2, [pc, #256]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3a      	ldr	r2, [pc, #232]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe fac9 	bl	8002358 <HAL_GetTick>
 8003dc6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fe fac5 	bl	8002358 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
        break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d15b      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01f      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d016      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fa84 	bl	8002358 <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	e00b      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa80 	bl	8002358 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d902      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	74fb      	strb	r3, [r7, #19]
            break;
 8003e6a:	e006      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ec      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10c      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e98:	e008      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	74bb      	strb	r3, [r7, #18]
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eac:	7c7b      	ldrb	r3, [r7, #17]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb2:	4ba0      	ldr	r3, [pc, #640]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	4a9f      	ldr	r2, [pc, #636]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eca:	4b9a      	ldr	r3, [pc, #616]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	4996      	ldr	r1, [pc, #600]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eec:	4b91      	ldr	r3, [pc, #580]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 020c 	bic.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	498e      	ldr	r1, [pc, #568]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	4985      	ldr	r1, [pc, #532]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f30:	4b80      	ldr	r3, [pc, #512]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3e:	497d      	ldr	r1, [pc, #500]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f52:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	4974      	ldr	r1, [pc, #464]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	496c      	ldr	r1, [pc, #432]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f96:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa4:	4963      	ldr	r1, [pc, #396]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc6:	495b      	ldr	r1, [pc, #364]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fda:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	4952      	ldr	r1, [pc, #328]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	494a      	ldr	r1, [pc, #296]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401e:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	4941      	ldr	r1, [pc, #260]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004040:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	4939      	ldr	r1, [pc, #228]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d028      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004070:	4930      	ldr	r1, [pc, #192]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004080:	d106      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004082:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408c:	60d3      	str	r3, [r2, #12]
 800408e:	e011      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f959 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d04d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c8:	d108      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040da:	e012      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e2:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fa:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410a:	d106      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	e020      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004122:	d109      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e014      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f905 	bl	8004358 <RCCEx_PLLSAI1_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d028      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004168:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004176:	4977      	ldr	r1, [pc, #476]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004186:	d106      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004188:	4b72      	ldr	r3, [pc, #456]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a71      	ldr	r2, [pc, #452]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800418e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004192:	60d3      	str	r3, [r2, #12]
 8004194:	e011      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419e:	d10c      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f8d6 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01e      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c6:	4b63      	ldr	r3, [pc, #396]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d6:	495f      	ldr	r1, [pc, #380]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2102      	movs	r1, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f8b1 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004216:	f023 0204 	bic.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004220:	494c      	ldr	r1, [pc, #304]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004234:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800423a:	f023 0218 	bic.w	r2, r3, #24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	4943      	ldr	r1, [pc, #268]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d035      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004258:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3d      	ldr	r2, [pc, #244]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fe f878 	bl	8002358 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800426c:	f7fe f874 	bl	8002358 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d902      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	74fb      	strb	r3, [r7, #19]
        break;
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004280:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ef      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d113      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a2:	492c      	ldr	r1, [pc, #176]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3320      	adds	r3, #32
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f945 	bl	8004540 <RCCEx_PLLSAI2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01e      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80042d0:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	491c      	ldr	r1, [pc, #112]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3320      	adds	r3, #32
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f920 	bl	8004540 <RCCEx_PLLSAI2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800431c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800433c:	d105      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004348:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800434a:	7cbb      	ldrb	r3, [r7, #18]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000

08004358 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b72      	ldr	r3, [pc, #456]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004372:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d103      	bne.n	800438a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
       ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d142      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	e03f      	b.n	8004410 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d018      	beq.n	80043ca <RCCEx_PLLSAI1_Config+0x72>
 8004398:	2b03      	cmp	r3, #3
 800439a:	d825      	bhi.n	80043e8 <RCCEx_PLLSAI1_Config+0x90>
 800439c:	2b01      	cmp	r3, #1
 800439e:	d002      	beq.n	80043a6 <RCCEx_PLLSAI1_Config+0x4e>
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d009      	beq.n	80043b8 <RCCEx_PLLSAI1_Config+0x60>
 80043a4:	e020      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043a6:	4b62      	ldr	r3, [pc, #392]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11d      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b6:	e01a      	b.n	80043ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b8:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e013      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ca:	4b59      	ldr	r3, [pc, #356]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043d6:	4b56      	ldr	r3, [pc, #344]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043e6:	e006      	b.n	80043f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e004      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80043f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80043fe:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4949      	ldr	r1, [pc, #292]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 800440c:	4313      	orrs	r3, r2
 800440e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 8086 	bne.w	8004524 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004418:	4b45      	ldr	r3, [pc, #276]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a44      	ldr	r2, [pc, #272]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 800441e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fd ff98 	bl	8002358 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800442a:	e009      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800442c:	f7fd ff94 	bl	8002358 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	73fb      	strb	r3, [r7, #15]
        break;
 800443e:	e005      	b.n	800444c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004440:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ef      	bne.n	800442c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d168      	bne.n	8004524 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d113      	bne.n	8004480 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004458:	4b35      	ldr	r3, [pc, #212]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <RCCEx_PLLSAI1_Config+0x1dc>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	06d2      	lsls	r2, r2, #27
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6852      	ldr	r2, [r2, #4]
 8004472:	3a01      	subs	r2, #1
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	430a      	orrs	r2, r1
 8004478:	492d      	ldr	r1, [pc, #180]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
 800447e:	e02d      	b.n	80044dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d115      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	0211      	lsls	r1, r2, #8
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6912      	ldr	r2, [r2, #16]
 8004498:	0852      	lsrs	r2, r2, #1
 800449a:	3a01      	subs	r2, #1
 800449c:	0552      	lsls	r2, r2, #21
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6852      	ldr	r2, [r2, #4]
 80044a4:	3a01      	subs	r2, #1
 80044a6:	0112      	lsls	r2, r2, #4
 80044a8:	430a      	orrs	r2, r1
 80044aa:	4921      	ldr	r1, [pc, #132]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
 80044b0:	e014      	b.n	80044dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b2:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	0211      	lsls	r1, r2, #8
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6952      	ldr	r2, [r2, #20]
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0652      	lsls	r2, r2, #25
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6852      	ldr	r2, [r2, #4]
 80044d0:	3a01      	subs	r2, #1
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	430a      	orrs	r2, r1
 80044d6:	4916      	ldr	r1, [pc, #88]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fd ff36 	bl	8002358 <HAL_GetTick>
 80044ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ee:	e009      	b.n	8004504 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f0:	f7fd ff32 	bl	8002358 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d902      	bls.n	8004504 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	73fb      	strb	r3, [r7, #15]
          break;
 8004502:	e005      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004504:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	4904      	ldr	r1, [pc, #16]	; (8004530 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	07ff800f 	.word	0x07ff800f
 8004538:	ff9f800f 	.word	0xff9f800f
 800453c:	f9ff800f 	.word	0xf9ff800f

08004540 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800455a:	4b6f      	ldr	r3, [pc, #444]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0203 	and.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d103      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
       ||
 800456e:	2b00      	cmp	r3, #0
 8004570:	d142      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e03f      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d018      	beq.n	80045b2 <RCCEx_PLLSAI2_Config+0x72>
 8004580:	2b03      	cmp	r3, #3
 8004582:	d825      	bhi.n	80045d0 <RCCEx_PLLSAI2_Config+0x90>
 8004584:	2b01      	cmp	r3, #1
 8004586:	d002      	beq.n	800458e <RCCEx_PLLSAI2_Config+0x4e>
 8004588:	2b02      	cmp	r3, #2
 800458a:	d009      	beq.n	80045a0 <RCCEx_PLLSAI2_Config+0x60>
 800458c:	e020      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800458e:	4b62      	ldr	r3, [pc, #392]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11d      	bne.n	80045d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459e:	e01a      	b.n	80045d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a0:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e013      	b.n	80045da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045b2:	4b59      	ldr	r3, [pc, #356]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045be:	4b56      	ldr	r3, [pc, #344]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ce:	e006      	b.n	80045de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e004      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80045de:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80045e6:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4949      	ldr	r1, [pc, #292]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 8086 	bne.w	800470c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004600:	4b45      	ldr	r3, [pc, #276]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a44      	ldr	r2, [pc, #272]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd fea4 	bl	8002358 <HAL_GetTick>
 8004610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004612:	e009      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004614:	f7fd fea0 	bl	8002358 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d902      	bls.n	8004628 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	73fb      	strb	r3, [r7, #15]
        break;
 8004626:	e005      	b.n	8004634 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ef      	bne.n	8004614 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d168      	bne.n	800470c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	4b35      	ldr	r3, [pc, #212]	; (800471c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	0211      	lsls	r1, r2, #8
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	06d2      	lsls	r2, r2, #27
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6852      	ldr	r2, [r2, #4]
 800465a:	3a01      	subs	r2, #1
 800465c:	0112      	lsls	r2, r2, #4
 800465e:	430a      	orrs	r2, r1
 8004660:	492d      	ldr	r1, [pc, #180]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	614b      	str	r3, [r1, #20]
 8004666:	e02d      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d115      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	0211      	lsls	r1, r2, #8
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6912      	ldr	r2, [r2, #16]
 8004680:	0852      	lsrs	r2, r2, #1
 8004682:	3a01      	subs	r2, #1
 8004684:	0552      	lsls	r2, r2, #21
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	3a01      	subs	r2, #1
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	430a      	orrs	r2, r1
 8004692:	4921      	ldr	r1, [pc, #132]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004694:	4313      	orrs	r3, r2
 8004696:	614b      	str	r3, [r1, #20]
 8004698:	e014      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800469a:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <RCCEx_PLLSAI2_Config+0x1e4>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6892      	ldr	r2, [r2, #8]
 80046a6:	0211      	lsls	r1, r2, #8
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6952      	ldr	r2, [r2, #20]
 80046ac:	0852      	lsrs	r2, r2, #1
 80046ae:	3a01      	subs	r2, #1
 80046b0:	0652      	lsls	r2, r2, #25
 80046b2:	4311      	orrs	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6852      	ldr	r2, [r2, #4]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	430a      	orrs	r2, r1
 80046be:	4916      	ldr	r1, [pc, #88]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fe42 	bl	8002358 <HAL_GetTick>
 80046d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046d6:	e009      	b.n	80046ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d8:	f7fd fe3e 	bl	8002358 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d902      	bls.n	80046ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ea:	e005      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ef      	beq.n	80046d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	4904      	ldr	r1, [pc, #16]	; (8004718 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	07ff800f 	.word	0x07ff800f
 8004720:	ff9f800f 	.word	0xff9f800f
 8004724:	f9ff800f 	.word	0xf9ff800f

08004728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e095      	b.n	8004866 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d009      	beq.n	8004760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	e005      	b.n	8004760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd fbd0 	bl	8001f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a0:	d902      	bls.n	80047a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e002      	b.n	80047ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047b6:	d007      	beq.n	80047c8 <HAL_SPI_Init+0xa0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	ea42 0103 	orr.w	r1, r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 0204 	and.w	r2, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004844:	ea42 0103 	orr.w	r1, r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_SPI_Transmit+0x22>
 800488c:	2302      	movs	r3, #2
 800488e:	e158      	b.n	8004b42 <HAL_SPI_Transmit+0x2d4>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004898:	f7fd fd5e 	bl	8002358 <HAL_GetTick>
 800489c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b2:	e13d      	b.n	8004b30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Transmit+0x52>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c4:	e134      	b.n	8004b30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2203      	movs	r2, #3
 80048ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004910:	d10f      	bne.n	8004932 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004930:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d007      	beq.n	8004950 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004958:	d94b      	bls.n	80049f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0xfa>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d13e      	bne.n	80049e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800498c:	e02b      	b.n	80049e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d112      	bne.n	80049c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c0:	e011      	b.n	80049e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c2:	f7fd fcc9 	bl	8002358 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d803      	bhi.n	80049da <HAL_SPI_Transmit+0x16c>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Transmit+0x172>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e4:	e0a4      	b.n	8004b30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ce      	bne.n	800498e <HAL_SPI_Transmit+0x120>
 80049f0:	e07c      	b.n	8004aec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Transmit+0x192>
 80049fa:	8afb      	ldrh	r3, [r7, #22]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d170      	bne.n	8004ae2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d912      	bls.n	8004a30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	881a      	ldrh	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b02      	subs	r3, #2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a2e:	e058      	b.n	8004ae2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a56:	e044      	b.n	8004ae2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d12b      	bne.n	8004abe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d912      	bls.n	8004a96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a94:	e025      	b.n	8004ae2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004abc:	e011      	b.n	8004ae2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004abe:	f7fd fc4b 	bl	8002358 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d803      	bhi.n	8004ad6 <HAL_SPI_Transmit+0x268>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_Transmit+0x26e>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ae0:	e026      	b.n	8004b30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1b5      	bne.n	8004a58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	6839      	ldr	r1, [r7, #0]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fce3 	bl	80054bc <SPI_EndRxTxTransaction>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e000      	b.n	8004b30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b088      	sub	sp, #32
 8004b4e:	af02      	add	r7, sp, #8
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b66:	d112      	bne.n	8004b8e <HAL_SPI_Receive+0x44>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10e      	bne.n	8004b8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2204      	movs	r2, #4
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f910 	bl	8004daa <HAL_SPI_TransmitReceive>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	e109      	b.n	8004da2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_SPI_Receive+0x52>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e102      	b.n	8004da2 <HAL_SPI_Receive+0x258>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba4:	f7fd fbd8 	bl	8002358 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bba:	e0e9      	b.n	8004d90 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_Receive+0x7e>
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bcc:	e0e0      	b.n	8004d90 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c18:	d908      	bls.n	8004c2c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e007      	b.n	8004c3c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d10f      	bne.n	8004c66 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d007      	beq.n	8004c84 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c8c:	d867      	bhi.n	8004d5e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c8e:	e030      	b.n	8004cf2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d117      	bne.n	8004cce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f103 020c 	add.w	r2, r3, #12
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ccc:	e011      	b.n	8004cf2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fd fb43 	bl	8002358 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Receive+0x19c>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x1a2>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cf0:	e04e      	b.n	8004d90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1c8      	bne.n	8004c90 <HAL_SPI_Receive+0x146>
 8004cfe:	e034      	b.n	8004d6a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d115      	bne.n	8004d3a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d38:	e011      	b.n	8004d5e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3a:	f7fd fb0d 	bl	8002358 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d803      	bhi.n	8004d52 <HAL_SPI_Receive+0x208>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x20e>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d5c:	e018      	b.n	8004d90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ca      	bne.n	8004d00 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fb4c 	bl	800540c <SPI_EndRxTransaction>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
 8004d8c:	e000      	b.n	8004d90 <HAL_SPI_Receive+0x246>
  }

error :
 8004d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b08a      	sub	sp, #40	; 0x28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004db8:	2301      	movs	r3, #1
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x26>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e1fb      	b.n	80051c8 <HAL_SPI_TransmitReceive+0x41e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd8:	f7fd fabe 	bl	8002358 <HAL_GetTick>
 8004ddc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004df4:	7efb      	ldrb	r3, [r7, #27]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d00e      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x6e>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e00:	d106      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x66>
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d003      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e16:	e1cd      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x80>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x80>
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e30:	e1c0      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d003      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2205      	movs	r2, #5
 8004e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	887a      	ldrh	r2, [r7, #2]
 8004e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	887a      	ldrh	r2, [r7, #2]
 8004e72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e88:	d802      	bhi.n	8004e90 <HAL_SPI_TransmitReceive+0xe6>
 8004e8a:	8a3b      	ldrh	r3, [r7, #16]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d908      	bls.n	8004ea2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	e007      	b.n	8004eb2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d007      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ed8:	d97c      	bls.n	8004fd4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x13e>
 8004ee2:	8a7b      	ldrh	r3, [r7, #18]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d169      	bne.n	8004fbc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0c:	e056      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d11b      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x1aa>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x1aa>
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d113      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d11c      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x1f2>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	1c9a      	adds	r2, r3, #2
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f9c:	f7fd f9dc 	bl	8002358 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d807      	bhi.n	8004fbc <HAL_SPI_TransmitReceive+0x212>
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d003      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fba:	e0fb      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1a3      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x164>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d19d      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x164>
 8004fd2:	e0df      	b.n	8005194 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x23a>
 8004fdc:	8a7b      	ldrh	r3, [r7, #18]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f040 80cb 	bne.w	800517a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d912      	bls.n	8005014 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	1c9a      	adds	r2, r3, #2
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b02      	subs	r3, #2
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005012:	e0b2      	b.n	800517a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503a:	e09e      	b.n	800517a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d134      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x30a>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02f      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x30a>
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	2b01      	cmp	r3, #1
 8005058:	d12c      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d912      	bls.n	800508a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b02      	subs	r3, #2
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005088:	e012      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d148      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x3aa>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d042      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d923      	bls.n	8005122 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	b292      	uxth	r2, r2
 80050e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b02      	subs	r3, #2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d81f      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	e016      	b.n	8005150 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f103 020c 	add.w	r2, r3, #12
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005150:	2301      	movs	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005154:	f7fd f900 	bl	8002358 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005160:	429a      	cmp	r2, r3
 8005162:	d803      	bhi.n	800516c <HAL_SPI_TransmitReceive+0x3c2>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d102      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x3c8>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005178:	e01c      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	f47f af5b 	bne.w	800503c <HAL_SPI_TransmitReceive+0x292>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	f47f af54 	bne.w	800503c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f98f 	bl	80054bc <SPI_EndRxTxTransaction>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60
 80051b0:	e000      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80051b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e0:	f7fd f8ba 	bl	8002358 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f0:	f7fd f8b2 	bl	8002358 <HAL_GetTick>
 80051f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051f6:	4b39      	ldr	r3, [pc, #228]	; (80052dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	015b      	lsls	r3, r3, #5
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005206:	e054      	b.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d050      	beq.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005210:	f7fd f8a2 	bl	8002358 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d902      	bls.n	8005226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13d      	bne.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523e:	d111      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	d004      	beq.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d107      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526c:	d10f      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e017      	b.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d19b      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052f2:	f7fd f831 	bl	8002358 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005302:	f7fd f829 	bl	8002358 <HAL_GetTick>
 8005306:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005310:	4b3d      	ldr	r3, [pc, #244]	; (8005408 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	00da      	lsls	r2, r3, #3
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	0d1b      	lsrs	r3, r3, #20
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005328:	e060      	b.n	80053ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005330:	d107      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005340:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d050      	beq.n	80053ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534a:	f7fd f805 	bl	8002358 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	429a      	cmp	r2, r3
 8005358:	d902      	bls.n	8005360 <SPI_WaitFifoStateUntilTimeout+0x80>
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d13d      	bne.n	80053dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800536e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005378:	d111      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	d004      	beq.n	800538e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538c:	d107      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	d10f      	bne.n	80053c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e010      	b.n	80053fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d196      	bne.n	800532a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000000 	.word	0x20000000

0800540c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005420:	d111      	bne.n	8005446 <SPI_EndRxTransaction+0x3a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d004      	beq.n	8005436 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005434:	d107      	bne.n	8005446 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff febd 	bl	80051d0 <SPI_WaitFlagStateUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e023      	b.n	80054b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005474:	d11d      	bne.n	80054b2 <SPI_EndRxTransaction+0xa6>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547e:	d004      	beq.n	800548a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d113      	bne.n	80054b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff22 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e000      	b.n	80054b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff ff03 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e027      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff fe68 	bl	80051d0 <SPI_WaitFlagStateUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e014      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fedc 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e000      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e049      	b.n	80055ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fd64 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 f9ee 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e04f      	b.n	80056b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a23      	ldr	r2, [pc, #140]	; (80056bc <HAL_TIM_Base_Start_IT+0xc4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d018      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1f      	ldr	r2, [pc, #124]	; (80056c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIM_Base_Start_IT+0x76>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d115      	bne.n	800569a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d015      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0xb4>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d011      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	e008      	b.n	80056ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e000      	b.n	80056ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40013400 	.word	0x40013400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	00010007 	.word	0x00010007

080056d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0202 	mvn.w	r2, #2
 8005704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f905 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8f7 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f908 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d122      	bne.n	8005788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0204 	mvn.w	r2, #4
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8db 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8cd 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8de 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b08      	cmp	r3, #8
 8005794:	d122      	bne.n	80057dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0208 	mvn.w	r2, #8
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2204      	movs	r2, #4
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8b1 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 80057c8:	e005      	b.n	80057d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8a3 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f8b4 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d122      	bne.n	8005830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d11b      	bne.n	8005830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0210 	mvn.w	r2, #16
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2208      	movs	r2, #8
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f887 	bl	800592a <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f879 	bl	8005916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f88a 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10e      	bne.n	800585c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0201 	mvn.w	r2, #1
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc fb1c 	bl	8001e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d10e      	bne.n	8005888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d107      	bne.n	8005888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f914 	bl	8005ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	d10e      	bne.n	80058b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d107      	bne.n	80058b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f907 	bl	8005ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d10e      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d107      	bne.n	80058e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f838 	bl	8005952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d10e      	bne.n	800590e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d107      	bne.n	800590e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f06f 0220 	mvn.w	r2, #32
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8c7 	bl	8005a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d01b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d017      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0f      	ldr	r2, [pc, #60]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e042      	b.n	8005b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fc fac3 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	; 0x24
 8005b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8c4 	bl	8005ca8 <UART_SetConfig>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e022      	b.n	8005b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb80 	bl	8006238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fc07 	bl	800637c <UART_CheckIdleState>
 8005b6e:	4603      	mov	r3, r0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	f040 8084 	bne.w	8005c9c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Transmit+0x28>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e07c      	b.n	8005c9e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Transmit+0x3a>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e075      	b.n	8005c9e <HAL_UART_Transmit+0x126>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2221      	movs	r2, #33	; 0x21
 8005bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fc fbc5 	bl	8002358 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x84>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c0c:	e02d      	b.n	8005c6a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fbfa 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e03a      	b.n	8005c9e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	3302      	adds	r3, #2
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e008      	b.n	8005c58 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1cb      	bne.n	8005c0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2140      	movs	r1, #64	; 0x40
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fbc6 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	b5b0      	push	{r4, r5, r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4bb1      	ldr	r3, [pc, #708]	; (8005f98 <UART_SetConfig+0x2f0>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	69f9      	ldr	r1, [r7, #28]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4aa6      	ldr	r2, [pc, #664]	; (8005f9c <UART_SetConfig+0x2f4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	f023 010f 	bic.w	r1, r3, #15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a97      	ldr	r2, [pc, #604]	; (8005fa0 <UART_SetConfig+0x2f8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d120      	bne.n	8005d8a <UART_SetConfig+0xe2>
 8005d48:	4b96      	ldr	r3, [pc, #600]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d816      	bhi.n	8005d84 <UART_SetConfig+0xdc>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0xb4>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d73 	.word	0x08005d73
 8005d68:	08005d7f 	.word	0x08005d7f
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e0e7      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005d72:	2302      	movs	r3, #2
 8005d74:	76fb      	strb	r3, [r7, #27]
 8005d76:	e0e4      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	e0e1      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	76fb      	strb	r3, [r7, #27]
 8005d82:	e0de      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005d84:	2310      	movs	r3, #16
 8005d86:	76fb      	strb	r3, [r7, #27]
 8005d88:	e0db      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a86      	ldr	r2, [pc, #536]	; (8005fa8 <UART_SetConfig+0x300>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d132      	bne.n	8005dfa <UART_SetConfig+0x152>
 8005d94:	4b83      	ldr	r3, [pc, #524]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b0c      	cmp	r3, #12
 8005da0:	d828      	bhi.n	8005df4 <UART_SetConfig+0x14c>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x100>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005ddd 	.word	0x08005ddd
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005df5 	.word	0x08005df5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005de9 	.word	0x08005de9
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005df5 	.word	0x08005df5
 8005dc8:	08005de3 	.word	0x08005de3
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005df5 	.word	0x08005df5
 8005dd8:	08005def 	.word	0x08005def
 8005ddc:	2300      	movs	r3, #0
 8005dde:	76fb      	strb	r3, [r7, #27]
 8005de0:	e0af      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005de2:	2302      	movs	r3, #2
 8005de4:	76fb      	strb	r3, [r7, #27]
 8005de6:	e0ac      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005de8:	2304      	movs	r3, #4
 8005dea:	76fb      	strb	r3, [r7, #27]
 8005dec:	e0a9      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005dee:	2308      	movs	r3, #8
 8005df0:	76fb      	strb	r3, [r7, #27]
 8005df2:	e0a6      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005df4:	2310      	movs	r3, #16
 8005df6:	76fb      	strb	r3, [r7, #27]
 8005df8:	e0a3      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6b      	ldr	r2, [pc, #428]	; (8005fac <UART_SetConfig+0x304>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d120      	bne.n	8005e46 <UART_SetConfig+0x19e>
 8005e04:	4b67      	ldr	r3, [pc, #412]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e0e:	2b30      	cmp	r3, #48	; 0x30
 8005e10:	d013      	beq.n	8005e3a <UART_SetConfig+0x192>
 8005e12:	2b30      	cmp	r3, #48	; 0x30
 8005e14:	d814      	bhi.n	8005e40 <UART_SetConfig+0x198>
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d009      	beq.n	8005e2e <UART_SetConfig+0x186>
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d810      	bhi.n	8005e40 <UART_SetConfig+0x198>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <UART_SetConfig+0x180>
 8005e22:	2b10      	cmp	r3, #16
 8005e24:	d006      	beq.n	8005e34 <UART_SetConfig+0x18c>
 8005e26:	e00b      	b.n	8005e40 <UART_SetConfig+0x198>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	76fb      	strb	r3, [r7, #27]
 8005e2c:	e089      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	76fb      	strb	r3, [r7, #27]
 8005e32:	e086      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e34:	2304      	movs	r3, #4
 8005e36:	76fb      	strb	r3, [r7, #27]
 8005e38:	e083      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	76fb      	strb	r3, [r7, #27]
 8005e3e:	e080      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e40:	2310      	movs	r3, #16
 8005e42:	76fb      	strb	r3, [r7, #27]
 8005e44:	e07d      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a59      	ldr	r2, [pc, #356]	; (8005fb0 <UART_SetConfig+0x308>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d120      	bne.n	8005e92 <UART_SetConfig+0x1ea>
 8005e50:	4b54      	ldr	r3, [pc, #336]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e5c:	d013      	beq.n	8005e86 <UART_SetConfig+0x1de>
 8005e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e60:	d814      	bhi.n	8005e8c <UART_SetConfig+0x1e4>
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	d009      	beq.n	8005e7a <UART_SetConfig+0x1d2>
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d810      	bhi.n	8005e8c <UART_SetConfig+0x1e4>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <UART_SetConfig+0x1cc>
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d006      	beq.n	8005e80 <UART_SetConfig+0x1d8>
 8005e72:	e00b      	b.n	8005e8c <UART_SetConfig+0x1e4>
 8005e74:	2300      	movs	r3, #0
 8005e76:	76fb      	strb	r3, [r7, #27]
 8005e78:	e063      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	76fb      	strb	r3, [r7, #27]
 8005e7e:	e060      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e80:	2304      	movs	r3, #4
 8005e82:	76fb      	strb	r3, [r7, #27]
 8005e84:	e05d      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e86:	2308      	movs	r3, #8
 8005e88:	76fb      	strb	r3, [r7, #27]
 8005e8a:	e05a      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	76fb      	strb	r3, [r7, #27]
 8005e90:	e057      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a47      	ldr	r2, [pc, #284]	; (8005fb4 <UART_SetConfig+0x30c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d125      	bne.n	8005ee8 <UART_SetConfig+0x240>
 8005e9c:	4b41      	ldr	r3, [pc, #260]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eaa:	d017      	beq.n	8005edc <UART_SetConfig+0x234>
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb0:	d817      	bhi.n	8005ee2 <UART_SetConfig+0x23a>
 8005eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb6:	d00b      	beq.n	8005ed0 <UART_SetConfig+0x228>
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d811      	bhi.n	8005ee2 <UART_SetConfig+0x23a>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <UART_SetConfig+0x222>
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec6:	d006      	beq.n	8005ed6 <UART_SetConfig+0x22e>
 8005ec8:	e00b      	b.n	8005ee2 <UART_SetConfig+0x23a>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	76fb      	strb	r3, [r7, #27]
 8005ece:	e038      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	76fb      	strb	r3, [r7, #27]
 8005ed4:	e035      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	76fb      	strb	r3, [r7, #27]
 8005eda:	e032      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005edc:	2308      	movs	r3, #8
 8005ede:	76fb      	strb	r3, [r7, #27]
 8005ee0:	e02f      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	76fb      	strb	r3, [r7, #27]
 8005ee6:	e02c      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <UART_SetConfig+0x2f4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d125      	bne.n	8005f3e <UART_SetConfig+0x296>
 8005ef2:	4b2c      	ldr	r3, [pc, #176]	; (8005fa4 <UART_SetConfig+0x2fc>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f00:	d017      	beq.n	8005f32 <UART_SetConfig+0x28a>
 8005f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f06:	d817      	bhi.n	8005f38 <UART_SetConfig+0x290>
 8005f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0c:	d00b      	beq.n	8005f26 <UART_SetConfig+0x27e>
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d811      	bhi.n	8005f38 <UART_SetConfig+0x290>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <UART_SetConfig+0x278>
 8005f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1c:	d006      	beq.n	8005f2c <UART_SetConfig+0x284>
 8005f1e:	e00b      	b.n	8005f38 <UART_SetConfig+0x290>
 8005f20:	2300      	movs	r3, #0
 8005f22:	76fb      	strb	r3, [r7, #27]
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	76fb      	strb	r3, [r7, #27]
 8005f2a:	e00a      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	76fb      	strb	r3, [r7, #27]
 8005f30:	e007      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005f32:	2308      	movs	r3, #8
 8005f34:	76fb      	strb	r3, [r7, #27]
 8005f36:	e004      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e001      	b.n	8005f42 <UART_SetConfig+0x29a>
 8005f3e:	2310      	movs	r3, #16
 8005f40:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <UART_SetConfig+0x2f4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	f040 809f 	bne.w	800608c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f4e:	7efb      	ldrb	r3, [r7, #27]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d837      	bhi.n	8005fc4 <UART_SetConfig+0x31c>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x2b4>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005fc5 	.word	0x08005fc5
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005fc5 	.word	0x08005fc5
 8005f6c:	08005f8f 	.word	0x08005f8f
 8005f70:	08005fc5 	.word	0x08005fc5
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005fc5 	.word	0x08005fc5
 8005f7c:	08005fbd 	.word	0x08005fbd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fd fd6e 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005f84:	6178      	str	r0, [r7, #20]
        break;
 8005f86:	e022      	b.n	8005fce <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <UART_SetConfig+0x310>)
 8005f8a:	617b      	str	r3, [r7, #20]
        break;
 8005f8c:	e01f      	b.n	8005fce <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8e:	f7fd fcd1 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8005f92:	6178      	str	r0, [r7, #20]
        break;
 8005f94:	e01b      	b.n	8005fce <UART_SetConfig+0x326>
 8005f96:	bf00      	nop
 8005f98:	cfff69f3 	.word	0xcfff69f3
 8005f9c:	40008000 	.word	0x40008000
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40004c00 	.word	0x40004c00
 8005fb4:	40005000 	.word	0x40005000
 8005fb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc0:	617b      	str	r3, [r7, #20]
        break;
 8005fc2:	e004      	b.n	8005fce <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	76bb      	strb	r3, [r7, #26]
        break;
 8005fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8119 	beq.w	8006208 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	4a95      	ldr	r2, [pc, #596]	; (8006230 <UART_SetConfig+0x588>)
 8005fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d305      	bcc.n	8006006 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	d902      	bls.n	800600c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	76bb      	strb	r3, [r7, #26]
 800600a:	e0fd      	b.n	8006208 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	4618      	mov	r0, r3
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	4a85      	ldr	r2, [pc, #532]	; (8006230 <UART_SetConfig+0x588>)
 800601a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601e:	b29a      	uxth	r2, r3
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f7fa fda8 	bl	8000b78 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	020b      	lsls	r3, r1, #8
 800603a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800603e:	0202      	lsls	r2, r0, #8
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6849      	ldr	r1, [r1, #4]
 8006044:	0849      	lsrs	r1, r1, #1
 8006046:	4608      	mov	r0, r1
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	1814      	adds	r4, r2, r0
 800604e:	eb43 0501 	adc.w	r5, r3, r1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	461a      	mov	r2, r3
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa fd8a 	bl	8000b78 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006072:	d308      	bcc.n	8006086 <UART_SetConfig+0x3de>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e0c0      	b.n	8006208 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	76bb      	strb	r3, [r7, #26]
 800608a:	e0bd      	b.n	8006208 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006094:	d164      	bne.n	8006160 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8006096:	7efb      	ldrb	r3, [r7, #27]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d828      	bhi.n	80060ee <UART_SetConfig+0x446>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <UART_SetConfig+0x3fc>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060ef 	.word	0x080060ef
 80060b4:	080060df 	.word	0x080060df
 80060b8:	080060ef 	.word	0x080060ef
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	080060e7 	.word	0x080060e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7fd fcca 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 80060cc:	6178      	str	r0, [r7, #20]
        break;
 80060ce:	e013      	b.n	80060f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7fd fcdc 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 80060d4:	6178      	str	r0, [r7, #20]
        break;
 80060d6:	e00f      	b.n	80060f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b56      	ldr	r3, [pc, #344]	; (8006234 <UART_SetConfig+0x58c>)
 80060da:	617b      	str	r3, [r7, #20]
        break;
 80060dc:	e00c      	b.n	80060f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060de:	f7fd fc29 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80060e2:	6178      	str	r0, [r7, #20]
        break;
 80060e4:	e008      	b.n	80060f8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ea:	617b      	str	r3, [r7, #20]
        break;
 80060ec:	e004      	b.n	80060f8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	76bb      	strb	r3, [r7, #26]
        break;
 80060f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8084 	beq.w	8006208 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	4a4a      	ldr	r2, [pc, #296]	; (8006230 <UART_SetConfig+0x588>)
 8006106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800610a:	461a      	mov	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006112:	005a      	lsls	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	441a      	add	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b0f      	cmp	r3, #15
 800612a:	d916      	bls.n	800615a <UART_SetConfig+0x4b2>
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006132:	d212      	bcs.n	800615a <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f023 030f 	bic.w	r3, r3, #15
 800613c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	b29b      	uxth	r3, r3
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	b29a      	uxth	r2, r3
 800614a:	89fb      	ldrh	r3, [r7, #14]
 800614c:	4313      	orrs	r3, r2
 800614e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	89fa      	ldrh	r2, [r7, #14]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	e056      	b.n	8006208 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	76bb      	strb	r3, [r7, #26]
 800615e:	e053      	b.n	8006208 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006160:	7efb      	ldrb	r3, [r7, #27]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d827      	bhi.n	80061b6 <UART_SetConfig+0x50e>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x4c4>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061a7 	.word	0x080061a7
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061b7 	.word	0x080061b7
 800618c:	080061af 	.word	0x080061af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006190:	f7fd fc66 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8006194:	6178      	str	r0, [r7, #20]
        break;
 8006196:	e013      	b.n	80061c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd fc78 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 800619c:	6178      	str	r0, [r7, #20]
        break;
 800619e:	e00f      	b.n	80061c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b24      	ldr	r3, [pc, #144]	; (8006234 <UART_SetConfig+0x58c>)
 80061a2:	617b      	str	r3, [r7, #20]
        break;
 80061a4:	e00c      	b.n	80061c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fd fbc5 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80061aa:	6178      	str	r0, [r7, #20]
        break;
 80061ac:	e008      	b.n	80061c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	617b      	str	r3, [r7, #20]
        break;
 80061b4:	e004      	b.n	80061c0 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	76bb      	strb	r3, [r7, #26]
        break;
 80061be:	bf00      	nop
    }

    if (pclk != 0U)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d020      	beq.n	8006208 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	4a19      	ldr	r2, [pc, #100]	; (8006230 <UART_SetConfig+0x588>)
 80061cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d0:	461a      	mov	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b0f      	cmp	r3, #15
 80061ee:	d909      	bls.n	8006204 <UART_SetConfig+0x55c>
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d205      	bcs.n	8006204 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e001      	b.n	8006208 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006224:	7ebb      	ldrb	r3, [r7, #26]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bdb0      	pop	{r4, r5, r7, pc}
 800622e:	bf00      	nop
 8006230:	080077f8 	.word	0x080077f8
 8006234:	00f42400 	.word	0x00f42400

08006238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006336:	d10a      	bne.n	800634e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800638c:	f7fb ffe4 	bl	8002358 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10e      	bne.n	80063be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f82f 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e025      	b.n	800640a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d10e      	bne.n	80063ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f819 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e00f      	b.n	800640a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b09c      	sub	sp, #112	; 0x70
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006422:	e0a9      	b.n	8006578 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	f000 80a5 	beq.w	8006578 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fb ff93 	bl	8002358 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <UART_WaitOnFlagUntilTimeout+0x32>
 800643e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006440:	2b00      	cmp	r3, #0
 8006442:	d140      	bne.n	80064c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006458:	667b      	str	r3, [r7, #100]	; 0x64
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006464:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	663b      	str	r3, [r7, #96]	; 0x60
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006496:	64ba      	str	r2, [r7, #72]	; 0x48
 8006498:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800649c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e5      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e069      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d051      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e2:	d149      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
 800650e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e6      	bne.n	80064ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	613b      	str	r3, [r7, #16]
   return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	66bb      	str	r3, [r7, #104]	; 0x68
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006540:	623a      	str	r2, [r7, #32]
 8006542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	61bb      	str	r3, [r7, #24]
   return(result);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e5      	bne.n	8006520 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e010      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69da      	ldr	r2, [r3, #28]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4013      	ands	r3, r2
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	429a      	cmp	r2, r3
 8006594:	f43f af46 	beq.w	8006424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3770      	adds	r7, #112	; 0x70
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e027      	b.n	8006608 <HAL_UARTEx_DisableFifoMode+0x66>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e02d      	b.n	8006688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	; 0x24
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f84f 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e02d      	b.n	8006704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f811 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800672c:	e031      	b.n	8006792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800672e:	2308      	movs	r3, #8
 8006730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006732:	2308      	movs	r3, #8
 8006734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0e5b      	lsrs	r3, r3, #25
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	0f5b      	lsrs	r3, r3, #29
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	7b3a      	ldrb	r2, [r7, #12]
 800675a:	4911      	ldr	r1, [pc, #68]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800675c:	5c8a      	ldrb	r2, [r1, r2]
 800675e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006762:	7b3a      	ldrb	r2, [r7, #12]
 8006764:	490f      	ldr	r1, [pc, #60]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006768:	fb93 f3f2 	sdiv	r3, r3, r2
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	7b7a      	ldrb	r2, [r7, #13]
 8006778:	4909      	ldr	r1, [pc, #36]	; (80067a0 <UARTEx_SetNbDataToProcess+0x94>)
 800677a:	5c8a      	ldrb	r2, [r1, r2]
 800677c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	4908      	ldr	r1, [pc, #32]	; (80067a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006786:	fb93 f3f2 	sdiv	r3, r3, r2
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	08007810 	.word	0x08007810
 80067a4:	08007818 	.word	0x08007818

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	; (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2000000c 	.word	0x2000000c

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	; (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	; (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	; (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	; (80067f8 <__libc_init_array+0x44>)
 80067c8:	f000 ffe4 	bl	8007794 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	08007870 	.word	0x08007870
 80067f0:	08007870 	.word	0x08007870
 80067f4:	08007870 	.word	0x08007870
 80067f8:	08007874 	.word	0x08007874

080067fc <memcpy>:
 80067fc:	440a      	add	r2, r1
 80067fe:	4291      	cmp	r1, r2
 8006800:	f100 33ff 	add.w	r3, r0, #4294967295
 8006804:	d100      	bne.n	8006808 <memcpy+0xc>
 8006806:	4770      	bx	lr
 8006808:	b510      	push	{r4, lr}
 800680a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800680e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006812:	4291      	cmp	r1, r2
 8006814:	d1f9      	bne.n	800680a <memcpy+0xe>
 8006816:	bd10      	pop	{r4, pc}

08006818 <memset>:
 8006818:	4402      	add	r2, r0
 800681a:	4603      	mov	r3, r0
 800681c:	4293      	cmp	r3, r2
 800681e:	d100      	bne.n	8006822 <memset+0xa>
 8006820:	4770      	bx	lr
 8006822:	f803 1b01 	strb.w	r1, [r3], #1
 8006826:	e7f9      	b.n	800681c <memset+0x4>

08006828 <pow>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	ec59 8b10 	vmov	r8, r9, d0
 8006830:	ec57 6b11 	vmov	r6, r7, d1
 8006834:	f000 f8a8 	bl	8006988 <__ieee754_pow>
 8006838:	4b4e      	ldr	r3, [pc, #312]	; (8006974 <pow+0x14c>)
 800683a:	f993 3000 	ldrsb.w	r3, [r3]
 800683e:	3301      	adds	r3, #1
 8006840:	ec55 4b10 	vmov	r4, r5, d0
 8006844:	d015      	beq.n	8006872 <pow+0x4a>
 8006846:	4632      	mov	r2, r6
 8006848:	463b      	mov	r3, r7
 800684a:	4630      	mov	r0, r6
 800684c:	4639      	mov	r1, r7
 800684e:	f7fa f92d 	bl	8000aac <__aeabi_dcmpun>
 8006852:	b970      	cbnz	r0, 8006872 <pow+0x4a>
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7fa f926 	bl	8000aac <__aeabi_dcmpun>
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	b148      	cbz	r0, 800687a <pow+0x52>
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7fa f8ed 	bl	8000a48 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d17d      	bne.n	800696e <pow+0x146>
 8006872:	ec45 4b10 	vmov	d0, r4, r5
 8006876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7fa f8e3 	bl	8000a48 <__aeabi_dcmpeq>
 8006882:	b1e0      	cbz	r0, 80068be <pow+0x96>
 8006884:	2200      	movs	r2, #0
 8006886:	2300      	movs	r3, #0
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7fa f8dc 	bl	8000a48 <__aeabi_dcmpeq>
 8006890:	2800      	cmp	r0, #0
 8006892:	d16c      	bne.n	800696e <pow+0x146>
 8006894:	ec47 6b10 	vmov	d0, r6, r7
 8006898:	f000 fe55 	bl	8007546 <finite>
 800689c:	2800      	cmp	r0, #0
 800689e:	d0e8      	beq.n	8006872 <pow+0x4a>
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7fa f8d8 	bl	8000a5c <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d0e0      	beq.n	8006872 <pow+0x4a>
 80068b0:	f7ff ff7a 	bl	80067a8 <__errno>
 80068b4:	2321      	movs	r3, #33	; 0x21
 80068b6:	6003      	str	r3, [r0, #0]
 80068b8:	2400      	movs	r4, #0
 80068ba:	4d2f      	ldr	r5, [pc, #188]	; (8006978 <pow+0x150>)
 80068bc:	e7d9      	b.n	8006872 <pow+0x4a>
 80068be:	ec45 4b10 	vmov	d0, r4, r5
 80068c2:	f000 fe40 	bl	8007546 <finite>
 80068c6:	bbb8      	cbnz	r0, 8006938 <pow+0x110>
 80068c8:	ec49 8b10 	vmov	d0, r8, r9
 80068cc:	f000 fe3b 	bl	8007546 <finite>
 80068d0:	b390      	cbz	r0, 8006938 <pow+0x110>
 80068d2:	ec47 6b10 	vmov	d0, r6, r7
 80068d6:	f000 fe36 	bl	8007546 <finite>
 80068da:	b368      	cbz	r0, 8006938 <pow+0x110>
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	4620      	mov	r0, r4
 80068e2:	4629      	mov	r1, r5
 80068e4:	f7fa f8e2 	bl	8000aac <__aeabi_dcmpun>
 80068e8:	b160      	cbz	r0, 8006904 <pow+0xdc>
 80068ea:	f7ff ff5d 	bl	80067a8 <__errno>
 80068ee:	2321      	movs	r3, #33	; 0x21
 80068f0:	6003      	str	r3, [r0, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7f9 ff67 	bl	80007cc <__aeabi_ddiv>
 80068fe:	4604      	mov	r4, r0
 8006900:	460d      	mov	r5, r1
 8006902:	e7b6      	b.n	8006872 <pow+0x4a>
 8006904:	f7ff ff50 	bl	80067a8 <__errno>
 8006908:	2322      	movs	r3, #34	; 0x22
 800690a:	6003      	str	r3, [r0, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa f8a2 	bl	8000a5c <__aeabi_dcmplt>
 8006918:	2400      	movs	r4, #0
 800691a:	b158      	cbz	r0, 8006934 <pow+0x10c>
 800691c:	ec47 6b10 	vmov	d0, r6, r7
 8006920:	f000 fe26 	bl	8007570 <rint>
 8006924:	4632      	mov	r2, r6
 8006926:	ec51 0b10 	vmov	r0, r1, d0
 800692a:	463b      	mov	r3, r7
 800692c:	f7fa f88c 	bl	8000a48 <__aeabi_dcmpeq>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0c2      	beq.n	80068ba <pow+0x92>
 8006934:	4d11      	ldr	r5, [pc, #68]	; (800697c <pow+0x154>)
 8006936:	e79c      	b.n	8006872 <pow+0x4a>
 8006938:	2200      	movs	r2, #0
 800693a:	2300      	movs	r3, #0
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7fa f882 	bl	8000a48 <__aeabi_dcmpeq>
 8006944:	2800      	cmp	r0, #0
 8006946:	d094      	beq.n	8006872 <pow+0x4a>
 8006948:	ec49 8b10 	vmov	d0, r8, r9
 800694c:	f000 fdfb 	bl	8007546 <finite>
 8006950:	2800      	cmp	r0, #0
 8006952:	d08e      	beq.n	8006872 <pow+0x4a>
 8006954:	ec47 6b10 	vmov	d0, r6, r7
 8006958:	f000 fdf5 	bl	8007546 <finite>
 800695c:	2800      	cmp	r0, #0
 800695e:	d088      	beq.n	8006872 <pow+0x4a>
 8006960:	f7ff ff22 	bl	80067a8 <__errno>
 8006964:	2322      	movs	r3, #34	; 0x22
 8006966:	6003      	str	r3, [r0, #0]
 8006968:	2400      	movs	r4, #0
 800696a:	2500      	movs	r5, #0
 800696c:	e781      	b.n	8006872 <pow+0x4a>
 800696e:	4d04      	ldr	r5, [pc, #16]	; (8006980 <pow+0x158>)
 8006970:	2400      	movs	r4, #0
 8006972:	e77e      	b.n	8006872 <pow+0x4a>
 8006974:	20000070 	.word	0x20000070
 8006978:	fff00000 	.word	0xfff00000
 800697c:	7ff00000 	.word	0x7ff00000
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	00000000 	.word	0x00000000

08006988 <__ieee754_pow>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	ed2d 8b06 	vpush	{d8-d10}
 8006990:	b08d      	sub	sp, #52	; 0x34
 8006992:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006996:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800699a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800699e:	ea56 0100 	orrs.w	r1, r6, r0
 80069a2:	ec53 2b10 	vmov	r2, r3, d0
 80069a6:	f000 84d1 	beq.w	800734c <__ieee754_pow+0x9c4>
 80069aa:	497f      	ldr	r1, [pc, #508]	; (8006ba8 <__ieee754_pow+0x220>)
 80069ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80069b0:	428c      	cmp	r4, r1
 80069b2:	ee10 8a10 	vmov	r8, s0
 80069b6:	4699      	mov	r9, r3
 80069b8:	dc09      	bgt.n	80069ce <__ieee754_pow+0x46>
 80069ba:	d103      	bne.n	80069c4 <__ieee754_pow+0x3c>
 80069bc:	b97a      	cbnz	r2, 80069de <__ieee754_pow+0x56>
 80069be:	42a6      	cmp	r6, r4
 80069c0:	dd02      	ble.n	80069c8 <__ieee754_pow+0x40>
 80069c2:	e00c      	b.n	80069de <__ieee754_pow+0x56>
 80069c4:	428e      	cmp	r6, r1
 80069c6:	dc02      	bgt.n	80069ce <__ieee754_pow+0x46>
 80069c8:	428e      	cmp	r6, r1
 80069ca:	d110      	bne.n	80069ee <__ieee754_pow+0x66>
 80069cc:	b178      	cbz	r0, 80069ee <__ieee754_pow+0x66>
 80069ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80069d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069d6:	ea54 0308 	orrs.w	r3, r4, r8
 80069da:	f000 84b7 	beq.w	800734c <__ieee754_pow+0x9c4>
 80069de:	4873      	ldr	r0, [pc, #460]	; (8006bac <__ieee754_pow+0x224>)
 80069e0:	b00d      	add	sp, #52	; 0x34
 80069e2:	ecbd 8b06 	vpop	{d8-d10}
 80069e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f000 bdb9 	b.w	8007560 <nan>
 80069ee:	f1b9 0f00 	cmp.w	r9, #0
 80069f2:	da36      	bge.n	8006a62 <__ieee754_pow+0xda>
 80069f4:	496e      	ldr	r1, [pc, #440]	; (8006bb0 <__ieee754_pow+0x228>)
 80069f6:	428e      	cmp	r6, r1
 80069f8:	dc51      	bgt.n	8006a9e <__ieee754_pow+0x116>
 80069fa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80069fe:	428e      	cmp	r6, r1
 8006a00:	f340 84af 	ble.w	8007362 <__ieee754_pow+0x9da>
 8006a04:	1531      	asrs	r1, r6, #20
 8006a06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006a0a:	2914      	cmp	r1, #20
 8006a0c:	dd0f      	ble.n	8006a2e <__ieee754_pow+0xa6>
 8006a0e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006a12:	fa20 fc01 	lsr.w	ip, r0, r1
 8006a16:	fa0c f101 	lsl.w	r1, ip, r1
 8006a1a:	4281      	cmp	r1, r0
 8006a1c:	f040 84a1 	bne.w	8007362 <__ieee754_pow+0x9da>
 8006a20:	f00c 0c01 	and.w	ip, ip, #1
 8006a24:	f1cc 0102 	rsb	r1, ip, #2
 8006a28:	9100      	str	r1, [sp, #0]
 8006a2a:	b180      	cbz	r0, 8006a4e <__ieee754_pow+0xc6>
 8006a2c:	e059      	b.n	8006ae2 <__ieee754_pow+0x15a>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d155      	bne.n	8006ade <__ieee754_pow+0x156>
 8006a32:	f1c1 0114 	rsb	r1, r1, #20
 8006a36:	fa46 fc01 	asr.w	ip, r6, r1
 8006a3a:	fa0c f101 	lsl.w	r1, ip, r1
 8006a3e:	42b1      	cmp	r1, r6
 8006a40:	f040 848c 	bne.w	800735c <__ieee754_pow+0x9d4>
 8006a44:	f00c 0c01 	and.w	ip, ip, #1
 8006a48:	f1cc 0102 	rsb	r1, ip, #2
 8006a4c:	9100      	str	r1, [sp, #0]
 8006a4e:	4959      	ldr	r1, [pc, #356]	; (8006bb4 <__ieee754_pow+0x22c>)
 8006a50:	428e      	cmp	r6, r1
 8006a52:	d12d      	bne.n	8006ab0 <__ieee754_pow+0x128>
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	da79      	bge.n	8006b4c <__ieee754_pow+0x1c4>
 8006a58:	4956      	ldr	r1, [pc, #344]	; (8006bb4 <__ieee754_pow+0x22c>)
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7f9 feb6 	bl	80007cc <__aeabi_ddiv>
 8006a60:	e016      	b.n	8006a90 <__ieee754_pow+0x108>
 8006a62:	2100      	movs	r1, #0
 8006a64:	9100      	str	r1, [sp, #0]
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d13b      	bne.n	8006ae2 <__ieee754_pow+0x15a>
 8006a6a:	494f      	ldr	r1, [pc, #316]	; (8006ba8 <__ieee754_pow+0x220>)
 8006a6c:	428e      	cmp	r6, r1
 8006a6e:	d1ee      	bne.n	8006a4e <__ieee754_pow+0xc6>
 8006a70:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a78:	ea53 0308 	orrs.w	r3, r3, r8
 8006a7c:	f000 8466 	beq.w	800734c <__ieee754_pow+0x9c4>
 8006a80:	4b4d      	ldr	r3, [pc, #308]	; (8006bb8 <__ieee754_pow+0x230>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	dd0d      	ble.n	8006aa2 <__ieee754_pow+0x11a>
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	f280 8464 	bge.w	8007354 <__ieee754_pow+0x9cc>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	ec41 0b10 	vmov	d0, r0, r1
 8006a94:	b00d      	add	sp, #52	; 0x34
 8006a96:	ecbd 8b06 	vpop	{d8-d10}
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	e7e0      	b.n	8006a64 <__ieee754_pow+0xdc>
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	daf2      	bge.n	8006a8c <__ieee754_pow+0x104>
 8006aa6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006aaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006aae:	e7ef      	b.n	8006a90 <__ieee754_pow+0x108>
 8006ab0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006ab4:	d104      	bne.n	8006ac0 <__ieee754_pow+0x138>
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f7f9 fd5d 	bl	8000578 <__aeabi_dmul>
 8006abe:	e7e7      	b.n	8006a90 <__ieee754_pow+0x108>
 8006ac0:	493e      	ldr	r1, [pc, #248]	; (8006bbc <__ieee754_pow+0x234>)
 8006ac2:	428f      	cmp	r7, r1
 8006ac4:	d10d      	bne.n	8006ae2 <__ieee754_pow+0x15a>
 8006ac6:	f1b9 0f00 	cmp.w	r9, #0
 8006aca:	db0a      	blt.n	8006ae2 <__ieee754_pow+0x15a>
 8006acc:	ec43 2b10 	vmov	d0, r2, r3
 8006ad0:	b00d      	add	sp, #52	; 0x34
 8006ad2:	ecbd 8b06 	vpop	{d8-d10}
 8006ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	f000 bc77 	b.w	80073cc <__ieee754_sqrt>
 8006ade:	2100      	movs	r1, #0
 8006ae0:	9100      	str	r1, [sp, #0]
 8006ae2:	ec43 2b10 	vmov	d0, r2, r3
 8006ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aea:	f000 fd23 	bl	8007534 <fabs>
 8006aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af2:	ec51 0b10 	vmov	r0, r1, d0
 8006af6:	f1b8 0f00 	cmp.w	r8, #0
 8006afa:	d12a      	bne.n	8006b52 <__ieee754_pow+0x1ca>
 8006afc:	b12c      	cbz	r4, 8006b0a <__ieee754_pow+0x182>
 8006afe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006bb4 <__ieee754_pow+0x22c>
 8006b02:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006b06:	45e6      	cmp	lr, ip
 8006b08:	d123      	bne.n	8006b52 <__ieee754_pow+0x1ca>
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	da05      	bge.n	8006b1a <__ieee754_pow+0x192>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	2000      	movs	r0, #0
 8006b14:	4927      	ldr	r1, [pc, #156]	; (8006bb4 <__ieee754_pow+0x22c>)
 8006b16:	f7f9 fe59 	bl	80007cc <__aeabi_ddiv>
 8006b1a:	f1b9 0f00 	cmp.w	r9, #0
 8006b1e:	dab7      	bge.n	8006a90 <__ieee754_pow+0x108>
 8006b20:	9b00      	ldr	r3, [sp, #0]
 8006b22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b2a:	4323      	orrs	r3, r4
 8006b2c:	d108      	bne.n	8006b40 <__ieee754_pow+0x1b8>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7f9 fb67 	bl	8000208 <__aeabi_dsub>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e78d      	b.n	8006a5c <__ieee754_pow+0xd4>
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d1a4      	bne.n	8006a90 <__ieee754_pow+0x108>
 8006b46:	4602      	mov	r2, r0
 8006b48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	e79e      	b.n	8006a90 <__ieee754_pow+0x108>
 8006b52:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006b56:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006b5a:	950a      	str	r5, [sp, #40]	; 0x28
 8006b5c:	9d00      	ldr	r5, [sp, #0]
 8006b5e:	46ac      	mov	ip, r5
 8006b60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b62:	ea5c 0505 	orrs.w	r5, ip, r5
 8006b66:	d0e4      	beq.n	8006b32 <__ieee754_pow+0x1aa>
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <__ieee754_pow+0x238>)
 8006b6a:	429e      	cmp	r6, r3
 8006b6c:	f340 80fc 	ble.w	8006d68 <__ieee754_pow+0x3e0>
 8006b70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b74:	429e      	cmp	r6, r3
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <__ieee754_pow+0x230>)
 8006b78:	dd07      	ble.n	8006b8a <__ieee754_pow+0x202>
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	dc0a      	bgt.n	8006b94 <__ieee754_pow+0x20c>
 8006b7e:	2f00      	cmp	r7, #0
 8006b80:	da84      	bge.n	8006a8c <__ieee754_pow+0x104>
 8006b82:	a307      	add	r3, pc, #28	; (adr r3, 8006ba0 <__ieee754_pow+0x218>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	e795      	b.n	8006ab6 <__ieee754_pow+0x12e>
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	dbf7      	blt.n	8006b7e <__ieee754_pow+0x1f6>
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <__ieee754_pow+0x22c>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	dd17      	ble.n	8006bc4 <__ieee754_pow+0x23c>
 8006b94:	2f00      	cmp	r7, #0
 8006b96:	dcf4      	bgt.n	8006b82 <__ieee754_pow+0x1fa>
 8006b98:	e778      	b.n	8006a8c <__ieee754_pow+0x104>
 8006b9a:	bf00      	nop
 8006b9c:	f3af 8000 	nop.w
 8006ba0:	8800759c 	.word	0x8800759c
 8006ba4:	7e37e43c 	.word	0x7e37e43c
 8006ba8:	7ff00000 	.word	0x7ff00000
 8006bac:	08007820 	.word	0x08007820
 8006bb0:	433fffff 	.word	0x433fffff
 8006bb4:	3ff00000 	.word	0x3ff00000
 8006bb8:	3fefffff 	.word	0x3fefffff
 8006bbc:	3fe00000 	.word	0x3fe00000
 8006bc0:	41e00000 	.word	0x41e00000
 8006bc4:	4b64      	ldr	r3, [pc, #400]	; (8006d58 <__ieee754_pow+0x3d0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f7f9 fb1e 	bl	8000208 <__aeabi_dsub>
 8006bcc:	a356      	add	r3, pc, #344	; (adr r3, 8006d28 <__ieee754_pow+0x3a0>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	f7f9 fccf 	bl	8000578 <__aeabi_dmul>
 8006bda:	a355      	add	r3, pc, #340	; (adr r3, 8006d30 <__ieee754_pow+0x3a8>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	4606      	mov	r6, r0
 8006be2:	460f      	mov	r7, r1
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fcc6 	bl	8000578 <__aeabi_dmul>
 8006bec:	4b5b      	ldr	r3, [pc, #364]	; (8006d5c <__ieee754_pow+0x3d4>)
 8006bee:	4682      	mov	sl, r0
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 fcbe 	bl	8000578 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	a14d      	add	r1, pc, #308	; (adr r1, 8006d38 <__ieee754_pow+0x3b0>)
 8006c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c06:	f7f9 faff 	bl	8000208 <__aeabi_dsub>
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	f7f9 fcb3 	bl	8000578 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	2000      	movs	r0, #0
 8006c18:	4951      	ldr	r1, [pc, #324]	; (8006d60 <__ieee754_pow+0x3d8>)
 8006c1a:	f7f9 faf5 	bl	8000208 <__aeabi_dsub>
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4680      	mov	r8, r0
 8006c22:	4689      	mov	r9, r1
 8006c24:	462b      	mov	r3, r5
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fca5 	bl	8000578 <__aeabi_dmul>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	f7f9 fc9f 	bl	8000578 <__aeabi_dmul>
 8006c3a:	a341      	add	r3, pc, #260	; (adr r3, 8006d40 <__ieee754_pow+0x3b8>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fc9a 	bl	8000578 <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f7f9 fadc 	bl	8000208 <__aeabi_dsub>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4680      	mov	r8, r0
 8006c56:	4689      	mov	r9, r1
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	f7f9 fad6 	bl	800020c <__adddf3>
 8006c60:	2400      	movs	r4, #0
 8006c62:	4632      	mov	r2, r6
 8006c64:	463b      	mov	r3, r7
 8006c66:	4620      	mov	r0, r4
 8006c68:	460d      	mov	r5, r1
 8006c6a:	f7f9 facd 	bl	8000208 <__aeabi_dsub>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4640      	mov	r0, r8
 8006c74:	4649      	mov	r1, r9
 8006c76:	f7f9 fac7 	bl	8000208 <__aeabi_dsub>
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	4682      	mov	sl, r0
 8006c84:	468b      	mov	fp, r1
 8006c86:	f040 81f1 	bne.w	800706c <__ieee754_pow+0x6e4>
 8006c8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006d48 <__ieee754_pow+0x3c0>
 8006c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8006c92:	eef0 8a67 	vmov.f32	s17, s15
 8006c96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca4:	f7f9 fab0 	bl	8000208 <__aeabi_dsub>
 8006ca8:	4622      	mov	r2, r4
 8006caa:	462b      	mov	r3, r5
 8006cac:	f7f9 fc64 	bl	8000578 <__aeabi_dmul>
 8006cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 fc5c 	bl	8000578 <__aeabi_dmul>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 faa0 	bl	800020c <__adddf3>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	4689      	mov	r9, r1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fc4e 	bl	8000578 <__aeabi_dmul>
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f7f9 fa90 	bl	800020c <__adddf3>
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <__ieee754_pow+0x3dc>)
 8006cee:	4299      	cmp	r1, r3
 8006cf0:	ec45 4b19 	vmov	d9, r4, r5
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	468b      	mov	fp, r1
 8006cfa:	f340 82fe 	ble.w	80072fa <__ieee754_pow+0x972>
 8006cfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d06:	4303      	orrs	r3, r0
 8006d08:	f000 81f0 	beq.w	80070ec <__ieee754_pow+0x764>
 8006d0c:	a310      	add	r3, pc, #64	; (adr r3, 8006d50 <__ieee754_pow+0x3c8>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	ec51 0b18 	vmov	r0, r1, d8
 8006d16:	f7f9 fc2f 	bl	8000578 <__aeabi_dmul>
 8006d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8006d50 <__ieee754_pow+0x3c8>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	e6cb      	b.n	8006aba <__ieee754_pow+0x132>
 8006d22:	bf00      	nop
 8006d24:	f3af 8000 	nop.w
 8006d28:	60000000 	.word	0x60000000
 8006d2c:	3ff71547 	.word	0x3ff71547
 8006d30:	f85ddf44 	.word	0xf85ddf44
 8006d34:	3e54ae0b 	.word	0x3e54ae0b
 8006d38:	55555555 	.word	0x55555555
 8006d3c:	3fd55555 	.word	0x3fd55555
 8006d40:	652b82fe 	.word	0x652b82fe
 8006d44:	3ff71547 	.word	0x3ff71547
 8006d48:	00000000 	.word	0x00000000
 8006d4c:	bff00000 	.word	0xbff00000
 8006d50:	8800759c 	.word	0x8800759c
 8006d54:	7e37e43c 	.word	0x7e37e43c
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	3fd00000 	.word	0x3fd00000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	408fffff 	.word	0x408fffff
 8006d68:	4bd7      	ldr	r3, [pc, #860]	; (80070c8 <__ieee754_pow+0x740>)
 8006d6a:	ea03 0309 	and.w	r3, r3, r9
 8006d6e:	2200      	movs	r2, #0
 8006d70:	b92b      	cbnz	r3, 8006d7e <__ieee754_pow+0x3f6>
 8006d72:	4bd6      	ldr	r3, [pc, #856]	; (80070cc <__ieee754_pow+0x744>)
 8006d74:	f7f9 fc00 	bl	8000578 <__aeabi_dmul>
 8006d78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	1523      	asrs	r3, r4, #20
 8006d80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d84:	4413      	add	r3, r2
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	4bd1      	ldr	r3, [pc, #836]	; (80070d0 <__ieee754_pow+0x748>)
 8006d8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d92:	429c      	cmp	r4, r3
 8006d94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d98:	dd08      	ble.n	8006dac <__ieee754_pow+0x424>
 8006d9a:	4bce      	ldr	r3, [pc, #824]	; (80070d4 <__ieee754_pow+0x74c>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	f340 8163 	ble.w	8007068 <__ieee754_pow+0x6e0>
 8006da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da4:	3301      	adds	r3, #1
 8006da6:	9309      	str	r3, [sp, #36]	; 0x24
 8006da8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006dac:	2400      	movs	r4, #0
 8006dae:	00e3      	lsls	r3, r4, #3
 8006db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db2:	4bc9      	ldr	r3, [pc, #804]	; (80070d8 <__ieee754_pow+0x750>)
 8006db4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006db8:	ed93 7b00 	vldr	d7, [r3]
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	ec53 2b17 	vmov	r2, r3, d7
 8006dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8006dc6:	eef0 8a67 	vmov.f32	s17, s15
 8006dca:	4682      	mov	sl, r0
 8006dcc:	f7f9 fa1c 	bl	8000208 <__aeabi_dsub>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460f      	mov	r7, r1
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	ec51 0b18 	vmov	r0, r1, d8
 8006ddc:	f7f9 fa16 	bl	800020c <__adddf3>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	2000      	movs	r0, #0
 8006de6:	49bd      	ldr	r1, [pc, #756]	; (80070dc <__ieee754_pow+0x754>)
 8006de8:	f7f9 fcf0 	bl	80007cc <__aeabi_ddiv>
 8006dec:	ec41 0b19 	vmov	d9, r0, r1
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4630      	mov	r0, r6
 8006df6:	4639      	mov	r1, r7
 8006df8:	f7f9 fbbe 	bl	8000578 <__aeabi_dmul>
 8006dfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e10:	46ab      	mov	fp, r5
 8006e12:	106d      	asrs	r5, r5, #1
 8006e14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e1c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e20:	2200      	movs	r2, #0
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	4614      	mov	r4, r2
 8006e28:	461d      	mov	r5, r3
 8006e2a:	f7f9 fba5 	bl	8000578 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 f9e7 	bl	8000208 <__aeabi_dsub>
 8006e3a:	ec53 2b18 	vmov	r2, r3, d8
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	4620      	mov	r0, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	f7f9 f9df 	bl	8000208 <__aeabi_dsub>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4650      	mov	r0, sl
 8006e50:	4659      	mov	r1, fp
 8006e52:	f7f9 f9d9 	bl	8000208 <__aeabi_dsub>
 8006e56:	4642      	mov	r2, r8
 8006e58:	464b      	mov	r3, r9
 8006e5a:	f7f9 fb8d 	bl	8000578 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 f9cf 	bl	8000208 <__aeabi_dsub>
 8006e6a:	ec53 2b19 	vmov	r2, r3, d9
 8006e6e:	f7f9 fb83 	bl	8000578 <__aeabi_dmul>
 8006e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e76:	ec41 0b18 	vmov	d8, r0, r1
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7f9 fb7b 	bl	8000578 <__aeabi_dmul>
 8006e82:	a37d      	add	r3, pc, #500	; (adr r3, 8007078 <__ieee754_pow+0x6f0>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	f7f9 fb74 	bl	8000578 <__aeabi_dmul>
 8006e90:	a37b      	add	r3, pc, #492	; (adr r3, 8007080 <__ieee754_pow+0x6f8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f9b9 	bl	800020c <__adddf3>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	f7f9 fb6b 	bl	8000578 <__aeabi_dmul>
 8006ea2:	a379      	add	r3, pc, #484	; (adr r3, 8007088 <__ieee754_pow+0x700>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9b0 	bl	800020c <__adddf3>
 8006eac:	4622      	mov	r2, r4
 8006eae:	462b      	mov	r3, r5
 8006eb0:	f7f9 fb62 	bl	8000578 <__aeabi_dmul>
 8006eb4:	a376      	add	r3, pc, #472	; (adr r3, 8007090 <__ieee754_pow+0x708>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 f9a7 	bl	800020c <__adddf3>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	f7f9 fb59 	bl	8000578 <__aeabi_dmul>
 8006ec6:	a374      	add	r3, pc, #464	; (adr r3, 8007098 <__ieee754_pow+0x710>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f99e 	bl	800020c <__adddf3>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	f7f9 fb50 	bl	8000578 <__aeabi_dmul>
 8006ed8:	a371      	add	r3, pc, #452	; (adr r3, 80070a0 <__ieee754_pow+0x718>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f995 	bl	800020c <__adddf3>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	462b      	mov	r3, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 fb43 	bl	8000578 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 fb3d 	bl	8000578 <__aeabi_dmul>
 8006efe:	4642      	mov	r2, r8
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	464b      	mov	r3, r9
 8006f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0a:	f7f9 f97f 	bl	800020c <__adddf3>
 8006f0e:	ec53 2b18 	vmov	r2, r3, d8
 8006f12:	f7f9 fb31 	bl	8000578 <__aeabi_dmul>
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f7f9 f977 	bl	800020c <__adddf3>
 8006f1e:	4642      	mov	r2, r8
 8006f20:	4682      	mov	sl, r0
 8006f22:	468b      	mov	fp, r1
 8006f24:	464b      	mov	r3, r9
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fb25 	bl	8000578 <__aeabi_dmul>
 8006f2e:	4b6c      	ldr	r3, [pc, #432]	; (80070e0 <__ieee754_pow+0x758>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	f7f9 f969 	bl	800020c <__adddf3>
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	465b      	mov	r3, fp
 8006f3e:	f7f9 f965 	bl	800020c <__adddf3>
 8006f42:	9c04      	ldr	r4, [sp, #16]
 8006f44:	460d      	mov	r5, r1
 8006f46:	4622      	mov	r2, r4
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fb13 	bl	8000578 <__aeabi_dmul>
 8006f52:	4b63      	ldr	r3, [pc, #396]	; (80070e0 <__ieee754_pow+0x758>)
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f953 	bl	8000208 <__aeabi_dsub>
 8006f62:	4632      	mov	r2, r6
 8006f64:	463b      	mov	r3, r7
 8006f66:	f7f9 f94f 	bl	8000208 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4659      	mov	r1, fp
 8006f72:	f7f9 f949 	bl	8000208 <__aeabi_dsub>
 8006f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f7a:	f7f9 fafd 	bl	8000578 <__aeabi_dmul>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	462b      	mov	r3, r5
 8006f86:	ec51 0b18 	vmov	r0, r1, d8
 8006f8a:	f7f9 faf5 	bl	8000578 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 f939 	bl	800020c <__adddf3>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f931 	bl	800020c <__adddf3>
 8006faa:	9c04      	ldr	r4, [sp, #16]
 8006fac:	a33e      	add	r3, pc, #248	; (adr r3, 80070a8 <__ieee754_pow+0x720>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	f7f9 fadf 	bl	8000578 <__aeabi_dmul>
 8006fba:	4642      	mov	r2, r8
 8006fbc:	ec41 0b18 	vmov	d8, r0, r1
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f91f 	bl	8000208 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 f919 	bl	8000208 <__aeabi_dsub>
 8006fd6:	a336      	add	r3, pc, #216	; (adr r3, 80070b0 <__ieee754_pow+0x728>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 facc 	bl	8000578 <__aeabi_dmul>
 8006fe0:	a335      	add	r3, pc, #212	; (adr r3, 80070b8 <__ieee754_pow+0x730>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fac3 	bl	8000578 <__aeabi_dmul>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	f7f9 f907 	bl	800020c <__adddf3>
 8006ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007000:	4b38      	ldr	r3, [pc, #224]	; (80070e4 <__ieee754_pow+0x75c>)
 8007002:	4413      	add	r3, r2
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f7f9 f900 	bl	800020c <__adddf3>
 800700c:	4682      	mov	sl, r0
 800700e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007010:	468b      	mov	fp, r1
 8007012:	f7f9 fa47 	bl	80004a4 <__aeabi_i2d>
 8007016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007018:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <__ieee754_pow+0x760>)
 800701a:	4413      	add	r3, r2
 800701c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	4652      	mov	r2, sl
 8007026:	465b      	mov	r3, fp
 8007028:	ec51 0b18 	vmov	r0, r1, d8
 800702c:	f7f9 f8ee 	bl	800020c <__adddf3>
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	f7f9 f8ea 	bl	800020c <__adddf3>
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	f7f9 f8e6 	bl	800020c <__adddf3>
 8007040:	9c04      	ldr	r4, [sp, #16]
 8007042:	4632      	mov	r2, r6
 8007044:	463b      	mov	r3, r7
 8007046:	4620      	mov	r0, r4
 8007048:	460d      	mov	r5, r1
 800704a:	f7f9 f8dd 	bl	8000208 <__aeabi_dsub>
 800704e:	4642      	mov	r2, r8
 8007050:	464b      	mov	r3, r9
 8007052:	f7f9 f8d9 	bl	8000208 <__aeabi_dsub>
 8007056:	ec53 2b18 	vmov	r2, r3, d8
 800705a:	f7f9 f8d5 	bl	8000208 <__aeabi_dsub>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4650      	mov	r0, sl
 8007064:	4659      	mov	r1, fp
 8007066:	e606      	b.n	8006c76 <__ieee754_pow+0x2ee>
 8007068:	2401      	movs	r4, #1
 800706a:	e6a0      	b.n	8006dae <__ieee754_pow+0x426>
 800706c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80070c0 <__ieee754_pow+0x738>
 8007070:	e60d      	b.n	8006c8e <__ieee754_pow+0x306>
 8007072:	bf00      	nop
 8007074:	f3af 8000 	nop.w
 8007078:	4a454eef 	.word	0x4a454eef
 800707c:	3fca7e28 	.word	0x3fca7e28
 8007080:	93c9db65 	.word	0x93c9db65
 8007084:	3fcd864a 	.word	0x3fcd864a
 8007088:	a91d4101 	.word	0xa91d4101
 800708c:	3fd17460 	.word	0x3fd17460
 8007090:	518f264d 	.word	0x518f264d
 8007094:	3fd55555 	.word	0x3fd55555
 8007098:	db6fabff 	.word	0xdb6fabff
 800709c:	3fdb6db6 	.word	0x3fdb6db6
 80070a0:	33333303 	.word	0x33333303
 80070a4:	3fe33333 	.word	0x3fe33333
 80070a8:	e0000000 	.word	0xe0000000
 80070ac:	3feec709 	.word	0x3feec709
 80070b0:	dc3a03fd 	.word	0xdc3a03fd
 80070b4:	3feec709 	.word	0x3feec709
 80070b8:	145b01f5 	.word	0x145b01f5
 80070bc:	be3e2fe0 	.word	0xbe3e2fe0
 80070c0:	00000000 	.word	0x00000000
 80070c4:	3ff00000 	.word	0x3ff00000
 80070c8:	7ff00000 	.word	0x7ff00000
 80070cc:	43400000 	.word	0x43400000
 80070d0:	0003988e 	.word	0x0003988e
 80070d4:	000bb679 	.word	0x000bb679
 80070d8:	08007828 	.word	0x08007828
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	40080000 	.word	0x40080000
 80070e4:	08007848 	.word	0x08007848
 80070e8:	08007838 	.word	0x08007838
 80070ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80073c4 <__ieee754_pow+0xa3c>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	f7f9 f889 	bl	800020c <__adddf3>
 80070fa:	4622      	mov	r2, r4
 80070fc:	ec41 0b1a 	vmov	d10, r0, r1
 8007100:	462b      	mov	r3, r5
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	f7f9 f87f 	bl	8000208 <__aeabi_dsub>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	ec51 0b1a 	vmov	r0, r1, d10
 8007112:	f7f9 fcc1 	bl	8000a98 <__aeabi_dcmpgt>
 8007116:	2800      	cmp	r0, #0
 8007118:	f47f adf8 	bne.w	8006d0c <__ieee754_pow+0x384>
 800711c:	4aa4      	ldr	r2, [pc, #656]	; (80073b0 <__ieee754_pow+0xa28>)
 800711e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007122:	4293      	cmp	r3, r2
 8007124:	f340 810b 	ble.w	800733e <__ieee754_pow+0x9b6>
 8007128:	151b      	asrs	r3, r3, #20
 800712a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800712e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007132:	fa4a f303 	asr.w	r3, sl, r3
 8007136:	445b      	add	r3, fp
 8007138:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800713c:	4e9d      	ldr	r6, [pc, #628]	; (80073b4 <__ieee754_pow+0xa2c>)
 800713e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007142:	4116      	asrs	r6, r2
 8007144:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007148:	2000      	movs	r0, #0
 800714a:	ea23 0106 	bic.w	r1, r3, r6
 800714e:	f1c2 0214 	rsb	r2, r2, #20
 8007152:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007156:	fa4a fa02 	asr.w	sl, sl, r2
 800715a:	f1bb 0f00 	cmp.w	fp, #0
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	bfb8      	it	lt
 8007168:	f1ca 0a00 	rsblt	sl, sl, #0
 800716c:	f7f9 f84c 	bl	8000208 <__aeabi_dsub>
 8007170:	ec41 0b19 	vmov	d9, r0, r1
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	ec51 0b19 	vmov	r0, r1, d9
 800717c:	f7f9 f846 	bl	800020c <__adddf3>
 8007180:	2400      	movs	r4, #0
 8007182:	a379      	add	r3, pc, #484	; (adr r3, 8007368 <__ieee754_pow+0x9e0>)
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	4620      	mov	r0, r4
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 f9f4 	bl	8000578 <__aeabi_dmul>
 8007190:	ec53 2b19 	vmov	r2, r3, d9
 8007194:	4606      	mov	r6, r0
 8007196:	460f      	mov	r7, r1
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f9 f834 	bl	8000208 <__aeabi_dsub>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4640      	mov	r0, r8
 80071a6:	4649      	mov	r1, r9
 80071a8:	f7f9 f82e 	bl	8000208 <__aeabi_dsub>
 80071ac:	a370      	add	r3, pc, #448	; (adr r3, 8007370 <__ieee754_pow+0x9e8>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f9e1 	bl	8000578 <__aeabi_dmul>
 80071b6:	a370      	add	r3, pc, #448	; (adr r3, 8007378 <__ieee754_pow+0x9f0>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	4680      	mov	r8, r0
 80071be:	4689      	mov	r9, r1
 80071c0:	4620      	mov	r0, r4
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7f9 f9d8 	bl	8000578 <__aeabi_dmul>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 f81c 	bl	800020c <__adddf3>
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 f814 	bl	800020c <__adddf3>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	4680      	mov	r8, r0
 80071ea:	4689      	mov	r9, r1
 80071ec:	f7f9 f80c 	bl	8000208 <__aeabi_dsub>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f9 f806 	bl	8000208 <__aeabi_dsub>
 80071fc:	4642      	mov	r2, r8
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	464b      	mov	r3, r9
 8007204:	4640      	mov	r0, r8
 8007206:	4649      	mov	r1, r9
 8007208:	f7f9 f9b6 	bl	8000578 <__aeabi_dmul>
 800720c:	a35c      	add	r3, pc, #368	; (adr r3, 8007380 <__ieee754_pow+0x9f8>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	4604      	mov	r4, r0
 8007214:	460d      	mov	r5, r1
 8007216:	f7f9 f9af 	bl	8000578 <__aeabi_dmul>
 800721a:	a35b      	add	r3, pc, #364	; (adr r3, 8007388 <__ieee754_pow+0xa00>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f8 fff2 	bl	8000208 <__aeabi_dsub>
 8007224:	4622      	mov	r2, r4
 8007226:	462b      	mov	r3, r5
 8007228:	f7f9 f9a6 	bl	8000578 <__aeabi_dmul>
 800722c:	a358      	add	r3, pc, #352	; (adr r3, 8007390 <__ieee754_pow+0xa08>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f8 ffeb 	bl	800020c <__adddf3>
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	f7f9 f99d 	bl	8000578 <__aeabi_dmul>
 800723e:	a356      	add	r3, pc, #344	; (adr r3, 8007398 <__ieee754_pow+0xa10>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f8 ffe0 	bl	8000208 <__aeabi_dsub>
 8007248:	4622      	mov	r2, r4
 800724a:	462b      	mov	r3, r5
 800724c:	f7f9 f994 	bl	8000578 <__aeabi_dmul>
 8007250:	a353      	add	r3, pc, #332	; (adr r3, 80073a0 <__ieee754_pow+0xa18>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f8 ffd9 	bl	800020c <__adddf3>
 800725a:	4622      	mov	r2, r4
 800725c:	462b      	mov	r3, r5
 800725e:	f7f9 f98b 	bl	8000578 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f8 ffcd 	bl	8000208 <__aeabi_dsub>
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	f7f9 f97d 	bl	8000578 <__aeabi_dmul>
 800727e:	2200      	movs	r2, #0
 8007280:	ec41 0b19 	vmov	d9, r0, r1
 8007284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 ffbc 	bl	8000208 <__aeabi_dsub>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	ec51 0b19 	vmov	r0, r1, d9
 8007298:	f7f9 fa98 	bl	80007cc <__aeabi_ddiv>
 800729c:	4632      	mov	r2, r6
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	463b      	mov	r3, r7
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 f966 	bl	8000578 <__aeabi_dmul>
 80072ac:	4632      	mov	r2, r6
 80072ae:	463b      	mov	r3, r7
 80072b0:	f7f8 ffac 	bl	800020c <__adddf3>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4620      	mov	r0, r4
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7f8 ffa4 	bl	8000208 <__aeabi_dsub>
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	f7f8 ffa0 	bl	8000208 <__aeabi_dsub>
 80072c8:	460b      	mov	r3, r1
 80072ca:	4602      	mov	r2, r0
 80072cc:	493a      	ldr	r1, [pc, #232]	; (80073b8 <__ieee754_pow+0xa30>)
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7f8 ff9a 	bl	8000208 <__aeabi_dsub>
 80072d4:	e9cd 0100 	strd	r0, r1, [sp]
 80072d8:	9b01      	ldr	r3, [sp, #4]
 80072da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80072de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e2:	da2f      	bge.n	8007344 <__ieee754_pow+0x9bc>
 80072e4:	4650      	mov	r0, sl
 80072e6:	ed9d 0b00 	vldr	d0, [sp]
 80072ea:	f000 f9cd 	bl	8007688 <scalbn>
 80072ee:	ec51 0b10 	vmov	r0, r1, d0
 80072f2:	ec53 2b18 	vmov	r2, r3, d8
 80072f6:	f7ff bbe0 	b.w	8006aba <__ieee754_pow+0x132>
 80072fa:	4b30      	ldr	r3, [pc, #192]	; (80073bc <__ieee754_pow+0xa34>)
 80072fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007300:	429e      	cmp	r6, r3
 8007302:	f77f af0b 	ble.w	800711c <__ieee754_pow+0x794>
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <__ieee754_pow+0xa38>)
 8007308:	440b      	add	r3, r1
 800730a:	4303      	orrs	r3, r0
 800730c:	d00b      	beq.n	8007326 <__ieee754_pow+0x99e>
 800730e:	a326      	add	r3, pc, #152	; (adr r3, 80073a8 <__ieee754_pow+0xa20>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	ec51 0b18 	vmov	r0, r1, d8
 8007318:	f7f9 f92e 	bl	8000578 <__aeabi_dmul>
 800731c:	a322      	add	r3, pc, #136	; (adr r3, 80073a8 <__ieee754_pow+0xa20>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7ff bbca 	b.w	8006aba <__ieee754_pow+0x132>
 8007326:	4622      	mov	r2, r4
 8007328:	462b      	mov	r3, r5
 800732a:	f7f8 ff6d 	bl	8000208 <__aeabi_dsub>
 800732e:	4642      	mov	r2, r8
 8007330:	464b      	mov	r3, r9
 8007332:	f7f9 fba7 	bl	8000a84 <__aeabi_dcmpge>
 8007336:	2800      	cmp	r0, #0
 8007338:	f43f aef0 	beq.w	800711c <__ieee754_pow+0x794>
 800733c:	e7e7      	b.n	800730e <__ieee754_pow+0x986>
 800733e:	f04f 0a00 	mov.w	sl, #0
 8007342:	e717      	b.n	8007174 <__ieee754_pow+0x7ec>
 8007344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007348:	4619      	mov	r1, r3
 800734a:	e7d2      	b.n	80072f2 <__ieee754_pow+0x96a>
 800734c:	491a      	ldr	r1, [pc, #104]	; (80073b8 <__ieee754_pow+0xa30>)
 800734e:	2000      	movs	r0, #0
 8007350:	f7ff bb9e 	b.w	8006a90 <__ieee754_pow+0x108>
 8007354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007358:	f7ff bb9a 	b.w	8006a90 <__ieee754_pow+0x108>
 800735c:	9000      	str	r0, [sp, #0]
 800735e:	f7ff bb76 	b.w	8006a4e <__ieee754_pow+0xc6>
 8007362:	2100      	movs	r1, #0
 8007364:	f7ff bb60 	b.w	8006a28 <__ieee754_pow+0xa0>
 8007368:	00000000 	.word	0x00000000
 800736c:	3fe62e43 	.word	0x3fe62e43
 8007370:	fefa39ef 	.word	0xfefa39ef
 8007374:	3fe62e42 	.word	0x3fe62e42
 8007378:	0ca86c39 	.word	0x0ca86c39
 800737c:	be205c61 	.word	0xbe205c61
 8007380:	72bea4d0 	.word	0x72bea4d0
 8007384:	3e663769 	.word	0x3e663769
 8007388:	c5d26bf1 	.word	0xc5d26bf1
 800738c:	3ebbbd41 	.word	0x3ebbbd41
 8007390:	af25de2c 	.word	0xaf25de2c
 8007394:	3f11566a 	.word	0x3f11566a
 8007398:	16bebd93 	.word	0x16bebd93
 800739c:	3f66c16c 	.word	0x3f66c16c
 80073a0:	5555553e 	.word	0x5555553e
 80073a4:	3fc55555 	.word	0x3fc55555
 80073a8:	c2f8f359 	.word	0xc2f8f359
 80073ac:	01a56e1f 	.word	0x01a56e1f
 80073b0:	3fe00000 	.word	0x3fe00000
 80073b4:	000fffff 	.word	0x000fffff
 80073b8:	3ff00000 	.word	0x3ff00000
 80073bc:	4090cbff 	.word	0x4090cbff
 80073c0:	3f6f3400 	.word	0x3f6f3400
 80073c4:	652b82fe 	.word	0x652b82fe
 80073c8:	3c971547 	.word	0x3c971547

080073cc <__ieee754_sqrt>:
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	ec55 4b10 	vmov	r4, r5, d0
 80073d4:	4e56      	ldr	r6, [pc, #344]	; (8007530 <__ieee754_sqrt+0x164>)
 80073d6:	43ae      	bics	r6, r5
 80073d8:	ee10 0a10 	vmov	r0, s0
 80073dc:	ee10 3a10 	vmov	r3, s0
 80073e0:	4629      	mov	r1, r5
 80073e2:	462a      	mov	r2, r5
 80073e4:	d110      	bne.n	8007408 <__ieee754_sqrt+0x3c>
 80073e6:	ee10 2a10 	vmov	r2, s0
 80073ea:	462b      	mov	r3, r5
 80073ec:	f7f9 f8c4 	bl	8000578 <__aeabi_dmul>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f8 ff08 	bl	800020c <__adddf3>
 80073fc:	4604      	mov	r4, r0
 80073fe:	460d      	mov	r5, r1
 8007400:	ec45 4b10 	vmov	d0, r4, r5
 8007404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007408:	2d00      	cmp	r5, #0
 800740a:	dc10      	bgt.n	800742e <__ieee754_sqrt+0x62>
 800740c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007410:	4330      	orrs	r0, r6
 8007412:	d0f5      	beq.n	8007400 <__ieee754_sqrt+0x34>
 8007414:	b15d      	cbz	r5, 800742e <__ieee754_sqrt+0x62>
 8007416:	ee10 2a10 	vmov	r2, s0
 800741a:	462b      	mov	r3, r5
 800741c:	ee10 0a10 	vmov	r0, s0
 8007420:	f7f8 fef2 	bl	8000208 <__aeabi_dsub>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	f7f9 f9d0 	bl	80007cc <__aeabi_ddiv>
 800742c:	e7e6      	b.n	80073fc <__ieee754_sqrt+0x30>
 800742e:	1509      	asrs	r1, r1, #20
 8007430:	d076      	beq.n	8007520 <__ieee754_sqrt+0x154>
 8007432:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007436:	07ce      	lsls	r6, r1, #31
 8007438:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800743c:	bf5e      	ittt	pl
 800743e:	0fda      	lsrpl	r2, r3, #31
 8007440:	005b      	lslpl	r3, r3, #1
 8007442:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007446:	0fda      	lsrs	r2, r3, #31
 8007448:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800744c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007450:	2000      	movs	r0, #0
 8007452:	106d      	asrs	r5, r5, #1
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	f04f 0e16 	mov.w	lr, #22
 800745a:	4684      	mov	ip, r0
 800745c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007460:	eb0c 0401 	add.w	r4, ip, r1
 8007464:	4294      	cmp	r4, r2
 8007466:	bfde      	ittt	le
 8007468:	1b12      	suble	r2, r2, r4
 800746a:	eb04 0c01 	addle.w	ip, r4, r1
 800746e:	1840      	addle	r0, r0, r1
 8007470:	0052      	lsls	r2, r2, #1
 8007472:	f1be 0e01 	subs.w	lr, lr, #1
 8007476:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800747a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800747e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007482:	d1ed      	bne.n	8007460 <__ieee754_sqrt+0x94>
 8007484:	4671      	mov	r1, lr
 8007486:	2720      	movs	r7, #32
 8007488:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800748c:	4562      	cmp	r2, ip
 800748e:	eb04 060e 	add.w	r6, r4, lr
 8007492:	dc02      	bgt.n	800749a <__ieee754_sqrt+0xce>
 8007494:	d113      	bne.n	80074be <__ieee754_sqrt+0xf2>
 8007496:	429e      	cmp	r6, r3
 8007498:	d811      	bhi.n	80074be <__ieee754_sqrt+0xf2>
 800749a:	2e00      	cmp	r6, #0
 800749c:	eb06 0e04 	add.w	lr, r6, r4
 80074a0:	da43      	bge.n	800752a <__ieee754_sqrt+0x15e>
 80074a2:	f1be 0f00 	cmp.w	lr, #0
 80074a6:	db40      	blt.n	800752a <__ieee754_sqrt+0x15e>
 80074a8:	f10c 0801 	add.w	r8, ip, #1
 80074ac:	eba2 020c 	sub.w	r2, r2, ip
 80074b0:	429e      	cmp	r6, r3
 80074b2:	bf88      	it	hi
 80074b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80074b8:	1b9b      	subs	r3, r3, r6
 80074ba:	4421      	add	r1, r4
 80074bc:	46c4      	mov	ip, r8
 80074be:	0052      	lsls	r2, r2, #1
 80074c0:	3f01      	subs	r7, #1
 80074c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80074c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80074ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074ce:	d1dd      	bne.n	800748c <__ieee754_sqrt+0xc0>
 80074d0:	4313      	orrs	r3, r2
 80074d2:	d006      	beq.n	80074e2 <__ieee754_sqrt+0x116>
 80074d4:	1c4c      	adds	r4, r1, #1
 80074d6:	bf13      	iteet	ne
 80074d8:	3101      	addne	r1, #1
 80074da:	3001      	addeq	r0, #1
 80074dc:	4639      	moveq	r1, r7
 80074de:	f021 0101 	bicne.w	r1, r1, #1
 80074e2:	1043      	asrs	r3, r0, #1
 80074e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074e8:	0849      	lsrs	r1, r1, #1
 80074ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074ee:	07c2      	lsls	r2, r0, #31
 80074f0:	bf48      	it	mi
 80074f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80074f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80074fa:	460c      	mov	r4, r1
 80074fc:	463d      	mov	r5, r7
 80074fe:	e77f      	b.n	8007400 <__ieee754_sqrt+0x34>
 8007500:	0ada      	lsrs	r2, r3, #11
 8007502:	3815      	subs	r0, #21
 8007504:	055b      	lsls	r3, r3, #21
 8007506:	2a00      	cmp	r2, #0
 8007508:	d0fa      	beq.n	8007500 <__ieee754_sqrt+0x134>
 800750a:	02d7      	lsls	r7, r2, #11
 800750c:	d50a      	bpl.n	8007524 <__ieee754_sqrt+0x158>
 800750e:	f1c1 0420 	rsb	r4, r1, #32
 8007512:	fa23 f404 	lsr.w	r4, r3, r4
 8007516:	1e4d      	subs	r5, r1, #1
 8007518:	408b      	lsls	r3, r1
 800751a:	4322      	orrs	r2, r4
 800751c:	1b41      	subs	r1, r0, r5
 800751e:	e788      	b.n	8007432 <__ieee754_sqrt+0x66>
 8007520:	4608      	mov	r0, r1
 8007522:	e7f0      	b.n	8007506 <__ieee754_sqrt+0x13a>
 8007524:	0052      	lsls	r2, r2, #1
 8007526:	3101      	adds	r1, #1
 8007528:	e7ef      	b.n	800750a <__ieee754_sqrt+0x13e>
 800752a:	46e0      	mov	r8, ip
 800752c:	e7be      	b.n	80074ac <__ieee754_sqrt+0xe0>
 800752e:	bf00      	nop
 8007530:	7ff00000 	.word	0x7ff00000

08007534 <fabs>:
 8007534:	ec51 0b10 	vmov	r0, r1, d0
 8007538:	ee10 2a10 	vmov	r2, s0
 800753c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007540:	ec43 2b10 	vmov	d0, r2, r3
 8007544:	4770      	bx	lr

08007546 <finite>:
 8007546:	b082      	sub	sp, #8
 8007548:	ed8d 0b00 	vstr	d0, [sp]
 800754c:	9801      	ldr	r0, [sp, #4]
 800754e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007552:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007556:	0fc0      	lsrs	r0, r0, #31
 8007558:	b002      	add	sp, #8
 800755a:	4770      	bx	lr
 800755c:	0000      	movs	r0, r0
	...

08007560 <nan>:
 8007560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007568 <nan+0x8>
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	00000000 	.word	0x00000000
 800756c:	7ff80000 	.word	0x7ff80000

08007570 <rint>:
 8007570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007572:	ec51 0b10 	vmov	r0, r1, d0
 8007576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800757a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800757e:	2e13      	cmp	r6, #19
 8007580:	ee10 4a10 	vmov	r4, s0
 8007584:	460b      	mov	r3, r1
 8007586:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800758a:	dc58      	bgt.n	800763e <rint+0xce>
 800758c:	2e00      	cmp	r6, #0
 800758e:	da2b      	bge.n	80075e8 <rint+0x78>
 8007590:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007594:	4302      	orrs	r2, r0
 8007596:	d023      	beq.n	80075e0 <rint+0x70>
 8007598:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800759c:	4302      	orrs	r2, r0
 800759e:	4254      	negs	r4, r2
 80075a0:	4314      	orrs	r4, r2
 80075a2:	0c4b      	lsrs	r3, r1, #17
 80075a4:	0b24      	lsrs	r4, r4, #12
 80075a6:	045b      	lsls	r3, r3, #17
 80075a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80075ac:	ea44 0103 	orr.w	r1, r4, r3
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <rint+0x10c>)
 80075b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80075b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4630      	mov	r0, r6
 80075c0:	4639      	mov	r1, r7
 80075c2:	f7f8 fe23 	bl	800020c <__adddf3>
 80075c6:	e9cd 0100 	strd	r0, r1, [sp]
 80075ca:	463b      	mov	r3, r7
 80075cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075d0:	4632      	mov	r2, r6
 80075d2:	f7f8 fe19 	bl	8000208 <__aeabi_dsub>
 80075d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80075de:	4639      	mov	r1, r7
 80075e0:	ec41 0b10 	vmov	d0, r0, r1
 80075e4:	b003      	add	sp, #12
 80075e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e8:	4a25      	ldr	r2, [pc, #148]	; (8007680 <rint+0x110>)
 80075ea:	4132      	asrs	r2, r6
 80075ec:	ea01 0702 	and.w	r7, r1, r2
 80075f0:	4307      	orrs	r7, r0
 80075f2:	d0f5      	beq.n	80075e0 <rint+0x70>
 80075f4:	0851      	lsrs	r1, r2, #1
 80075f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80075fa:	4314      	orrs	r4, r2
 80075fc:	d00c      	beq.n	8007618 <rint+0xa8>
 80075fe:	ea23 0201 	bic.w	r2, r3, r1
 8007602:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007606:	2e13      	cmp	r6, #19
 8007608:	fa43 f606 	asr.w	r6, r3, r6
 800760c:	bf0c      	ite	eq
 800760e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007612:	2400      	movne	r4, #0
 8007614:	ea42 0306 	orr.w	r3, r2, r6
 8007618:	4918      	ldr	r1, [pc, #96]	; (800767c <rint+0x10c>)
 800761a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800761e:	4622      	mov	r2, r4
 8007620:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 fdf0 	bl	800020c <__adddf3>
 800762c:	e9cd 0100 	strd	r0, r1, [sp]
 8007630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	f7f8 fde6 	bl	8000208 <__aeabi_dsub>
 800763c:	e7d0      	b.n	80075e0 <rint+0x70>
 800763e:	2e33      	cmp	r6, #51	; 0x33
 8007640:	dd07      	ble.n	8007652 <rint+0xe2>
 8007642:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007646:	d1cb      	bne.n	80075e0 <rint+0x70>
 8007648:	ee10 2a10 	vmov	r2, s0
 800764c:	f7f8 fdde 	bl	800020c <__adddf3>
 8007650:	e7c6      	b.n	80075e0 <rint+0x70>
 8007652:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007656:	f04f 36ff 	mov.w	r6, #4294967295
 800765a:	40d6      	lsrs	r6, r2
 800765c:	4230      	tst	r0, r6
 800765e:	d0bf      	beq.n	80075e0 <rint+0x70>
 8007660:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007664:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007668:	bf1f      	itttt	ne
 800766a:	ea24 0101 	bicne.w	r1, r4, r1
 800766e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007672:	fa44 f202 	asrne.w	r2, r4, r2
 8007676:	ea41 0402 	orrne.w	r4, r1, r2
 800767a:	e7cd      	b.n	8007618 <rint+0xa8>
 800767c:	08007858 	.word	0x08007858
 8007680:	000fffff 	.word	0x000fffff
 8007684:	00000000 	.word	0x00000000

08007688 <scalbn>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	ec55 4b10 	vmov	r4, r5, d0
 800768e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007692:	4606      	mov	r6, r0
 8007694:	462b      	mov	r3, r5
 8007696:	b99a      	cbnz	r2, 80076c0 <scalbn+0x38>
 8007698:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800769c:	4323      	orrs	r3, r4
 800769e:	d036      	beq.n	800770e <scalbn+0x86>
 80076a0:	4b39      	ldr	r3, [pc, #228]	; (8007788 <scalbn+0x100>)
 80076a2:	4629      	mov	r1, r5
 80076a4:	ee10 0a10 	vmov	r0, s0
 80076a8:	2200      	movs	r2, #0
 80076aa:	f7f8 ff65 	bl	8000578 <__aeabi_dmul>
 80076ae:	4b37      	ldr	r3, [pc, #220]	; (800778c <scalbn+0x104>)
 80076b0:	429e      	cmp	r6, r3
 80076b2:	4604      	mov	r4, r0
 80076b4:	460d      	mov	r5, r1
 80076b6:	da10      	bge.n	80076da <scalbn+0x52>
 80076b8:	a32b      	add	r3, pc, #172	; (adr r3, 8007768 <scalbn+0xe0>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e03a      	b.n	8007736 <scalbn+0xae>
 80076c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d10c      	bne.n	80076e2 <scalbn+0x5a>
 80076c8:	ee10 2a10 	vmov	r2, s0
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 fd9c 	bl	800020c <__adddf3>
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	e019      	b.n	800770e <scalbn+0x86>
 80076da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076de:	460b      	mov	r3, r1
 80076e0:	3a36      	subs	r2, #54	; 0x36
 80076e2:	4432      	add	r2, r6
 80076e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80076e8:	428a      	cmp	r2, r1
 80076ea:	dd08      	ble.n	80076fe <scalbn+0x76>
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	a120      	add	r1, pc, #128	; (adr r1, 8007770 <scalbn+0xe8>)
 80076f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f4:	da1c      	bge.n	8007730 <scalbn+0xa8>
 80076f6:	a120      	add	r1, pc, #128	; (adr r1, 8007778 <scalbn+0xf0>)
 80076f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fc:	e018      	b.n	8007730 <scalbn+0xa8>
 80076fe:	2a00      	cmp	r2, #0
 8007700:	dd08      	ble.n	8007714 <scalbn+0x8c>
 8007702:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007706:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800770a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800770e:	ec45 4b10 	vmov	d0, r4, r5
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007718:	da19      	bge.n	800774e <scalbn+0xc6>
 800771a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800771e:	429e      	cmp	r6, r3
 8007720:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007724:	dd0a      	ble.n	800773c <scalbn+0xb4>
 8007726:	a112      	add	r1, pc, #72	; (adr r1, 8007770 <scalbn+0xe8>)
 8007728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e2      	bne.n	80076f6 <scalbn+0x6e>
 8007730:	a30f      	add	r3, pc, #60	; (adr r3, 8007770 <scalbn+0xe8>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff1f 	bl	8000578 <__aeabi_dmul>
 800773a:	e7cb      	b.n	80076d4 <scalbn+0x4c>
 800773c:	a10a      	add	r1, pc, #40	; (adr r1, 8007768 <scalbn+0xe0>)
 800773e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0b8      	beq.n	80076b8 <scalbn+0x30>
 8007746:	a10e      	add	r1, pc, #56	; (adr r1, 8007780 <scalbn+0xf8>)
 8007748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774c:	e7b4      	b.n	80076b8 <scalbn+0x30>
 800774e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007752:	3236      	adds	r2, #54	; 0x36
 8007754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007758:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800775c:	4620      	mov	r0, r4
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <scalbn+0x108>)
 8007760:	2200      	movs	r2, #0
 8007762:	e7e8      	b.n	8007736 <scalbn+0xae>
 8007764:	f3af 8000 	nop.w
 8007768:	c2f8f359 	.word	0xc2f8f359
 800776c:	01a56e1f 	.word	0x01a56e1f
 8007770:	8800759c 	.word	0x8800759c
 8007774:	7e37e43c 	.word	0x7e37e43c
 8007778:	8800759c 	.word	0x8800759c
 800777c:	fe37e43c 	.word	0xfe37e43c
 8007780:	c2f8f359 	.word	0xc2f8f359
 8007784:	81a56e1f 	.word	0x81a56e1f
 8007788:	43500000 	.word	0x43500000
 800778c:	ffff3cb0 	.word	0xffff3cb0
 8007790:	3c900000 	.word	0x3c900000

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
